
G070RBLed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0d4  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  0800c190  0800c190  0000d190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c748  0800c748  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c748  0800c748  0000d748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c750  0800c750  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c750  0800c750  0000d750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c754  0800c754  0000d754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800c758  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b4  200001d4  0800c92c  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000688  0800c92c  0000e688  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000176c0  00000000  00000000  0000e1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000310f  00000000  00000000  000258bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  000289d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001076  00000000  00000000  00029ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192f6  00000000  00000000  0002af36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b76  00000000  00000000  0004422c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dd6d  00000000  00000000  0005dda2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fbb0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f28  00000000  00000000  000fbb54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00101a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001d4 	.word	0x200001d4
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800c174 	.word	0x0800c174

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001d8 	.word	0x200001d8
 80000fc:	0800c174 	.word	0x0800c174

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			@ (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	@ 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	@ 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	@ 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 f987 	bl	8001748 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f8c7 	bl	80015d8 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 f979 	bl	8001748 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 f96f 	bl	8001748 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 f8f1 	bl	8001660 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 f8e7 	bl	8001660 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_ldivmod>:
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d115      	bne.n	80004d0 <__aeabi_ldivmod+0x30>
 80004a4:	2a00      	cmp	r2, #0
 80004a6:	d113      	bne.n	80004d0 <__aeabi_ldivmod+0x30>
 80004a8:	2900      	cmp	r1, #0
 80004aa:	db06      	blt.n	80004ba <__aeabi_ldivmod+0x1a>
 80004ac:	dc01      	bgt.n	80004b2 <__aeabi_ldivmod+0x12>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d006      	beq.n	80004c0 <__aeabi_ldivmod+0x20>
 80004b2:	2000      	movs	r0, #0
 80004b4:	43c0      	mvns	r0, r0
 80004b6:	0841      	lsrs	r1, r0, #1
 80004b8:	e002      	b.n	80004c0 <__aeabi_ldivmod+0x20>
 80004ba:	2180      	movs	r1, #128	@ 0x80
 80004bc:	0609      	lsls	r1, r1, #24
 80004be:	2000      	movs	r0, #0
 80004c0:	b407      	push	{r0, r1, r2}
 80004c2:	4802      	ldr	r0, [pc, #8]	@ (80004cc <__aeabi_ldivmod+0x2c>)
 80004c4:	a101      	add	r1, pc, #4	@ (adr r1, 80004cc <__aeabi_ldivmod+0x2c>)
 80004c6:	1840      	adds	r0, r0, r1
 80004c8:	9002      	str	r0, [sp, #8]
 80004ca:	bd03      	pop	{r0, r1, pc}
 80004cc:	ffffff55 	.word	0xffffff55
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f834 	bl	8000544 <__gnu_ldivmod_helper>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			@ (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1824      	adds	r4, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	42a3      	cmp	r3, r4
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	@ 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c23      	lsrs	r3, r4, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0424      	lsls	r4, r4, #16
 8000536:	1960      	adds	r0, r4, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__gnu_ldivmod_helper>:
 8000544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000546:	46ce      	mov	lr, r9
 8000548:	4647      	mov	r7, r8
 800054a:	b580      	push	{r7, lr}
 800054c:	4691      	mov	r9, r2
 800054e:	4698      	mov	r8, r3
 8000550:	0004      	movs	r4, r0
 8000552:	000d      	movs	r5, r1
 8000554:	f002 f8e4 	bl	8002720 <__divdi3>
 8000558:	0007      	movs	r7, r0
 800055a:	000e      	movs	r6, r1
 800055c:	0002      	movs	r2, r0
 800055e:	000b      	movs	r3, r1
 8000560:	4648      	mov	r0, r9
 8000562:	4641      	mov	r1, r8
 8000564:	f7ff ffc0 	bl	80004e8 <__aeabi_lmul>
 8000568:	1a24      	subs	r4, r4, r0
 800056a:	418d      	sbcs	r5, r1
 800056c:	9b08      	ldr	r3, [sp, #32]
 800056e:	0038      	movs	r0, r7
 8000570:	0031      	movs	r1, r6
 8000572:	601c      	str	r4, [r3, #0]
 8000574:	605d      	str	r5, [r3, #4]
 8000576:	bcc0      	pop	{r6, r7}
 8000578:	46b9      	mov	r9, r7
 800057a:	46b0      	mov	r8, r6
 800057c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_fdiv>:
 8000580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000582:	464f      	mov	r7, r9
 8000584:	4646      	mov	r6, r8
 8000586:	46d6      	mov	lr, sl
 8000588:	0244      	lsls	r4, r0, #9
 800058a:	b5c0      	push	{r6, r7, lr}
 800058c:	0047      	lsls	r7, r0, #1
 800058e:	1c0e      	adds	r6, r1, #0
 8000590:	0a64      	lsrs	r4, r4, #9
 8000592:	0e3f      	lsrs	r7, r7, #24
 8000594:	0fc5      	lsrs	r5, r0, #31
 8000596:	2f00      	cmp	r7, #0
 8000598:	d03c      	beq.n	8000614 <__aeabi_fdiv+0x94>
 800059a:	2fff      	cmp	r7, #255	@ 0xff
 800059c:	d042      	beq.n	8000624 <__aeabi_fdiv+0xa4>
 800059e:	2300      	movs	r3, #0
 80005a0:	2280      	movs	r2, #128	@ 0x80
 80005a2:	4699      	mov	r9, r3
 80005a4:	469a      	mov	sl, r3
 80005a6:	00e4      	lsls	r4, r4, #3
 80005a8:	04d2      	lsls	r2, r2, #19
 80005aa:	4314      	orrs	r4, r2
 80005ac:	3f7f      	subs	r7, #127	@ 0x7f
 80005ae:	0273      	lsls	r3, r6, #9
 80005b0:	0a5b      	lsrs	r3, r3, #9
 80005b2:	4698      	mov	r8, r3
 80005b4:	0073      	lsls	r3, r6, #1
 80005b6:	0e1b      	lsrs	r3, r3, #24
 80005b8:	0ff6      	lsrs	r6, r6, #31
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d01b      	beq.n	80005f6 <__aeabi_fdiv+0x76>
 80005be:	2bff      	cmp	r3, #255	@ 0xff
 80005c0:	d013      	beq.n	80005ea <__aeabi_fdiv+0x6a>
 80005c2:	4642      	mov	r2, r8
 80005c4:	2180      	movs	r1, #128	@ 0x80
 80005c6:	00d2      	lsls	r2, r2, #3
 80005c8:	04c9      	lsls	r1, r1, #19
 80005ca:	4311      	orrs	r1, r2
 80005cc:	4688      	mov	r8, r1
 80005ce:	2000      	movs	r0, #0
 80005d0:	3b7f      	subs	r3, #127	@ 0x7f
 80005d2:	0029      	movs	r1, r5
 80005d4:	1aff      	subs	r7, r7, r3
 80005d6:	464b      	mov	r3, r9
 80005d8:	4071      	eors	r1, r6
 80005da:	b2c9      	uxtb	r1, r1
 80005dc:	2b0f      	cmp	r3, #15
 80005de:	d900      	bls.n	80005e2 <__aeabi_fdiv+0x62>
 80005e0:	e0b5      	b.n	800074e <__aeabi_fdiv+0x1ce>
 80005e2:	4a74      	ldr	r2, [pc, #464]	@ (80007b4 <__aeabi_fdiv+0x234>)
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	58d3      	ldr	r3, [r2, r3]
 80005e8:	469f      	mov	pc, r3
 80005ea:	4643      	mov	r3, r8
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d13f      	bne.n	8000670 <__aeabi_fdiv+0xf0>
 80005f0:	3fff      	subs	r7, #255	@ 0xff
 80005f2:	3302      	adds	r3, #2
 80005f4:	e003      	b.n	80005fe <__aeabi_fdiv+0x7e>
 80005f6:	4643      	mov	r3, r8
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d12d      	bne.n	8000658 <__aeabi_fdiv+0xd8>
 80005fc:	2301      	movs	r3, #1
 80005fe:	0029      	movs	r1, r5
 8000600:	464a      	mov	r2, r9
 8000602:	4071      	eors	r1, r6
 8000604:	b2c9      	uxtb	r1, r1
 8000606:	431a      	orrs	r2, r3
 8000608:	2a0e      	cmp	r2, #14
 800060a:	d838      	bhi.n	800067e <__aeabi_fdiv+0xfe>
 800060c:	486a      	ldr	r0, [pc, #424]	@ (80007b8 <__aeabi_fdiv+0x238>)
 800060e:	0092      	lsls	r2, r2, #2
 8000610:	5882      	ldr	r2, [r0, r2]
 8000612:	4697      	mov	pc, r2
 8000614:	2c00      	cmp	r4, #0
 8000616:	d113      	bne.n	8000640 <__aeabi_fdiv+0xc0>
 8000618:	2304      	movs	r3, #4
 800061a:	4699      	mov	r9, r3
 800061c:	3b03      	subs	r3, #3
 800061e:	2700      	movs	r7, #0
 8000620:	469a      	mov	sl, r3
 8000622:	e7c4      	b.n	80005ae <__aeabi_fdiv+0x2e>
 8000624:	2c00      	cmp	r4, #0
 8000626:	d105      	bne.n	8000634 <__aeabi_fdiv+0xb4>
 8000628:	2308      	movs	r3, #8
 800062a:	4699      	mov	r9, r3
 800062c:	3b06      	subs	r3, #6
 800062e:	27ff      	movs	r7, #255	@ 0xff
 8000630:	469a      	mov	sl, r3
 8000632:	e7bc      	b.n	80005ae <__aeabi_fdiv+0x2e>
 8000634:	230c      	movs	r3, #12
 8000636:	4699      	mov	r9, r3
 8000638:	3b09      	subs	r3, #9
 800063a:	27ff      	movs	r7, #255	@ 0xff
 800063c:	469a      	mov	sl, r3
 800063e:	e7b6      	b.n	80005ae <__aeabi_fdiv+0x2e>
 8000640:	0020      	movs	r0, r4
 8000642:	f002 f84f 	bl	80026e4 <__clzsi2>
 8000646:	2776      	movs	r7, #118	@ 0x76
 8000648:	1f43      	subs	r3, r0, #5
 800064a:	409c      	lsls	r4, r3
 800064c:	2300      	movs	r3, #0
 800064e:	427f      	negs	r7, r7
 8000650:	4699      	mov	r9, r3
 8000652:	469a      	mov	sl, r3
 8000654:	1a3f      	subs	r7, r7, r0
 8000656:	e7aa      	b.n	80005ae <__aeabi_fdiv+0x2e>
 8000658:	4640      	mov	r0, r8
 800065a:	f002 f843 	bl	80026e4 <__clzsi2>
 800065e:	4642      	mov	r2, r8
 8000660:	1f43      	subs	r3, r0, #5
 8000662:	409a      	lsls	r2, r3
 8000664:	2376      	movs	r3, #118	@ 0x76
 8000666:	425b      	negs	r3, r3
 8000668:	1a1b      	subs	r3, r3, r0
 800066a:	4690      	mov	r8, r2
 800066c:	2000      	movs	r0, #0
 800066e:	e7b0      	b.n	80005d2 <__aeabi_fdiv+0x52>
 8000670:	2303      	movs	r3, #3
 8000672:	464a      	mov	r2, r9
 8000674:	431a      	orrs	r2, r3
 8000676:	4691      	mov	r9, r2
 8000678:	2003      	movs	r0, #3
 800067a:	33fc      	adds	r3, #252	@ 0xfc
 800067c:	e7a9      	b.n	80005d2 <__aeabi_fdiv+0x52>
 800067e:	000d      	movs	r5, r1
 8000680:	20ff      	movs	r0, #255	@ 0xff
 8000682:	2200      	movs	r2, #0
 8000684:	05c0      	lsls	r0, r0, #23
 8000686:	07ed      	lsls	r5, r5, #31
 8000688:	4310      	orrs	r0, r2
 800068a:	4328      	orrs	r0, r5
 800068c:	bce0      	pop	{r5, r6, r7}
 800068e:	46ba      	mov	sl, r7
 8000690:	46b1      	mov	r9, r6
 8000692:	46a8      	mov	r8, r5
 8000694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000696:	000d      	movs	r5, r1
 8000698:	2000      	movs	r0, #0
 800069a:	2200      	movs	r2, #0
 800069c:	e7f2      	b.n	8000684 <__aeabi_fdiv+0x104>
 800069e:	4653      	mov	r3, sl
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	d0ed      	beq.n	8000680 <__aeabi_fdiv+0x100>
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	d033      	beq.n	8000710 <__aeabi_fdiv+0x190>
 80006a8:	46a0      	mov	r8, r4
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d105      	bne.n	80006ba <__aeabi_fdiv+0x13a>
 80006ae:	2000      	movs	r0, #0
 80006b0:	2200      	movs	r2, #0
 80006b2:	e7e7      	b.n	8000684 <__aeabi_fdiv+0x104>
 80006b4:	0035      	movs	r5, r6
 80006b6:	2803      	cmp	r0, #3
 80006b8:	d07a      	beq.n	80007b0 <__aeabi_fdiv+0x230>
 80006ba:	003b      	movs	r3, r7
 80006bc:	337f      	adds	r3, #127	@ 0x7f
 80006be:	2b00      	cmp	r3, #0
 80006c0:	dd2d      	ble.n	800071e <__aeabi_fdiv+0x19e>
 80006c2:	4642      	mov	r2, r8
 80006c4:	0752      	lsls	r2, r2, #29
 80006c6:	d007      	beq.n	80006d8 <__aeabi_fdiv+0x158>
 80006c8:	220f      	movs	r2, #15
 80006ca:	4641      	mov	r1, r8
 80006cc:	400a      	ands	r2, r1
 80006ce:	2a04      	cmp	r2, #4
 80006d0:	d002      	beq.n	80006d8 <__aeabi_fdiv+0x158>
 80006d2:	2204      	movs	r2, #4
 80006d4:	4694      	mov	ip, r2
 80006d6:	44e0      	add	r8, ip
 80006d8:	4642      	mov	r2, r8
 80006da:	0112      	lsls	r2, r2, #4
 80006dc:	d505      	bpl.n	80006ea <__aeabi_fdiv+0x16a>
 80006de:	4642      	mov	r2, r8
 80006e0:	4b36      	ldr	r3, [pc, #216]	@ (80007bc <__aeabi_fdiv+0x23c>)
 80006e2:	401a      	ands	r2, r3
 80006e4:	003b      	movs	r3, r7
 80006e6:	4690      	mov	r8, r2
 80006e8:	3380      	adds	r3, #128	@ 0x80
 80006ea:	2bfe      	cmp	r3, #254	@ 0xfe
 80006ec:	dcc8      	bgt.n	8000680 <__aeabi_fdiv+0x100>
 80006ee:	4642      	mov	r2, r8
 80006f0:	0192      	lsls	r2, r2, #6
 80006f2:	0a52      	lsrs	r2, r2, #9
 80006f4:	b2d8      	uxtb	r0, r3
 80006f6:	e7c5      	b.n	8000684 <__aeabi_fdiv+0x104>
 80006f8:	2280      	movs	r2, #128	@ 0x80
 80006fa:	2500      	movs	r5, #0
 80006fc:	20ff      	movs	r0, #255	@ 0xff
 80006fe:	03d2      	lsls	r2, r2, #15
 8000700:	e7c0      	b.n	8000684 <__aeabi_fdiv+0x104>
 8000702:	2280      	movs	r2, #128	@ 0x80
 8000704:	03d2      	lsls	r2, r2, #15
 8000706:	4214      	tst	r4, r2
 8000708:	d002      	beq.n	8000710 <__aeabi_fdiv+0x190>
 800070a:	4643      	mov	r3, r8
 800070c:	4213      	tst	r3, r2
 800070e:	d049      	beq.n	80007a4 <__aeabi_fdiv+0x224>
 8000710:	2280      	movs	r2, #128	@ 0x80
 8000712:	03d2      	lsls	r2, r2, #15
 8000714:	4322      	orrs	r2, r4
 8000716:	0252      	lsls	r2, r2, #9
 8000718:	20ff      	movs	r0, #255	@ 0xff
 800071a:	0a52      	lsrs	r2, r2, #9
 800071c:	e7b2      	b.n	8000684 <__aeabi_fdiv+0x104>
 800071e:	2201      	movs	r2, #1
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	2b1b      	cmp	r3, #27
 8000724:	dcc3      	bgt.n	80006ae <__aeabi_fdiv+0x12e>
 8000726:	4642      	mov	r2, r8
 8000728:	40da      	lsrs	r2, r3
 800072a:	4643      	mov	r3, r8
 800072c:	379e      	adds	r7, #158	@ 0x9e
 800072e:	40bb      	lsls	r3, r7
 8000730:	1e59      	subs	r1, r3, #1
 8000732:	418b      	sbcs	r3, r1
 8000734:	431a      	orrs	r2, r3
 8000736:	0753      	lsls	r3, r2, #29
 8000738:	d004      	beq.n	8000744 <__aeabi_fdiv+0x1c4>
 800073a:	230f      	movs	r3, #15
 800073c:	4013      	ands	r3, r2
 800073e:	2b04      	cmp	r3, #4
 8000740:	d000      	beq.n	8000744 <__aeabi_fdiv+0x1c4>
 8000742:	3204      	adds	r2, #4
 8000744:	0153      	lsls	r3, r2, #5
 8000746:	d529      	bpl.n	800079c <__aeabi_fdiv+0x21c>
 8000748:	2001      	movs	r0, #1
 800074a:	2200      	movs	r2, #0
 800074c:	e79a      	b.n	8000684 <__aeabi_fdiv+0x104>
 800074e:	4642      	mov	r2, r8
 8000750:	0163      	lsls	r3, r4, #5
 8000752:	0155      	lsls	r5, r2, #5
 8000754:	42ab      	cmp	r3, r5
 8000756:	d215      	bcs.n	8000784 <__aeabi_fdiv+0x204>
 8000758:	201b      	movs	r0, #27
 800075a:	2200      	movs	r2, #0
 800075c:	3f01      	subs	r7, #1
 800075e:	2601      	movs	r6, #1
 8000760:	001c      	movs	r4, r3
 8000762:	0052      	lsls	r2, r2, #1
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	2c00      	cmp	r4, #0
 8000768:	db01      	blt.n	800076e <__aeabi_fdiv+0x1ee>
 800076a:	429d      	cmp	r5, r3
 800076c:	d801      	bhi.n	8000772 <__aeabi_fdiv+0x1f2>
 800076e:	1b5b      	subs	r3, r3, r5
 8000770:	4332      	orrs	r2, r6
 8000772:	3801      	subs	r0, #1
 8000774:	2800      	cmp	r0, #0
 8000776:	d1f3      	bne.n	8000760 <__aeabi_fdiv+0x1e0>
 8000778:	1e58      	subs	r0, r3, #1
 800077a:	4183      	sbcs	r3, r0
 800077c:	4313      	orrs	r3, r2
 800077e:	4698      	mov	r8, r3
 8000780:	000d      	movs	r5, r1
 8000782:	e79a      	b.n	80006ba <__aeabi_fdiv+0x13a>
 8000784:	201a      	movs	r0, #26
 8000786:	2201      	movs	r2, #1
 8000788:	1b5b      	subs	r3, r3, r5
 800078a:	e7e8      	b.n	800075e <__aeabi_fdiv+0x1de>
 800078c:	3b02      	subs	r3, #2
 800078e:	425a      	negs	r2, r3
 8000790:	4153      	adcs	r3, r2
 8000792:	425b      	negs	r3, r3
 8000794:	0035      	movs	r5, r6
 8000796:	2200      	movs	r2, #0
 8000798:	b2d8      	uxtb	r0, r3
 800079a:	e773      	b.n	8000684 <__aeabi_fdiv+0x104>
 800079c:	0192      	lsls	r2, r2, #6
 800079e:	2000      	movs	r0, #0
 80007a0:	0a52      	lsrs	r2, r2, #9
 80007a2:	e76f      	b.n	8000684 <__aeabi_fdiv+0x104>
 80007a4:	431a      	orrs	r2, r3
 80007a6:	0252      	lsls	r2, r2, #9
 80007a8:	0035      	movs	r5, r6
 80007aa:	20ff      	movs	r0, #255	@ 0xff
 80007ac:	0a52      	lsrs	r2, r2, #9
 80007ae:	e769      	b.n	8000684 <__aeabi_fdiv+0x104>
 80007b0:	4644      	mov	r4, r8
 80007b2:	e7ad      	b.n	8000710 <__aeabi_fdiv+0x190>
 80007b4:	0800c240 	.word	0x0800c240
 80007b8:	0800c280 	.word	0x0800c280
 80007bc:	f7ffffff 	.word	0xf7ffffff

080007c0 <__aeabi_i2f>:
 80007c0:	b570      	push	{r4, r5, r6, lr}
 80007c2:	2800      	cmp	r0, #0
 80007c4:	d013      	beq.n	80007ee <__aeabi_i2f+0x2e>
 80007c6:	17c3      	asrs	r3, r0, #31
 80007c8:	18c5      	adds	r5, r0, r3
 80007ca:	405d      	eors	r5, r3
 80007cc:	0fc4      	lsrs	r4, r0, #31
 80007ce:	0028      	movs	r0, r5
 80007d0:	f001 ff88 	bl	80026e4 <__clzsi2>
 80007d4:	239e      	movs	r3, #158	@ 0x9e
 80007d6:	0001      	movs	r1, r0
 80007d8:	1a1b      	subs	r3, r3, r0
 80007da:	2b96      	cmp	r3, #150	@ 0x96
 80007dc:	dc0f      	bgt.n	80007fe <__aeabi_i2f+0x3e>
 80007de:	2808      	cmp	r0, #8
 80007e0:	d034      	beq.n	800084c <__aeabi_i2f+0x8c>
 80007e2:	3908      	subs	r1, #8
 80007e4:	408d      	lsls	r5, r1
 80007e6:	026d      	lsls	r5, r5, #9
 80007e8:	0a6d      	lsrs	r5, r5, #9
 80007ea:	b2d8      	uxtb	r0, r3
 80007ec:	e002      	b.n	80007f4 <__aeabi_i2f+0x34>
 80007ee:	2400      	movs	r4, #0
 80007f0:	2000      	movs	r0, #0
 80007f2:	2500      	movs	r5, #0
 80007f4:	05c0      	lsls	r0, r0, #23
 80007f6:	4328      	orrs	r0, r5
 80007f8:	07e4      	lsls	r4, r4, #31
 80007fa:	4320      	orrs	r0, r4
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	2b99      	cmp	r3, #153	@ 0x99
 8000800:	dc16      	bgt.n	8000830 <__aeabi_i2f+0x70>
 8000802:	1f42      	subs	r2, r0, #5
 8000804:	2805      	cmp	r0, #5
 8000806:	d000      	beq.n	800080a <__aeabi_i2f+0x4a>
 8000808:	4095      	lsls	r5, r2
 800080a:	002a      	movs	r2, r5
 800080c:	4811      	ldr	r0, [pc, #68]	@ (8000854 <__aeabi_i2f+0x94>)
 800080e:	4002      	ands	r2, r0
 8000810:	076e      	lsls	r6, r5, #29
 8000812:	d009      	beq.n	8000828 <__aeabi_i2f+0x68>
 8000814:	260f      	movs	r6, #15
 8000816:	4035      	ands	r5, r6
 8000818:	2d04      	cmp	r5, #4
 800081a:	d005      	beq.n	8000828 <__aeabi_i2f+0x68>
 800081c:	3204      	adds	r2, #4
 800081e:	0155      	lsls	r5, r2, #5
 8000820:	d502      	bpl.n	8000828 <__aeabi_i2f+0x68>
 8000822:	239f      	movs	r3, #159	@ 0x9f
 8000824:	4002      	ands	r2, r0
 8000826:	1a5b      	subs	r3, r3, r1
 8000828:	0192      	lsls	r2, r2, #6
 800082a:	0a55      	lsrs	r5, r2, #9
 800082c:	b2d8      	uxtb	r0, r3
 800082e:	e7e1      	b.n	80007f4 <__aeabi_i2f+0x34>
 8000830:	2205      	movs	r2, #5
 8000832:	1a12      	subs	r2, r2, r0
 8000834:	0028      	movs	r0, r5
 8000836:	40d0      	lsrs	r0, r2
 8000838:	0002      	movs	r2, r0
 800083a:	0008      	movs	r0, r1
 800083c:	301b      	adds	r0, #27
 800083e:	4085      	lsls	r5, r0
 8000840:	0028      	movs	r0, r5
 8000842:	1e45      	subs	r5, r0, #1
 8000844:	41a8      	sbcs	r0, r5
 8000846:	4302      	orrs	r2, r0
 8000848:	0015      	movs	r5, r2
 800084a:	e7de      	b.n	800080a <__aeabi_i2f+0x4a>
 800084c:	026d      	lsls	r5, r5, #9
 800084e:	2096      	movs	r0, #150	@ 0x96
 8000850:	0a6d      	lsrs	r5, r5, #9
 8000852:	e7cf      	b.n	80007f4 <__aeabi_i2f+0x34>
 8000854:	fbffffff 	.word	0xfbffffff

08000858 <__aeabi_ui2f>:
 8000858:	b570      	push	{r4, r5, r6, lr}
 800085a:	1e04      	subs	r4, r0, #0
 800085c:	d00e      	beq.n	800087c <__aeabi_ui2f+0x24>
 800085e:	f001 ff41 	bl	80026e4 <__clzsi2>
 8000862:	239e      	movs	r3, #158	@ 0x9e
 8000864:	0001      	movs	r1, r0
 8000866:	1a1b      	subs	r3, r3, r0
 8000868:	2b96      	cmp	r3, #150	@ 0x96
 800086a:	dc0c      	bgt.n	8000886 <__aeabi_ui2f+0x2e>
 800086c:	2808      	cmp	r0, #8
 800086e:	d02f      	beq.n	80008d0 <__aeabi_ui2f+0x78>
 8000870:	3908      	subs	r1, #8
 8000872:	408c      	lsls	r4, r1
 8000874:	0264      	lsls	r4, r4, #9
 8000876:	0a64      	lsrs	r4, r4, #9
 8000878:	b2d8      	uxtb	r0, r3
 800087a:	e001      	b.n	8000880 <__aeabi_ui2f+0x28>
 800087c:	2000      	movs	r0, #0
 800087e:	2400      	movs	r4, #0
 8000880:	05c0      	lsls	r0, r0, #23
 8000882:	4320      	orrs	r0, r4
 8000884:	bd70      	pop	{r4, r5, r6, pc}
 8000886:	2b99      	cmp	r3, #153	@ 0x99
 8000888:	dc16      	bgt.n	80008b8 <__aeabi_ui2f+0x60>
 800088a:	1f42      	subs	r2, r0, #5
 800088c:	2805      	cmp	r0, #5
 800088e:	d000      	beq.n	8000892 <__aeabi_ui2f+0x3a>
 8000890:	4094      	lsls	r4, r2
 8000892:	0022      	movs	r2, r4
 8000894:	4810      	ldr	r0, [pc, #64]	@ (80008d8 <__aeabi_ui2f+0x80>)
 8000896:	4002      	ands	r2, r0
 8000898:	0765      	lsls	r5, r4, #29
 800089a:	d009      	beq.n	80008b0 <__aeabi_ui2f+0x58>
 800089c:	250f      	movs	r5, #15
 800089e:	402c      	ands	r4, r5
 80008a0:	2c04      	cmp	r4, #4
 80008a2:	d005      	beq.n	80008b0 <__aeabi_ui2f+0x58>
 80008a4:	3204      	adds	r2, #4
 80008a6:	0154      	lsls	r4, r2, #5
 80008a8:	d502      	bpl.n	80008b0 <__aeabi_ui2f+0x58>
 80008aa:	239f      	movs	r3, #159	@ 0x9f
 80008ac:	4002      	ands	r2, r0
 80008ae:	1a5b      	subs	r3, r3, r1
 80008b0:	0192      	lsls	r2, r2, #6
 80008b2:	0a54      	lsrs	r4, r2, #9
 80008b4:	b2d8      	uxtb	r0, r3
 80008b6:	e7e3      	b.n	8000880 <__aeabi_ui2f+0x28>
 80008b8:	0002      	movs	r2, r0
 80008ba:	0020      	movs	r0, r4
 80008bc:	321b      	adds	r2, #27
 80008be:	4090      	lsls	r0, r2
 80008c0:	0002      	movs	r2, r0
 80008c2:	1e50      	subs	r0, r2, #1
 80008c4:	4182      	sbcs	r2, r0
 80008c6:	2005      	movs	r0, #5
 80008c8:	1a40      	subs	r0, r0, r1
 80008ca:	40c4      	lsrs	r4, r0
 80008cc:	4314      	orrs	r4, r2
 80008ce:	e7e0      	b.n	8000892 <__aeabi_ui2f+0x3a>
 80008d0:	0264      	lsls	r4, r4, #9
 80008d2:	2096      	movs	r0, #150	@ 0x96
 80008d4:	0a64      	lsrs	r4, r4, #9
 80008d6:	e7d3      	b.n	8000880 <__aeabi_ui2f+0x28>
 80008d8:	fbffffff 	.word	0xfbffffff

080008dc <__aeabi_dadd>:
 80008dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008de:	4657      	mov	r7, sl
 80008e0:	464e      	mov	r6, r9
 80008e2:	4645      	mov	r5, r8
 80008e4:	46de      	mov	lr, fp
 80008e6:	b5e0      	push	{r5, r6, r7, lr}
 80008e8:	b083      	sub	sp, #12
 80008ea:	9000      	str	r0, [sp, #0]
 80008ec:	9101      	str	r1, [sp, #4]
 80008ee:	030c      	lsls	r4, r1, #12
 80008f0:	004f      	lsls	r7, r1, #1
 80008f2:	0fce      	lsrs	r6, r1, #31
 80008f4:	0a61      	lsrs	r1, r4, #9
 80008f6:	9c00      	ldr	r4, [sp, #0]
 80008f8:	031d      	lsls	r5, r3, #12
 80008fa:	0f64      	lsrs	r4, r4, #29
 80008fc:	430c      	orrs	r4, r1
 80008fe:	9900      	ldr	r1, [sp, #0]
 8000900:	9200      	str	r2, [sp, #0]
 8000902:	9301      	str	r3, [sp, #4]
 8000904:	00c8      	lsls	r0, r1, #3
 8000906:	0059      	lsls	r1, r3, #1
 8000908:	0d4b      	lsrs	r3, r1, #21
 800090a:	4699      	mov	r9, r3
 800090c:	9a00      	ldr	r2, [sp, #0]
 800090e:	9b01      	ldr	r3, [sp, #4]
 8000910:	0a6d      	lsrs	r5, r5, #9
 8000912:	0fd9      	lsrs	r1, r3, #31
 8000914:	0f53      	lsrs	r3, r2, #29
 8000916:	432b      	orrs	r3, r5
 8000918:	469a      	mov	sl, r3
 800091a:	9b00      	ldr	r3, [sp, #0]
 800091c:	0d7f      	lsrs	r7, r7, #21
 800091e:	00da      	lsls	r2, r3, #3
 8000920:	4694      	mov	ip, r2
 8000922:	464a      	mov	r2, r9
 8000924:	46b0      	mov	r8, r6
 8000926:	1aba      	subs	r2, r7, r2
 8000928:	428e      	cmp	r6, r1
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x52>
 800092c:	e0b0      	b.n	8000a90 <__aeabi_dadd+0x1b4>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x58>
 8000932:	e078      	b.n	8000a26 <__aeabi_dadd+0x14a>
 8000934:	4649      	mov	r1, r9
 8000936:	2900      	cmp	r1, #0
 8000938:	d100      	bne.n	800093c <__aeabi_dadd+0x60>
 800093a:	e0e9      	b.n	8000b10 <__aeabi_dadd+0x234>
 800093c:	49c9      	ldr	r1, [pc, #804]	@ (8000c64 <__aeabi_dadd+0x388>)
 800093e:	428f      	cmp	r7, r1
 8000940:	d100      	bne.n	8000944 <__aeabi_dadd+0x68>
 8000942:	e195      	b.n	8000c70 <__aeabi_dadd+0x394>
 8000944:	2501      	movs	r5, #1
 8000946:	2a38      	cmp	r2, #56	@ 0x38
 8000948:	dc16      	bgt.n	8000978 <__aeabi_dadd+0x9c>
 800094a:	2180      	movs	r1, #128	@ 0x80
 800094c:	4653      	mov	r3, sl
 800094e:	0409      	lsls	r1, r1, #16
 8000950:	430b      	orrs	r3, r1
 8000952:	469a      	mov	sl, r3
 8000954:	2a1f      	cmp	r2, #31
 8000956:	dd00      	ble.n	800095a <__aeabi_dadd+0x7e>
 8000958:	e1e7      	b.n	8000d2a <__aeabi_dadd+0x44e>
 800095a:	2120      	movs	r1, #32
 800095c:	4655      	mov	r5, sl
 800095e:	1a8b      	subs	r3, r1, r2
 8000960:	4661      	mov	r1, ip
 8000962:	409d      	lsls	r5, r3
 8000964:	40d1      	lsrs	r1, r2
 8000966:	430d      	orrs	r5, r1
 8000968:	4661      	mov	r1, ip
 800096a:	4099      	lsls	r1, r3
 800096c:	1e4b      	subs	r3, r1, #1
 800096e:	4199      	sbcs	r1, r3
 8000970:	4653      	mov	r3, sl
 8000972:	40d3      	lsrs	r3, r2
 8000974:	430d      	orrs	r5, r1
 8000976:	1ae4      	subs	r4, r4, r3
 8000978:	1b45      	subs	r5, r0, r5
 800097a:	42a8      	cmp	r0, r5
 800097c:	4180      	sbcs	r0, r0
 800097e:	4240      	negs	r0, r0
 8000980:	1a24      	subs	r4, r4, r0
 8000982:	0223      	lsls	r3, r4, #8
 8000984:	d400      	bmi.n	8000988 <__aeabi_dadd+0xac>
 8000986:	e10f      	b.n	8000ba8 <__aeabi_dadd+0x2cc>
 8000988:	0264      	lsls	r4, r4, #9
 800098a:	0a64      	lsrs	r4, r4, #9
 800098c:	2c00      	cmp	r4, #0
 800098e:	d100      	bne.n	8000992 <__aeabi_dadd+0xb6>
 8000990:	e139      	b.n	8000c06 <__aeabi_dadd+0x32a>
 8000992:	0020      	movs	r0, r4
 8000994:	f001 fea6 	bl	80026e4 <__clzsi2>
 8000998:	0003      	movs	r3, r0
 800099a:	3b08      	subs	r3, #8
 800099c:	2120      	movs	r1, #32
 800099e:	0028      	movs	r0, r5
 80009a0:	1aca      	subs	r2, r1, r3
 80009a2:	40d0      	lsrs	r0, r2
 80009a4:	409c      	lsls	r4, r3
 80009a6:	0002      	movs	r2, r0
 80009a8:	409d      	lsls	r5, r3
 80009aa:	4322      	orrs	r2, r4
 80009ac:	429f      	cmp	r7, r3
 80009ae:	dd00      	ble.n	80009b2 <__aeabi_dadd+0xd6>
 80009b0:	e173      	b.n	8000c9a <__aeabi_dadd+0x3be>
 80009b2:	1bd8      	subs	r0, r3, r7
 80009b4:	3001      	adds	r0, #1
 80009b6:	1a09      	subs	r1, r1, r0
 80009b8:	002c      	movs	r4, r5
 80009ba:	408d      	lsls	r5, r1
 80009bc:	40c4      	lsrs	r4, r0
 80009be:	1e6b      	subs	r3, r5, #1
 80009c0:	419d      	sbcs	r5, r3
 80009c2:	0013      	movs	r3, r2
 80009c4:	40c2      	lsrs	r2, r0
 80009c6:	408b      	lsls	r3, r1
 80009c8:	4325      	orrs	r5, r4
 80009ca:	2700      	movs	r7, #0
 80009cc:	0014      	movs	r4, r2
 80009ce:	431d      	orrs	r5, r3
 80009d0:	076b      	lsls	r3, r5, #29
 80009d2:	d009      	beq.n	80009e8 <__aeabi_dadd+0x10c>
 80009d4:	230f      	movs	r3, #15
 80009d6:	402b      	ands	r3, r5
 80009d8:	2b04      	cmp	r3, #4
 80009da:	d005      	beq.n	80009e8 <__aeabi_dadd+0x10c>
 80009dc:	1d2b      	adds	r3, r5, #4
 80009de:	42ab      	cmp	r3, r5
 80009e0:	41ad      	sbcs	r5, r5
 80009e2:	426d      	negs	r5, r5
 80009e4:	1964      	adds	r4, r4, r5
 80009e6:	001d      	movs	r5, r3
 80009e8:	0223      	lsls	r3, r4, #8
 80009ea:	d400      	bmi.n	80009ee <__aeabi_dadd+0x112>
 80009ec:	e12d      	b.n	8000c4a <__aeabi_dadd+0x36e>
 80009ee:	4a9d      	ldr	r2, [pc, #628]	@ (8000c64 <__aeabi_dadd+0x388>)
 80009f0:	3701      	adds	r7, #1
 80009f2:	4297      	cmp	r7, r2
 80009f4:	d100      	bne.n	80009f8 <__aeabi_dadd+0x11c>
 80009f6:	e0d3      	b.n	8000ba0 <__aeabi_dadd+0x2c4>
 80009f8:	4646      	mov	r6, r8
 80009fa:	499b      	ldr	r1, [pc, #620]	@ (8000c68 <__aeabi_dadd+0x38c>)
 80009fc:	08ed      	lsrs	r5, r5, #3
 80009fe:	4021      	ands	r1, r4
 8000a00:	074a      	lsls	r2, r1, #29
 8000a02:	432a      	orrs	r2, r5
 8000a04:	057c      	lsls	r4, r7, #21
 8000a06:	024d      	lsls	r5, r1, #9
 8000a08:	0b2d      	lsrs	r5, r5, #12
 8000a0a:	0d64      	lsrs	r4, r4, #21
 8000a0c:	0524      	lsls	r4, r4, #20
 8000a0e:	432c      	orrs	r4, r5
 8000a10:	07f6      	lsls	r6, r6, #31
 8000a12:	4334      	orrs	r4, r6
 8000a14:	0010      	movs	r0, r2
 8000a16:	0021      	movs	r1, r4
 8000a18:	b003      	add	sp, #12
 8000a1a:	bcf0      	pop	{r4, r5, r6, r7}
 8000a1c:	46bb      	mov	fp, r7
 8000a1e:	46b2      	mov	sl, r6
 8000a20:	46a9      	mov	r9, r5
 8000a22:	46a0      	mov	r8, r4
 8000a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a26:	2a00      	cmp	r2, #0
 8000a28:	d100      	bne.n	8000a2c <__aeabi_dadd+0x150>
 8000a2a:	e084      	b.n	8000b36 <__aeabi_dadd+0x25a>
 8000a2c:	464a      	mov	r2, r9
 8000a2e:	1bd2      	subs	r2, r2, r7
 8000a30:	2f00      	cmp	r7, #0
 8000a32:	d000      	beq.n	8000a36 <__aeabi_dadd+0x15a>
 8000a34:	e16d      	b.n	8000d12 <__aeabi_dadd+0x436>
 8000a36:	0025      	movs	r5, r4
 8000a38:	4305      	orrs	r5, r0
 8000a3a:	d100      	bne.n	8000a3e <__aeabi_dadd+0x162>
 8000a3c:	e127      	b.n	8000c8e <__aeabi_dadd+0x3b2>
 8000a3e:	1e56      	subs	r6, r2, #1
 8000a40:	2a01      	cmp	r2, #1
 8000a42:	d100      	bne.n	8000a46 <__aeabi_dadd+0x16a>
 8000a44:	e23b      	b.n	8000ebe <__aeabi_dadd+0x5e2>
 8000a46:	4d87      	ldr	r5, [pc, #540]	@ (8000c64 <__aeabi_dadd+0x388>)
 8000a48:	42aa      	cmp	r2, r5
 8000a4a:	d100      	bne.n	8000a4e <__aeabi_dadd+0x172>
 8000a4c:	e26a      	b.n	8000f24 <__aeabi_dadd+0x648>
 8000a4e:	2501      	movs	r5, #1
 8000a50:	2e38      	cmp	r6, #56	@ 0x38
 8000a52:	dc12      	bgt.n	8000a7a <__aeabi_dadd+0x19e>
 8000a54:	0032      	movs	r2, r6
 8000a56:	2a1f      	cmp	r2, #31
 8000a58:	dd00      	ble.n	8000a5c <__aeabi_dadd+0x180>
 8000a5a:	e1f8      	b.n	8000e4e <__aeabi_dadd+0x572>
 8000a5c:	2620      	movs	r6, #32
 8000a5e:	0025      	movs	r5, r4
 8000a60:	1ab6      	subs	r6, r6, r2
 8000a62:	0007      	movs	r7, r0
 8000a64:	4653      	mov	r3, sl
 8000a66:	40b0      	lsls	r0, r6
 8000a68:	40d4      	lsrs	r4, r2
 8000a6a:	40b5      	lsls	r5, r6
 8000a6c:	40d7      	lsrs	r7, r2
 8000a6e:	1e46      	subs	r6, r0, #1
 8000a70:	41b0      	sbcs	r0, r6
 8000a72:	1b1b      	subs	r3, r3, r4
 8000a74:	469a      	mov	sl, r3
 8000a76:	433d      	orrs	r5, r7
 8000a78:	4305      	orrs	r5, r0
 8000a7a:	4662      	mov	r2, ip
 8000a7c:	1b55      	subs	r5, r2, r5
 8000a7e:	45ac      	cmp	ip, r5
 8000a80:	4192      	sbcs	r2, r2
 8000a82:	4653      	mov	r3, sl
 8000a84:	4252      	negs	r2, r2
 8000a86:	000e      	movs	r6, r1
 8000a88:	464f      	mov	r7, r9
 8000a8a:	4688      	mov	r8, r1
 8000a8c:	1a9c      	subs	r4, r3, r2
 8000a8e:	e778      	b.n	8000982 <__aeabi_dadd+0xa6>
 8000a90:	2a00      	cmp	r2, #0
 8000a92:	dc00      	bgt.n	8000a96 <__aeabi_dadd+0x1ba>
 8000a94:	e08e      	b.n	8000bb4 <__aeabi_dadd+0x2d8>
 8000a96:	4649      	mov	r1, r9
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	d175      	bne.n	8000b88 <__aeabi_dadd+0x2ac>
 8000a9c:	4661      	mov	r1, ip
 8000a9e:	4653      	mov	r3, sl
 8000aa0:	4319      	orrs	r1, r3
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x1ca>
 8000aa4:	e0f6      	b.n	8000c94 <__aeabi_dadd+0x3b8>
 8000aa6:	1e51      	subs	r1, r2, #1
 8000aa8:	2a01      	cmp	r2, #1
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x1d2>
 8000aac:	e191      	b.n	8000dd2 <__aeabi_dadd+0x4f6>
 8000aae:	4d6d      	ldr	r5, [pc, #436]	@ (8000c64 <__aeabi_dadd+0x388>)
 8000ab0:	42aa      	cmp	r2, r5
 8000ab2:	d100      	bne.n	8000ab6 <__aeabi_dadd+0x1da>
 8000ab4:	e0dc      	b.n	8000c70 <__aeabi_dadd+0x394>
 8000ab6:	2501      	movs	r5, #1
 8000ab8:	2938      	cmp	r1, #56	@ 0x38
 8000aba:	dc14      	bgt.n	8000ae6 <__aeabi_dadd+0x20a>
 8000abc:	000a      	movs	r2, r1
 8000abe:	2a1f      	cmp	r2, #31
 8000ac0:	dd00      	ble.n	8000ac4 <__aeabi_dadd+0x1e8>
 8000ac2:	e1a2      	b.n	8000e0a <__aeabi_dadd+0x52e>
 8000ac4:	2120      	movs	r1, #32
 8000ac6:	4653      	mov	r3, sl
 8000ac8:	1a89      	subs	r1, r1, r2
 8000aca:	408b      	lsls	r3, r1
 8000acc:	001d      	movs	r5, r3
 8000ace:	4663      	mov	r3, ip
 8000ad0:	40d3      	lsrs	r3, r2
 8000ad2:	431d      	orrs	r5, r3
 8000ad4:	4663      	mov	r3, ip
 8000ad6:	408b      	lsls	r3, r1
 8000ad8:	0019      	movs	r1, r3
 8000ada:	1e4b      	subs	r3, r1, #1
 8000adc:	4199      	sbcs	r1, r3
 8000ade:	4653      	mov	r3, sl
 8000ae0:	40d3      	lsrs	r3, r2
 8000ae2:	430d      	orrs	r5, r1
 8000ae4:	18e4      	adds	r4, r4, r3
 8000ae6:	182d      	adds	r5, r5, r0
 8000ae8:	4285      	cmp	r5, r0
 8000aea:	4180      	sbcs	r0, r0
 8000aec:	4240      	negs	r0, r0
 8000aee:	1824      	adds	r4, r4, r0
 8000af0:	0223      	lsls	r3, r4, #8
 8000af2:	d559      	bpl.n	8000ba8 <__aeabi_dadd+0x2cc>
 8000af4:	4b5b      	ldr	r3, [pc, #364]	@ (8000c64 <__aeabi_dadd+0x388>)
 8000af6:	3701      	adds	r7, #1
 8000af8:	429f      	cmp	r7, r3
 8000afa:	d051      	beq.n	8000ba0 <__aeabi_dadd+0x2c4>
 8000afc:	2101      	movs	r1, #1
 8000afe:	4b5a      	ldr	r3, [pc, #360]	@ (8000c68 <__aeabi_dadd+0x38c>)
 8000b00:	086a      	lsrs	r2, r5, #1
 8000b02:	401c      	ands	r4, r3
 8000b04:	4029      	ands	r1, r5
 8000b06:	430a      	orrs	r2, r1
 8000b08:	07e5      	lsls	r5, r4, #31
 8000b0a:	4315      	orrs	r5, r2
 8000b0c:	0864      	lsrs	r4, r4, #1
 8000b0e:	e75f      	b.n	80009d0 <__aeabi_dadd+0xf4>
 8000b10:	4661      	mov	r1, ip
 8000b12:	4653      	mov	r3, sl
 8000b14:	4319      	orrs	r1, r3
 8000b16:	d100      	bne.n	8000b1a <__aeabi_dadd+0x23e>
 8000b18:	e0bc      	b.n	8000c94 <__aeabi_dadd+0x3b8>
 8000b1a:	1e51      	subs	r1, r2, #1
 8000b1c:	2a01      	cmp	r2, #1
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_dadd+0x246>
 8000b20:	e164      	b.n	8000dec <__aeabi_dadd+0x510>
 8000b22:	4d50      	ldr	r5, [pc, #320]	@ (8000c64 <__aeabi_dadd+0x388>)
 8000b24:	42aa      	cmp	r2, r5
 8000b26:	d100      	bne.n	8000b2a <__aeabi_dadd+0x24e>
 8000b28:	e16a      	b.n	8000e00 <__aeabi_dadd+0x524>
 8000b2a:	2501      	movs	r5, #1
 8000b2c:	2938      	cmp	r1, #56	@ 0x38
 8000b2e:	dd00      	ble.n	8000b32 <__aeabi_dadd+0x256>
 8000b30:	e722      	b.n	8000978 <__aeabi_dadd+0x9c>
 8000b32:	000a      	movs	r2, r1
 8000b34:	e70e      	b.n	8000954 <__aeabi_dadd+0x78>
 8000b36:	4a4d      	ldr	r2, [pc, #308]	@ (8000c6c <__aeabi_dadd+0x390>)
 8000b38:	1c7d      	adds	r5, r7, #1
 8000b3a:	4215      	tst	r5, r2
 8000b3c:	d000      	beq.n	8000b40 <__aeabi_dadd+0x264>
 8000b3e:	e0d0      	b.n	8000ce2 <__aeabi_dadd+0x406>
 8000b40:	0025      	movs	r5, r4
 8000b42:	4662      	mov	r2, ip
 8000b44:	4653      	mov	r3, sl
 8000b46:	4305      	orrs	r5, r0
 8000b48:	431a      	orrs	r2, r3
 8000b4a:	2f00      	cmp	r7, #0
 8000b4c:	d000      	beq.n	8000b50 <__aeabi_dadd+0x274>
 8000b4e:	e137      	b.n	8000dc0 <__aeabi_dadd+0x4e4>
 8000b50:	2d00      	cmp	r5, #0
 8000b52:	d100      	bne.n	8000b56 <__aeabi_dadd+0x27a>
 8000b54:	e1a8      	b.n	8000ea8 <__aeabi_dadd+0x5cc>
 8000b56:	2a00      	cmp	r2, #0
 8000b58:	d100      	bne.n	8000b5c <__aeabi_dadd+0x280>
 8000b5a:	e16a      	b.n	8000e32 <__aeabi_dadd+0x556>
 8000b5c:	4663      	mov	r3, ip
 8000b5e:	1ac5      	subs	r5, r0, r3
 8000b60:	4653      	mov	r3, sl
 8000b62:	1ae2      	subs	r2, r4, r3
 8000b64:	42a8      	cmp	r0, r5
 8000b66:	419b      	sbcs	r3, r3
 8000b68:	425b      	negs	r3, r3
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	021a      	lsls	r2, r3, #8
 8000b6e:	d400      	bmi.n	8000b72 <__aeabi_dadd+0x296>
 8000b70:	e203      	b.n	8000f7a <__aeabi_dadd+0x69e>
 8000b72:	4663      	mov	r3, ip
 8000b74:	1a1d      	subs	r5, r3, r0
 8000b76:	45ac      	cmp	ip, r5
 8000b78:	4192      	sbcs	r2, r2
 8000b7a:	4653      	mov	r3, sl
 8000b7c:	4252      	negs	r2, r2
 8000b7e:	1b1c      	subs	r4, r3, r4
 8000b80:	000e      	movs	r6, r1
 8000b82:	4688      	mov	r8, r1
 8000b84:	1aa4      	subs	r4, r4, r2
 8000b86:	e723      	b.n	80009d0 <__aeabi_dadd+0xf4>
 8000b88:	4936      	ldr	r1, [pc, #216]	@ (8000c64 <__aeabi_dadd+0x388>)
 8000b8a:	428f      	cmp	r7, r1
 8000b8c:	d070      	beq.n	8000c70 <__aeabi_dadd+0x394>
 8000b8e:	2501      	movs	r5, #1
 8000b90:	2a38      	cmp	r2, #56	@ 0x38
 8000b92:	dca8      	bgt.n	8000ae6 <__aeabi_dadd+0x20a>
 8000b94:	2180      	movs	r1, #128	@ 0x80
 8000b96:	4653      	mov	r3, sl
 8000b98:	0409      	lsls	r1, r1, #16
 8000b9a:	430b      	orrs	r3, r1
 8000b9c:	469a      	mov	sl, r3
 8000b9e:	e78e      	b.n	8000abe <__aeabi_dadd+0x1e2>
 8000ba0:	003c      	movs	r4, r7
 8000ba2:	2500      	movs	r5, #0
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	e731      	b.n	8000a0c <__aeabi_dadd+0x130>
 8000ba8:	2307      	movs	r3, #7
 8000baa:	402b      	ands	r3, r5
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d000      	beq.n	8000bb2 <__aeabi_dadd+0x2d6>
 8000bb0:	e710      	b.n	80009d4 <__aeabi_dadd+0xf8>
 8000bb2:	e093      	b.n	8000cdc <__aeabi_dadd+0x400>
 8000bb4:	2a00      	cmp	r2, #0
 8000bb6:	d074      	beq.n	8000ca2 <__aeabi_dadd+0x3c6>
 8000bb8:	464a      	mov	r2, r9
 8000bba:	1bd2      	subs	r2, r2, r7
 8000bbc:	2f00      	cmp	r7, #0
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_dadd+0x2e6>
 8000bc0:	e0c7      	b.n	8000d52 <__aeabi_dadd+0x476>
 8000bc2:	4928      	ldr	r1, [pc, #160]	@ (8000c64 <__aeabi_dadd+0x388>)
 8000bc4:	4589      	cmp	r9, r1
 8000bc6:	d100      	bne.n	8000bca <__aeabi_dadd+0x2ee>
 8000bc8:	e185      	b.n	8000ed6 <__aeabi_dadd+0x5fa>
 8000bca:	2501      	movs	r5, #1
 8000bcc:	2a38      	cmp	r2, #56	@ 0x38
 8000bce:	dc12      	bgt.n	8000bf6 <__aeabi_dadd+0x31a>
 8000bd0:	2180      	movs	r1, #128	@ 0x80
 8000bd2:	0409      	lsls	r1, r1, #16
 8000bd4:	430c      	orrs	r4, r1
 8000bd6:	2a1f      	cmp	r2, #31
 8000bd8:	dd00      	ble.n	8000bdc <__aeabi_dadd+0x300>
 8000bda:	e1ab      	b.n	8000f34 <__aeabi_dadd+0x658>
 8000bdc:	2120      	movs	r1, #32
 8000bde:	0025      	movs	r5, r4
 8000be0:	1a89      	subs	r1, r1, r2
 8000be2:	0007      	movs	r7, r0
 8000be4:	4088      	lsls	r0, r1
 8000be6:	408d      	lsls	r5, r1
 8000be8:	40d7      	lsrs	r7, r2
 8000bea:	1e41      	subs	r1, r0, #1
 8000bec:	4188      	sbcs	r0, r1
 8000bee:	40d4      	lsrs	r4, r2
 8000bf0:	433d      	orrs	r5, r7
 8000bf2:	4305      	orrs	r5, r0
 8000bf4:	44a2      	add	sl, r4
 8000bf6:	4465      	add	r5, ip
 8000bf8:	4565      	cmp	r5, ip
 8000bfa:	4192      	sbcs	r2, r2
 8000bfc:	4252      	negs	r2, r2
 8000bfe:	4452      	add	r2, sl
 8000c00:	0014      	movs	r4, r2
 8000c02:	464f      	mov	r7, r9
 8000c04:	e774      	b.n	8000af0 <__aeabi_dadd+0x214>
 8000c06:	0028      	movs	r0, r5
 8000c08:	f001 fd6c 	bl	80026e4 <__clzsi2>
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	3318      	adds	r3, #24
 8000c10:	2b1f      	cmp	r3, #31
 8000c12:	dc00      	bgt.n	8000c16 <__aeabi_dadd+0x33a>
 8000c14:	e6c2      	b.n	800099c <__aeabi_dadd+0xc0>
 8000c16:	002a      	movs	r2, r5
 8000c18:	3808      	subs	r0, #8
 8000c1a:	4082      	lsls	r2, r0
 8000c1c:	429f      	cmp	r7, r3
 8000c1e:	dd00      	ble.n	8000c22 <__aeabi_dadd+0x346>
 8000c20:	e0a9      	b.n	8000d76 <__aeabi_dadd+0x49a>
 8000c22:	1bdb      	subs	r3, r3, r7
 8000c24:	1c58      	adds	r0, r3, #1
 8000c26:	281f      	cmp	r0, #31
 8000c28:	dc00      	bgt.n	8000c2c <__aeabi_dadd+0x350>
 8000c2a:	e1ac      	b.n	8000f86 <__aeabi_dadd+0x6aa>
 8000c2c:	0015      	movs	r5, r2
 8000c2e:	3b1f      	subs	r3, #31
 8000c30:	40dd      	lsrs	r5, r3
 8000c32:	2820      	cmp	r0, #32
 8000c34:	d005      	beq.n	8000c42 <__aeabi_dadd+0x366>
 8000c36:	2340      	movs	r3, #64	@ 0x40
 8000c38:	1a1b      	subs	r3, r3, r0
 8000c3a:	409a      	lsls	r2, r3
 8000c3c:	1e53      	subs	r3, r2, #1
 8000c3e:	419a      	sbcs	r2, r3
 8000c40:	4315      	orrs	r5, r2
 8000c42:	2307      	movs	r3, #7
 8000c44:	2700      	movs	r7, #0
 8000c46:	402b      	ands	r3, r5
 8000c48:	e7b0      	b.n	8000bac <__aeabi_dadd+0x2d0>
 8000c4a:	08ed      	lsrs	r5, r5, #3
 8000c4c:	4b05      	ldr	r3, [pc, #20]	@ (8000c64 <__aeabi_dadd+0x388>)
 8000c4e:	0762      	lsls	r2, r4, #29
 8000c50:	432a      	orrs	r2, r5
 8000c52:	08e4      	lsrs	r4, r4, #3
 8000c54:	429f      	cmp	r7, r3
 8000c56:	d00f      	beq.n	8000c78 <__aeabi_dadd+0x39c>
 8000c58:	0324      	lsls	r4, r4, #12
 8000c5a:	0b25      	lsrs	r5, r4, #12
 8000c5c:	057c      	lsls	r4, r7, #21
 8000c5e:	0d64      	lsrs	r4, r4, #21
 8000c60:	e6d4      	b.n	8000a0c <__aeabi_dadd+0x130>
 8000c62:	46c0      	nop			@ (mov r8, r8)
 8000c64:	000007ff 	.word	0x000007ff
 8000c68:	ff7fffff 	.word	0xff7fffff
 8000c6c:	000007fe 	.word	0x000007fe
 8000c70:	08c0      	lsrs	r0, r0, #3
 8000c72:	0762      	lsls	r2, r4, #29
 8000c74:	4302      	orrs	r2, r0
 8000c76:	08e4      	lsrs	r4, r4, #3
 8000c78:	0013      	movs	r3, r2
 8000c7a:	4323      	orrs	r3, r4
 8000c7c:	d100      	bne.n	8000c80 <__aeabi_dadd+0x3a4>
 8000c7e:	e186      	b.n	8000f8e <__aeabi_dadd+0x6b2>
 8000c80:	2580      	movs	r5, #128	@ 0x80
 8000c82:	032d      	lsls	r5, r5, #12
 8000c84:	4325      	orrs	r5, r4
 8000c86:	032d      	lsls	r5, r5, #12
 8000c88:	4cc3      	ldr	r4, [pc, #780]	@ (8000f98 <__aeabi_dadd+0x6bc>)
 8000c8a:	0b2d      	lsrs	r5, r5, #12
 8000c8c:	e6be      	b.n	8000a0c <__aeabi_dadd+0x130>
 8000c8e:	4660      	mov	r0, ip
 8000c90:	4654      	mov	r4, sl
 8000c92:	000e      	movs	r6, r1
 8000c94:	0017      	movs	r7, r2
 8000c96:	08c5      	lsrs	r5, r0, #3
 8000c98:	e7d8      	b.n	8000c4c <__aeabi_dadd+0x370>
 8000c9a:	4cc0      	ldr	r4, [pc, #768]	@ (8000f9c <__aeabi_dadd+0x6c0>)
 8000c9c:	1aff      	subs	r7, r7, r3
 8000c9e:	4014      	ands	r4, r2
 8000ca0:	e696      	b.n	80009d0 <__aeabi_dadd+0xf4>
 8000ca2:	4abf      	ldr	r2, [pc, #764]	@ (8000fa0 <__aeabi_dadd+0x6c4>)
 8000ca4:	1c79      	adds	r1, r7, #1
 8000ca6:	4211      	tst	r1, r2
 8000ca8:	d16b      	bne.n	8000d82 <__aeabi_dadd+0x4a6>
 8000caa:	0022      	movs	r2, r4
 8000cac:	4302      	orrs	r2, r0
 8000cae:	2f00      	cmp	r7, #0
 8000cb0:	d000      	beq.n	8000cb4 <__aeabi_dadd+0x3d8>
 8000cb2:	e0db      	b.n	8000e6c <__aeabi_dadd+0x590>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	d100      	bne.n	8000cba <__aeabi_dadd+0x3de>
 8000cb8:	e12d      	b.n	8000f16 <__aeabi_dadd+0x63a>
 8000cba:	4662      	mov	r2, ip
 8000cbc:	4653      	mov	r3, sl
 8000cbe:	431a      	orrs	r2, r3
 8000cc0:	d100      	bne.n	8000cc4 <__aeabi_dadd+0x3e8>
 8000cc2:	e0b6      	b.n	8000e32 <__aeabi_dadd+0x556>
 8000cc4:	4663      	mov	r3, ip
 8000cc6:	18c5      	adds	r5, r0, r3
 8000cc8:	4285      	cmp	r5, r0
 8000cca:	4180      	sbcs	r0, r0
 8000ccc:	4454      	add	r4, sl
 8000cce:	4240      	negs	r0, r0
 8000cd0:	1824      	adds	r4, r4, r0
 8000cd2:	0223      	lsls	r3, r4, #8
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_dadd+0x400>
 8000cd6:	000f      	movs	r7, r1
 8000cd8:	4bb0      	ldr	r3, [pc, #704]	@ (8000f9c <__aeabi_dadd+0x6c0>)
 8000cda:	401c      	ands	r4, r3
 8000cdc:	003a      	movs	r2, r7
 8000cde:	0028      	movs	r0, r5
 8000ce0:	e7d8      	b.n	8000c94 <__aeabi_dadd+0x3b8>
 8000ce2:	4662      	mov	r2, ip
 8000ce4:	1a85      	subs	r5, r0, r2
 8000ce6:	42a8      	cmp	r0, r5
 8000ce8:	4192      	sbcs	r2, r2
 8000cea:	4653      	mov	r3, sl
 8000cec:	4252      	negs	r2, r2
 8000cee:	4691      	mov	r9, r2
 8000cf0:	1ae3      	subs	r3, r4, r3
 8000cf2:	001a      	movs	r2, r3
 8000cf4:	464b      	mov	r3, r9
 8000cf6:	1ad2      	subs	r2, r2, r3
 8000cf8:	0013      	movs	r3, r2
 8000cfa:	4691      	mov	r9, r2
 8000cfc:	021a      	lsls	r2, r3, #8
 8000cfe:	d454      	bmi.n	8000daa <__aeabi_dadd+0x4ce>
 8000d00:	464a      	mov	r2, r9
 8000d02:	464c      	mov	r4, r9
 8000d04:	432a      	orrs	r2, r5
 8000d06:	d000      	beq.n	8000d0a <__aeabi_dadd+0x42e>
 8000d08:	e640      	b.n	800098c <__aeabi_dadd+0xb0>
 8000d0a:	2600      	movs	r6, #0
 8000d0c:	2400      	movs	r4, #0
 8000d0e:	2500      	movs	r5, #0
 8000d10:	e67c      	b.n	8000a0c <__aeabi_dadd+0x130>
 8000d12:	4da1      	ldr	r5, [pc, #644]	@ (8000f98 <__aeabi_dadd+0x6bc>)
 8000d14:	45a9      	cmp	r9, r5
 8000d16:	d100      	bne.n	8000d1a <__aeabi_dadd+0x43e>
 8000d18:	e090      	b.n	8000e3c <__aeabi_dadd+0x560>
 8000d1a:	2501      	movs	r5, #1
 8000d1c:	2a38      	cmp	r2, #56	@ 0x38
 8000d1e:	dd00      	ble.n	8000d22 <__aeabi_dadd+0x446>
 8000d20:	e6ab      	b.n	8000a7a <__aeabi_dadd+0x19e>
 8000d22:	2580      	movs	r5, #128	@ 0x80
 8000d24:	042d      	lsls	r5, r5, #16
 8000d26:	432c      	orrs	r4, r5
 8000d28:	e695      	b.n	8000a56 <__aeabi_dadd+0x17a>
 8000d2a:	0011      	movs	r1, r2
 8000d2c:	4655      	mov	r5, sl
 8000d2e:	3920      	subs	r1, #32
 8000d30:	40cd      	lsrs	r5, r1
 8000d32:	46a9      	mov	r9, r5
 8000d34:	2a20      	cmp	r2, #32
 8000d36:	d006      	beq.n	8000d46 <__aeabi_dadd+0x46a>
 8000d38:	2140      	movs	r1, #64	@ 0x40
 8000d3a:	4653      	mov	r3, sl
 8000d3c:	1a8a      	subs	r2, r1, r2
 8000d3e:	4093      	lsls	r3, r2
 8000d40:	4662      	mov	r2, ip
 8000d42:	431a      	orrs	r2, r3
 8000d44:	4694      	mov	ip, r2
 8000d46:	4665      	mov	r5, ip
 8000d48:	1e6b      	subs	r3, r5, #1
 8000d4a:	419d      	sbcs	r5, r3
 8000d4c:	464b      	mov	r3, r9
 8000d4e:	431d      	orrs	r5, r3
 8000d50:	e612      	b.n	8000978 <__aeabi_dadd+0x9c>
 8000d52:	0021      	movs	r1, r4
 8000d54:	4301      	orrs	r1, r0
 8000d56:	d100      	bne.n	8000d5a <__aeabi_dadd+0x47e>
 8000d58:	e0c4      	b.n	8000ee4 <__aeabi_dadd+0x608>
 8000d5a:	1e51      	subs	r1, r2, #1
 8000d5c:	2a01      	cmp	r2, #1
 8000d5e:	d100      	bne.n	8000d62 <__aeabi_dadd+0x486>
 8000d60:	e0fb      	b.n	8000f5a <__aeabi_dadd+0x67e>
 8000d62:	4d8d      	ldr	r5, [pc, #564]	@ (8000f98 <__aeabi_dadd+0x6bc>)
 8000d64:	42aa      	cmp	r2, r5
 8000d66:	d100      	bne.n	8000d6a <__aeabi_dadd+0x48e>
 8000d68:	e0b5      	b.n	8000ed6 <__aeabi_dadd+0x5fa>
 8000d6a:	2501      	movs	r5, #1
 8000d6c:	2938      	cmp	r1, #56	@ 0x38
 8000d6e:	dd00      	ble.n	8000d72 <__aeabi_dadd+0x496>
 8000d70:	e741      	b.n	8000bf6 <__aeabi_dadd+0x31a>
 8000d72:	000a      	movs	r2, r1
 8000d74:	e72f      	b.n	8000bd6 <__aeabi_dadd+0x2fa>
 8000d76:	4c89      	ldr	r4, [pc, #548]	@ (8000f9c <__aeabi_dadd+0x6c0>)
 8000d78:	1aff      	subs	r7, r7, r3
 8000d7a:	4014      	ands	r4, r2
 8000d7c:	0762      	lsls	r2, r4, #29
 8000d7e:	08e4      	lsrs	r4, r4, #3
 8000d80:	e76a      	b.n	8000c58 <__aeabi_dadd+0x37c>
 8000d82:	4a85      	ldr	r2, [pc, #532]	@ (8000f98 <__aeabi_dadd+0x6bc>)
 8000d84:	4291      	cmp	r1, r2
 8000d86:	d100      	bne.n	8000d8a <__aeabi_dadd+0x4ae>
 8000d88:	e0e3      	b.n	8000f52 <__aeabi_dadd+0x676>
 8000d8a:	4663      	mov	r3, ip
 8000d8c:	18c2      	adds	r2, r0, r3
 8000d8e:	4282      	cmp	r2, r0
 8000d90:	4180      	sbcs	r0, r0
 8000d92:	0023      	movs	r3, r4
 8000d94:	4240      	negs	r0, r0
 8000d96:	4453      	add	r3, sl
 8000d98:	181b      	adds	r3, r3, r0
 8000d9a:	07dd      	lsls	r5, r3, #31
 8000d9c:	085c      	lsrs	r4, r3, #1
 8000d9e:	2307      	movs	r3, #7
 8000da0:	0852      	lsrs	r2, r2, #1
 8000da2:	4315      	orrs	r5, r2
 8000da4:	000f      	movs	r7, r1
 8000da6:	402b      	ands	r3, r5
 8000da8:	e700      	b.n	8000bac <__aeabi_dadd+0x2d0>
 8000daa:	4663      	mov	r3, ip
 8000dac:	1a1d      	subs	r5, r3, r0
 8000dae:	45ac      	cmp	ip, r5
 8000db0:	4192      	sbcs	r2, r2
 8000db2:	4653      	mov	r3, sl
 8000db4:	4252      	negs	r2, r2
 8000db6:	1b1c      	subs	r4, r3, r4
 8000db8:	000e      	movs	r6, r1
 8000dba:	4688      	mov	r8, r1
 8000dbc:	1aa4      	subs	r4, r4, r2
 8000dbe:	e5e5      	b.n	800098c <__aeabi_dadd+0xb0>
 8000dc0:	2d00      	cmp	r5, #0
 8000dc2:	d000      	beq.n	8000dc6 <__aeabi_dadd+0x4ea>
 8000dc4:	e091      	b.n	8000eea <__aeabi_dadd+0x60e>
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	d138      	bne.n	8000e3c <__aeabi_dadd+0x560>
 8000dca:	2480      	movs	r4, #128	@ 0x80
 8000dcc:	2600      	movs	r6, #0
 8000dce:	0324      	lsls	r4, r4, #12
 8000dd0:	e756      	b.n	8000c80 <__aeabi_dadd+0x3a4>
 8000dd2:	4663      	mov	r3, ip
 8000dd4:	18c5      	adds	r5, r0, r3
 8000dd6:	4285      	cmp	r5, r0
 8000dd8:	4180      	sbcs	r0, r0
 8000dda:	4454      	add	r4, sl
 8000ddc:	4240      	negs	r0, r0
 8000dde:	1824      	adds	r4, r4, r0
 8000de0:	2701      	movs	r7, #1
 8000de2:	0223      	lsls	r3, r4, #8
 8000de4:	d400      	bmi.n	8000de8 <__aeabi_dadd+0x50c>
 8000de6:	e6df      	b.n	8000ba8 <__aeabi_dadd+0x2cc>
 8000de8:	2702      	movs	r7, #2
 8000dea:	e687      	b.n	8000afc <__aeabi_dadd+0x220>
 8000dec:	4663      	mov	r3, ip
 8000dee:	1ac5      	subs	r5, r0, r3
 8000df0:	42a8      	cmp	r0, r5
 8000df2:	4180      	sbcs	r0, r0
 8000df4:	4653      	mov	r3, sl
 8000df6:	4240      	negs	r0, r0
 8000df8:	1ae4      	subs	r4, r4, r3
 8000dfa:	2701      	movs	r7, #1
 8000dfc:	1a24      	subs	r4, r4, r0
 8000dfe:	e5c0      	b.n	8000982 <__aeabi_dadd+0xa6>
 8000e00:	0762      	lsls	r2, r4, #29
 8000e02:	08c0      	lsrs	r0, r0, #3
 8000e04:	4302      	orrs	r2, r0
 8000e06:	08e4      	lsrs	r4, r4, #3
 8000e08:	e736      	b.n	8000c78 <__aeabi_dadd+0x39c>
 8000e0a:	0011      	movs	r1, r2
 8000e0c:	4653      	mov	r3, sl
 8000e0e:	3920      	subs	r1, #32
 8000e10:	40cb      	lsrs	r3, r1
 8000e12:	4699      	mov	r9, r3
 8000e14:	2a20      	cmp	r2, #32
 8000e16:	d006      	beq.n	8000e26 <__aeabi_dadd+0x54a>
 8000e18:	2140      	movs	r1, #64	@ 0x40
 8000e1a:	4653      	mov	r3, sl
 8000e1c:	1a8a      	subs	r2, r1, r2
 8000e1e:	4093      	lsls	r3, r2
 8000e20:	4662      	mov	r2, ip
 8000e22:	431a      	orrs	r2, r3
 8000e24:	4694      	mov	ip, r2
 8000e26:	4665      	mov	r5, ip
 8000e28:	1e6b      	subs	r3, r5, #1
 8000e2a:	419d      	sbcs	r5, r3
 8000e2c:	464b      	mov	r3, r9
 8000e2e:	431d      	orrs	r5, r3
 8000e30:	e659      	b.n	8000ae6 <__aeabi_dadd+0x20a>
 8000e32:	0762      	lsls	r2, r4, #29
 8000e34:	08c0      	lsrs	r0, r0, #3
 8000e36:	4302      	orrs	r2, r0
 8000e38:	08e4      	lsrs	r4, r4, #3
 8000e3a:	e70d      	b.n	8000c58 <__aeabi_dadd+0x37c>
 8000e3c:	4653      	mov	r3, sl
 8000e3e:	075a      	lsls	r2, r3, #29
 8000e40:	4663      	mov	r3, ip
 8000e42:	08d8      	lsrs	r0, r3, #3
 8000e44:	4653      	mov	r3, sl
 8000e46:	000e      	movs	r6, r1
 8000e48:	4302      	orrs	r2, r0
 8000e4a:	08dc      	lsrs	r4, r3, #3
 8000e4c:	e714      	b.n	8000c78 <__aeabi_dadd+0x39c>
 8000e4e:	0015      	movs	r5, r2
 8000e50:	0026      	movs	r6, r4
 8000e52:	3d20      	subs	r5, #32
 8000e54:	40ee      	lsrs	r6, r5
 8000e56:	2a20      	cmp	r2, #32
 8000e58:	d003      	beq.n	8000e62 <__aeabi_dadd+0x586>
 8000e5a:	2540      	movs	r5, #64	@ 0x40
 8000e5c:	1aaa      	subs	r2, r5, r2
 8000e5e:	4094      	lsls	r4, r2
 8000e60:	4320      	orrs	r0, r4
 8000e62:	1e42      	subs	r2, r0, #1
 8000e64:	4190      	sbcs	r0, r2
 8000e66:	0005      	movs	r5, r0
 8000e68:	4335      	orrs	r5, r6
 8000e6a:	e606      	b.n	8000a7a <__aeabi_dadd+0x19e>
 8000e6c:	2a00      	cmp	r2, #0
 8000e6e:	d07c      	beq.n	8000f6a <__aeabi_dadd+0x68e>
 8000e70:	4662      	mov	r2, ip
 8000e72:	4653      	mov	r3, sl
 8000e74:	08c0      	lsrs	r0, r0, #3
 8000e76:	431a      	orrs	r2, r3
 8000e78:	d100      	bne.n	8000e7c <__aeabi_dadd+0x5a0>
 8000e7a:	e6fa      	b.n	8000c72 <__aeabi_dadd+0x396>
 8000e7c:	0762      	lsls	r2, r4, #29
 8000e7e:	4310      	orrs	r0, r2
 8000e80:	2280      	movs	r2, #128	@ 0x80
 8000e82:	08e4      	lsrs	r4, r4, #3
 8000e84:	0312      	lsls	r2, r2, #12
 8000e86:	4214      	tst	r4, r2
 8000e88:	d008      	beq.n	8000e9c <__aeabi_dadd+0x5c0>
 8000e8a:	08d9      	lsrs	r1, r3, #3
 8000e8c:	4211      	tst	r1, r2
 8000e8e:	d105      	bne.n	8000e9c <__aeabi_dadd+0x5c0>
 8000e90:	4663      	mov	r3, ip
 8000e92:	08d8      	lsrs	r0, r3, #3
 8000e94:	4653      	mov	r3, sl
 8000e96:	000c      	movs	r4, r1
 8000e98:	075b      	lsls	r3, r3, #29
 8000e9a:	4318      	orrs	r0, r3
 8000e9c:	0f42      	lsrs	r2, r0, #29
 8000e9e:	00c0      	lsls	r0, r0, #3
 8000ea0:	08c0      	lsrs	r0, r0, #3
 8000ea2:	0752      	lsls	r2, r2, #29
 8000ea4:	4302      	orrs	r2, r0
 8000ea6:	e6e7      	b.n	8000c78 <__aeabi_dadd+0x39c>
 8000ea8:	2a00      	cmp	r2, #0
 8000eaa:	d100      	bne.n	8000eae <__aeabi_dadd+0x5d2>
 8000eac:	e72d      	b.n	8000d0a <__aeabi_dadd+0x42e>
 8000eae:	4663      	mov	r3, ip
 8000eb0:	08d8      	lsrs	r0, r3, #3
 8000eb2:	4653      	mov	r3, sl
 8000eb4:	075a      	lsls	r2, r3, #29
 8000eb6:	000e      	movs	r6, r1
 8000eb8:	4302      	orrs	r2, r0
 8000eba:	08dc      	lsrs	r4, r3, #3
 8000ebc:	e6cc      	b.n	8000c58 <__aeabi_dadd+0x37c>
 8000ebe:	4663      	mov	r3, ip
 8000ec0:	1a1d      	subs	r5, r3, r0
 8000ec2:	45ac      	cmp	ip, r5
 8000ec4:	4192      	sbcs	r2, r2
 8000ec6:	4653      	mov	r3, sl
 8000ec8:	4252      	negs	r2, r2
 8000eca:	1b1c      	subs	r4, r3, r4
 8000ecc:	000e      	movs	r6, r1
 8000ece:	4688      	mov	r8, r1
 8000ed0:	1aa4      	subs	r4, r4, r2
 8000ed2:	3701      	adds	r7, #1
 8000ed4:	e555      	b.n	8000982 <__aeabi_dadd+0xa6>
 8000ed6:	4663      	mov	r3, ip
 8000ed8:	08d9      	lsrs	r1, r3, #3
 8000eda:	4653      	mov	r3, sl
 8000edc:	075a      	lsls	r2, r3, #29
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	08dc      	lsrs	r4, r3, #3
 8000ee2:	e6c9      	b.n	8000c78 <__aeabi_dadd+0x39c>
 8000ee4:	4660      	mov	r0, ip
 8000ee6:	4654      	mov	r4, sl
 8000ee8:	e6d4      	b.n	8000c94 <__aeabi_dadd+0x3b8>
 8000eea:	08c0      	lsrs	r0, r0, #3
 8000eec:	2a00      	cmp	r2, #0
 8000eee:	d100      	bne.n	8000ef2 <__aeabi_dadd+0x616>
 8000ef0:	e6bf      	b.n	8000c72 <__aeabi_dadd+0x396>
 8000ef2:	0762      	lsls	r2, r4, #29
 8000ef4:	4310      	orrs	r0, r2
 8000ef6:	2280      	movs	r2, #128	@ 0x80
 8000ef8:	08e4      	lsrs	r4, r4, #3
 8000efa:	0312      	lsls	r2, r2, #12
 8000efc:	4214      	tst	r4, r2
 8000efe:	d0cd      	beq.n	8000e9c <__aeabi_dadd+0x5c0>
 8000f00:	08dd      	lsrs	r5, r3, #3
 8000f02:	4215      	tst	r5, r2
 8000f04:	d1ca      	bne.n	8000e9c <__aeabi_dadd+0x5c0>
 8000f06:	4663      	mov	r3, ip
 8000f08:	08d8      	lsrs	r0, r3, #3
 8000f0a:	4653      	mov	r3, sl
 8000f0c:	075b      	lsls	r3, r3, #29
 8000f0e:	000e      	movs	r6, r1
 8000f10:	002c      	movs	r4, r5
 8000f12:	4318      	orrs	r0, r3
 8000f14:	e7c2      	b.n	8000e9c <__aeabi_dadd+0x5c0>
 8000f16:	4663      	mov	r3, ip
 8000f18:	08d9      	lsrs	r1, r3, #3
 8000f1a:	4653      	mov	r3, sl
 8000f1c:	075a      	lsls	r2, r3, #29
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	08dc      	lsrs	r4, r3, #3
 8000f22:	e699      	b.n	8000c58 <__aeabi_dadd+0x37c>
 8000f24:	4663      	mov	r3, ip
 8000f26:	08d8      	lsrs	r0, r3, #3
 8000f28:	4653      	mov	r3, sl
 8000f2a:	075a      	lsls	r2, r3, #29
 8000f2c:	000e      	movs	r6, r1
 8000f2e:	4302      	orrs	r2, r0
 8000f30:	08dc      	lsrs	r4, r3, #3
 8000f32:	e6a1      	b.n	8000c78 <__aeabi_dadd+0x39c>
 8000f34:	0011      	movs	r1, r2
 8000f36:	0027      	movs	r7, r4
 8000f38:	3920      	subs	r1, #32
 8000f3a:	40cf      	lsrs	r7, r1
 8000f3c:	2a20      	cmp	r2, #32
 8000f3e:	d003      	beq.n	8000f48 <__aeabi_dadd+0x66c>
 8000f40:	2140      	movs	r1, #64	@ 0x40
 8000f42:	1a8a      	subs	r2, r1, r2
 8000f44:	4094      	lsls	r4, r2
 8000f46:	4320      	orrs	r0, r4
 8000f48:	1e42      	subs	r2, r0, #1
 8000f4a:	4190      	sbcs	r0, r2
 8000f4c:	0005      	movs	r5, r0
 8000f4e:	433d      	orrs	r5, r7
 8000f50:	e651      	b.n	8000bf6 <__aeabi_dadd+0x31a>
 8000f52:	000c      	movs	r4, r1
 8000f54:	2500      	movs	r5, #0
 8000f56:	2200      	movs	r2, #0
 8000f58:	e558      	b.n	8000a0c <__aeabi_dadd+0x130>
 8000f5a:	4460      	add	r0, ip
 8000f5c:	4560      	cmp	r0, ip
 8000f5e:	4192      	sbcs	r2, r2
 8000f60:	4454      	add	r4, sl
 8000f62:	4252      	negs	r2, r2
 8000f64:	0005      	movs	r5, r0
 8000f66:	18a4      	adds	r4, r4, r2
 8000f68:	e73a      	b.n	8000de0 <__aeabi_dadd+0x504>
 8000f6a:	4653      	mov	r3, sl
 8000f6c:	075a      	lsls	r2, r3, #29
 8000f6e:	4663      	mov	r3, ip
 8000f70:	08d9      	lsrs	r1, r3, #3
 8000f72:	4653      	mov	r3, sl
 8000f74:	430a      	orrs	r2, r1
 8000f76:	08dc      	lsrs	r4, r3, #3
 8000f78:	e67e      	b.n	8000c78 <__aeabi_dadd+0x39c>
 8000f7a:	001a      	movs	r2, r3
 8000f7c:	001c      	movs	r4, r3
 8000f7e:	432a      	orrs	r2, r5
 8000f80:	d000      	beq.n	8000f84 <__aeabi_dadd+0x6a8>
 8000f82:	e6ab      	b.n	8000cdc <__aeabi_dadd+0x400>
 8000f84:	e6c1      	b.n	8000d0a <__aeabi_dadd+0x42e>
 8000f86:	2120      	movs	r1, #32
 8000f88:	2500      	movs	r5, #0
 8000f8a:	1a09      	subs	r1, r1, r0
 8000f8c:	e519      	b.n	80009c2 <__aeabi_dadd+0xe6>
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2500      	movs	r5, #0
 8000f92:	4c01      	ldr	r4, [pc, #4]	@ (8000f98 <__aeabi_dadd+0x6bc>)
 8000f94:	e53a      	b.n	8000a0c <__aeabi_dadd+0x130>
 8000f96:	46c0      	nop			@ (mov r8, r8)
 8000f98:	000007ff 	.word	0x000007ff
 8000f9c:	ff7fffff 	.word	0xff7fffff
 8000fa0:	000007fe 	.word	0x000007fe

08000fa4 <__aeabi_ddiv>:
 8000fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa6:	46de      	mov	lr, fp
 8000fa8:	4645      	mov	r5, r8
 8000faa:	4657      	mov	r7, sl
 8000fac:	464e      	mov	r6, r9
 8000fae:	b5e0      	push	{r5, r6, r7, lr}
 8000fb0:	b087      	sub	sp, #28
 8000fb2:	9200      	str	r2, [sp, #0]
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	030b      	lsls	r3, r1, #12
 8000fb8:	0b1b      	lsrs	r3, r3, #12
 8000fba:	469b      	mov	fp, r3
 8000fbc:	0fca      	lsrs	r2, r1, #31
 8000fbe:	004b      	lsls	r3, r1, #1
 8000fc0:	0004      	movs	r4, r0
 8000fc2:	4680      	mov	r8, r0
 8000fc4:	0d5b      	lsrs	r3, r3, #21
 8000fc6:	9202      	str	r2, [sp, #8]
 8000fc8:	d100      	bne.n	8000fcc <__aeabi_ddiv+0x28>
 8000fca:	e16a      	b.n	80012a2 <__aeabi_ddiv+0x2fe>
 8000fcc:	4ad4      	ldr	r2, [pc, #848]	@ (8001320 <__aeabi_ddiv+0x37c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d100      	bne.n	8000fd4 <__aeabi_ddiv+0x30>
 8000fd2:	e18c      	b.n	80012ee <__aeabi_ddiv+0x34a>
 8000fd4:	4659      	mov	r1, fp
 8000fd6:	0f42      	lsrs	r2, r0, #29
 8000fd8:	00c9      	lsls	r1, r1, #3
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	2180      	movs	r1, #128	@ 0x80
 8000fde:	0409      	lsls	r1, r1, #16
 8000fe0:	4311      	orrs	r1, r2
 8000fe2:	00c2      	lsls	r2, r0, #3
 8000fe4:	4690      	mov	r8, r2
 8000fe6:	4acf      	ldr	r2, [pc, #828]	@ (8001324 <__aeabi_ddiv+0x380>)
 8000fe8:	4689      	mov	r9, r1
 8000fea:	4692      	mov	sl, r2
 8000fec:	449a      	add	sl, r3
 8000fee:	2300      	movs	r3, #0
 8000ff0:	2400      	movs	r4, #0
 8000ff2:	9303      	str	r3, [sp, #12]
 8000ff4:	9e00      	ldr	r6, [sp, #0]
 8000ff6:	9f01      	ldr	r7, [sp, #4]
 8000ff8:	033b      	lsls	r3, r7, #12
 8000ffa:	0b1b      	lsrs	r3, r3, #12
 8000ffc:	469b      	mov	fp, r3
 8000ffe:	007b      	lsls	r3, r7, #1
 8001000:	0030      	movs	r0, r6
 8001002:	0d5b      	lsrs	r3, r3, #21
 8001004:	0ffd      	lsrs	r5, r7, #31
 8001006:	2b00      	cmp	r3, #0
 8001008:	d100      	bne.n	800100c <__aeabi_ddiv+0x68>
 800100a:	e128      	b.n	800125e <__aeabi_ddiv+0x2ba>
 800100c:	4ac4      	ldr	r2, [pc, #784]	@ (8001320 <__aeabi_ddiv+0x37c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d100      	bne.n	8001014 <__aeabi_ddiv+0x70>
 8001012:	e177      	b.n	8001304 <__aeabi_ddiv+0x360>
 8001014:	4659      	mov	r1, fp
 8001016:	0f72      	lsrs	r2, r6, #29
 8001018:	00c9      	lsls	r1, r1, #3
 800101a:	430a      	orrs	r2, r1
 800101c:	2180      	movs	r1, #128	@ 0x80
 800101e:	0409      	lsls	r1, r1, #16
 8001020:	4311      	orrs	r1, r2
 8001022:	468b      	mov	fp, r1
 8001024:	49bf      	ldr	r1, [pc, #764]	@ (8001324 <__aeabi_ddiv+0x380>)
 8001026:	00f2      	lsls	r2, r6, #3
 8001028:	468c      	mov	ip, r1
 800102a:	4651      	mov	r1, sl
 800102c:	4463      	add	r3, ip
 800102e:	1acb      	subs	r3, r1, r3
 8001030:	469a      	mov	sl, r3
 8001032:	2300      	movs	r3, #0
 8001034:	9e02      	ldr	r6, [sp, #8]
 8001036:	406e      	eors	r6, r5
 8001038:	2c0f      	cmp	r4, #15
 800103a:	d827      	bhi.n	800108c <__aeabi_ddiv+0xe8>
 800103c:	49ba      	ldr	r1, [pc, #744]	@ (8001328 <__aeabi_ddiv+0x384>)
 800103e:	00a4      	lsls	r4, r4, #2
 8001040:	5909      	ldr	r1, [r1, r4]
 8001042:	468f      	mov	pc, r1
 8001044:	46cb      	mov	fp, r9
 8001046:	4642      	mov	r2, r8
 8001048:	9e02      	ldr	r6, [sp, #8]
 800104a:	9b03      	ldr	r3, [sp, #12]
 800104c:	2b02      	cmp	r3, #2
 800104e:	d016      	beq.n	800107e <__aeabi_ddiv+0xda>
 8001050:	2b03      	cmp	r3, #3
 8001052:	d100      	bne.n	8001056 <__aeabi_ddiv+0xb2>
 8001054:	e2a6      	b.n	80015a4 <__aeabi_ddiv+0x600>
 8001056:	2b01      	cmp	r3, #1
 8001058:	d000      	beq.n	800105c <__aeabi_ddiv+0xb8>
 800105a:	e0df      	b.n	800121c <__aeabi_ddiv+0x278>
 800105c:	2200      	movs	r2, #0
 800105e:	2300      	movs	r3, #0
 8001060:	2400      	movs	r4, #0
 8001062:	4690      	mov	r8, r2
 8001064:	051b      	lsls	r3, r3, #20
 8001066:	4323      	orrs	r3, r4
 8001068:	07f6      	lsls	r6, r6, #31
 800106a:	4333      	orrs	r3, r6
 800106c:	4640      	mov	r0, r8
 800106e:	0019      	movs	r1, r3
 8001070:	b007      	add	sp, #28
 8001072:	bcf0      	pop	{r4, r5, r6, r7}
 8001074:	46bb      	mov	fp, r7
 8001076:	46b2      	mov	sl, r6
 8001078:	46a9      	mov	r9, r5
 800107a:	46a0      	mov	r8, r4
 800107c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800107e:	2200      	movs	r2, #0
 8001080:	2400      	movs	r4, #0
 8001082:	4690      	mov	r8, r2
 8001084:	4ba6      	ldr	r3, [pc, #664]	@ (8001320 <__aeabi_ddiv+0x37c>)
 8001086:	e7ed      	b.n	8001064 <__aeabi_ddiv+0xc0>
 8001088:	002e      	movs	r6, r5
 800108a:	e7df      	b.n	800104c <__aeabi_ddiv+0xa8>
 800108c:	45cb      	cmp	fp, r9
 800108e:	d200      	bcs.n	8001092 <__aeabi_ddiv+0xee>
 8001090:	e1d4      	b.n	800143c <__aeabi_ddiv+0x498>
 8001092:	d100      	bne.n	8001096 <__aeabi_ddiv+0xf2>
 8001094:	e1cf      	b.n	8001436 <__aeabi_ddiv+0x492>
 8001096:	2301      	movs	r3, #1
 8001098:	425b      	negs	r3, r3
 800109a:	469c      	mov	ip, r3
 800109c:	4644      	mov	r4, r8
 800109e:	4648      	mov	r0, r9
 80010a0:	2700      	movs	r7, #0
 80010a2:	44e2      	add	sl, ip
 80010a4:	465b      	mov	r3, fp
 80010a6:	0e15      	lsrs	r5, r2, #24
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	431d      	orrs	r5, r3
 80010ac:	0c19      	lsrs	r1, r3, #16
 80010ae:	042b      	lsls	r3, r5, #16
 80010b0:	0212      	lsls	r2, r2, #8
 80010b2:	9500      	str	r5, [sp, #0]
 80010b4:	0c1d      	lsrs	r5, r3, #16
 80010b6:	4691      	mov	r9, r2
 80010b8:	9102      	str	r1, [sp, #8]
 80010ba:	9503      	str	r5, [sp, #12]
 80010bc:	f7ff f8c2 	bl	8000244 <__aeabi_uidivmod>
 80010c0:	0002      	movs	r2, r0
 80010c2:	436a      	muls	r2, r5
 80010c4:	040b      	lsls	r3, r1, #16
 80010c6:	0c21      	lsrs	r1, r4, #16
 80010c8:	4680      	mov	r8, r0
 80010ca:	4319      	orrs	r1, r3
 80010cc:	428a      	cmp	r2, r1
 80010ce:	d909      	bls.n	80010e4 <__aeabi_ddiv+0x140>
 80010d0:	9d00      	ldr	r5, [sp, #0]
 80010d2:	2301      	movs	r3, #1
 80010d4:	46ac      	mov	ip, r5
 80010d6:	425b      	negs	r3, r3
 80010d8:	4461      	add	r1, ip
 80010da:	469c      	mov	ip, r3
 80010dc:	44e0      	add	r8, ip
 80010de:	428d      	cmp	r5, r1
 80010e0:	d800      	bhi.n	80010e4 <__aeabi_ddiv+0x140>
 80010e2:	e1fb      	b.n	80014dc <__aeabi_ddiv+0x538>
 80010e4:	1a88      	subs	r0, r1, r2
 80010e6:	9902      	ldr	r1, [sp, #8]
 80010e8:	f7ff f8ac 	bl	8000244 <__aeabi_uidivmod>
 80010ec:	9a03      	ldr	r2, [sp, #12]
 80010ee:	0424      	lsls	r4, r4, #16
 80010f0:	4342      	muls	r2, r0
 80010f2:	0409      	lsls	r1, r1, #16
 80010f4:	0c24      	lsrs	r4, r4, #16
 80010f6:	0003      	movs	r3, r0
 80010f8:	430c      	orrs	r4, r1
 80010fa:	42a2      	cmp	r2, r4
 80010fc:	d906      	bls.n	800110c <__aeabi_ddiv+0x168>
 80010fe:	9900      	ldr	r1, [sp, #0]
 8001100:	3b01      	subs	r3, #1
 8001102:	468c      	mov	ip, r1
 8001104:	4464      	add	r4, ip
 8001106:	42a1      	cmp	r1, r4
 8001108:	d800      	bhi.n	800110c <__aeabi_ddiv+0x168>
 800110a:	e1e1      	b.n	80014d0 <__aeabi_ddiv+0x52c>
 800110c:	1aa0      	subs	r0, r4, r2
 800110e:	4642      	mov	r2, r8
 8001110:	0412      	lsls	r2, r2, #16
 8001112:	431a      	orrs	r2, r3
 8001114:	4693      	mov	fp, r2
 8001116:	464b      	mov	r3, r9
 8001118:	4659      	mov	r1, fp
 800111a:	0c1b      	lsrs	r3, r3, #16
 800111c:	001d      	movs	r5, r3
 800111e:	9304      	str	r3, [sp, #16]
 8001120:	040b      	lsls	r3, r1, #16
 8001122:	4649      	mov	r1, r9
 8001124:	0409      	lsls	r1, r1, #16
 8001126:	0c09      	lsrs	r1, r1, #16
 8001128:	000c      	movs	r4, r1
 800112a:	0c1b      	lsrs	r3, r3, #16
 800112c:	435c      	muls	r4, r3
 800112e:	0c12      	lsrs	r2, r2, #16
 8001130:	436b      	muls	r3, r5
 8001132:	4688      	mov	r8, r1
 8001134:	4351      	muls	r1, r2
 8001136:	436a      	muls	r2, r5
 8001138:	0c25      	lsrs	r5, r4, #16
 800113a:	46ac      	mov	ip, r5
 800113c:	185b      	adds	r3, r3, r1
 800113e:	4463      	add	r3, ip
 8001140:	4299      	cmp	r1, r3
 8001142:	d903      	bls.n	800114c <__aeabi_ddiv+0x1a8>
 8001144:	2180      	movs	r1, #128	@ 0x80
 8001146:	0249      	lsls	r1, r1, #9
 8001148:	468c      	mov	ip, r1
 800114a:	4462      	add	r2, ip
 800114c:	0c19      	lsrs	r1, r3, #16
 800114e:	0424      	lsls	r4, r4, #16
 8001150:	041b      	lsls	r3, r3, #16
 8001152:	0c24      	lsrs	r4, r4, #16
 8001154:	188a      	adds	r2, r1, r2
 8001156:	191c      	adds	r4, r3, r4
 8001158:	4290      	cmp	r0, r2
 800115a:	d302      	bcc.n	8001162 <__aeabi_ddiv+0x1be>
 800115c:	d116      	bne.n	800118c <__aeabi_ddiv+0x1e8>
 800115e:	42a7      	cmp	r7, r4
 8001160:	d214      	bcs.n	800118c <__aeabi_ddiv+0x1e8>
 8001162:	465b      	mov	r3, fp
 8001164:	9d00      	ldr	r5, [sp, #0]
 8001166:	3b01      	subs	r3, #1
 8001168:	444f      	add	r7, r9
 800116a:	9305      	str	r3, [sp, #20]
 800116c:	454f      	cmp	r7, r9
 800116e:	419b      	sbcs	r3, r3
 8001170:	46ac      	mov	ip, r5
 8001172:	425b      	negs	r3, r3
 8001174:	4463      	add	r3, ip
 8001176:	18c0      	adds	r0, r0, r3
 8001178:	4285      	cmp	r5, r0
 800117a:	d300      	bcc.n	800117e <__aeabi_ddiv+0x1da>
 800117c:	e1a1      	b.n	80014c2 <__aeabi_ddiv+0x51e>
 800117e:	4282      	cmp	r2, r0
 8001180:	d900      	bls.n	8001184 <__aeabi_ddiv+0x1e0>
 8001182:	e1f6      	b.n	8001572 <__aeabi_ddiv+0x5ce>
 8001184:	d100      	bne.n	8001188 <__aeabi_ddiv+0x1e4>
 8001186:	e1f1      	b.n	800156c <__aeabi_ddiv+0x5c8>
 8001188:	9b05      	ldr	r3, [sp, #20]
 800118a:	469b      	mov	fp, r3
 800118c:	1b3c      	subs	r4, r7, r4
 800118e:	42a7      	cmp	r7, r4
 8001190:	41bf      	sbcs	r7, r7
 8001192:	9d00      	ldr	r5, [sp, #0]
 8001194:	1a80      	subs	r0, r0, r2
 8001196:	427f      	negs	r7, r7
 8001198:	1bc0      	subs	r0, r0, r7
 800119a:	4285      	cmp	r5, r0
 800119c:	d100      	bne.n	80011a0 <__aeabi_ddiv+0x1fc>
 800119e:	e1d0      	b.n	8001542 <__aeabi_ddiv+0x59e>
 80011a0:	9902      	ldr	r1, [sp, #8]
 80011a2:	f7ff f84f 	bl	8000244 <__aeabi_uidivmod>
 80011a6:	9a03      	ldr	r2, [sp, #12]
 80011a8:	040b      	lsls	r3, r1, #16
 80011aa:	4342      	muls	r2, r0
 80011ac:	0c21      	lsrs	r1, r4, #16
 80011ae:	0007      	movs	r7, r0
 80011b0:	4319      	orrs	r1, r3
 80011b2:	428a      	cmp	r2, r1
 80011b4:	d900      	bls.n	80011b8 <__aeabi_ddiv+0x214>
 80011b6:	e178      	b.n	80014aa <__aeabi_ddiv+0x506>
 80011b8:	1a88      	subs	r0, r1, r2
 80011ba:	9902      	ldr	r1, [sp, #8]
 80011bc:	f7ff f842 	bl	8000244 <__aeabi_uidivmod>
 80011c0:	9a03      	ldr	r2, [sp, #12]
 80011c2:	0424      	lsls	r4, r4, #16
 80011c4:	4342      	muls	r2, r0
 80011c6:	0409      	lsls	r1, r1, #16
 80011c8:	0c24      	lsrs	r4, r4, #16
 80011ca:	0003      	movs	r3, r0
 80011cc:	430c      	orrs	r4, r1
 80011ce:	42a2      	cmp	r2, r4
 80011d0:	d900      	bls.n	80011d4 <__aeabi_ddiv+0x230>
 80011d2:	e15d      	b.n	8001490 <__aeabi_ddiv+0x4ec>
 80011d4:	4641      	mov	r1, r8
 80011d6:	1aa4      	subs	r4, r4, r2
 80011d8:	043a      	lsls	r2, r7, #16
 80011da:	431a      	orrs	r2, r3
 80011dc:	9d04      	ldr	r5, [sp, #16]
 80011de:	0413      	lsls	r3, r2, #16
 80011e0:	0c1b      	lsrs	r3, r3, #16
 80011e2:	4359      	muls	r1, r3
 80011e4:	4647      	mov	r7, r8
 80011e6:	436b      	muls	r3, r5
 80011e8:	469c      	mov	ip, r3
 80011ea:	0c10      	lsrs	r0, r2, #16
 80011ec:	4347      	muls	r7, r0
 80011ee:	0c0b      	lsrs	r3, r1, #16
 80011f0:	44bc      	add	ip, r7
 80011f2:	4463      	add	r3, ip
 80011f4:	4368      	muls	r0, r5
 80011f6:	429f      	cmp	r7, r3
 80011f8:	d903      	bls.n	8001202 <__aeabi_ddiv+0x25e>
 80011fa:	2580      	movs	r5, #128	@ 0x80
 80011fc:	026d      	lsls	r5, r5, #9
 80011fe:	46ac      	mov	ip, r5
 8001200:	4460      	add	r0, ip
 8001202:	0c1f      	lsrs	r7, r3, #16
 8001204:	0409      	lsls	r1, r1, #16
 8001206:	041b      	lsls	r3, r3, #16
 8001208:	0c09      	lsrs	r1, r1, #16
 800120a:	183f      	adds	r7, r7, r0
 800120c:	185b      	adds	r3, r3, r1
 800120e:	42bc      	cmp	r4, r7
 8001210:	d200      	bcs.n	8001214 <__aeabi_ddiv+0x270>
 8001212:	e102      	b.n	800141a <__aeabi_ddiv+0x476>
 8001214:	d100      	bne.n	8001218 <__aeabi_ddiv+0x274>
 8001216:	e0fd      	b.n	8001414 <__aeabi_ddiv+0x470>
 8001218:	2301      	movs	r3, #1
 800121a:	431a      	orrs	r2, r3
 800121c:	4b43      	ldr	r3, [pc, #268]	@ (800132c <__aeabi_ddiv+0x388>)
 800121e:	4453      	add	r3, sl
 8001220:	2b00      	cmp	r3, #0
 8001222:	dc00      	bgt.n	8001226 <__aeabi_ddiv+0x282>
 8001224:	e0ae      	b.n	8001384 <__aeabi_ddiv+0x3e0>
 8001226:	0751      	lsls	r1, r2, #29
 8001228:	d000      	beq.n	800122c <__aeabi_ddiv+0x288>
 800122a:	e198      	b.n	800155e <__aeabi_ddiv+0x5ba>
 800122c:	4659      	mov	r1, fp
 800122e:	01c9      	lsls	r1, r1, #7
 8001230:	d506      	bpl.n	8001240 <__aeabi_ddiv+0x29c>
 8001232:	4659      	mov	r1, fp
 8001234:	4b3e      	ldr	r3, [pc, #248]	@ (8001330 <__aeabi_ddiv+0x38c>)
 8001236:	4019      	ands	r1, r3
 8001238:	2380      	movs	r3, #128	@ 0x80
 800123a:	468b      	mov	fp, r1
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	4453      	add	r3, sl
 8001240:	493c      	ldr	r1, [pc, #240]	@ (8001334 <__aeabi_ddiv+0x390>)
 8001242:	428b      	cmp	r3, r1
 8001244:	dd00      	ble.n	8001248 <__aeabi_ddiv+0x2a4>
 8001246:	e71a      	b.n	800107e <__aeabi_ddiv+0xda>
 8001248:	4659      	mov	r1, fp
 800124a:	08d2      	lsrs	r2, r2, #3
 800124c:	0749      	lsls	r1, r1, #29
 800124e:	4311      	orrs	r1, r2
 8001250:	465a      	mov	r2, fp
 8001252:	055b      	lsls	r3, r3, #21
 8001254:	0254      	lsls	r4, r2, #9
 8001256:	4688      	mov	r8, r1
 8001258:	0b24      	lsrs	r4, r4, #12
 800125a:	0d5b      	lsrs	r3, r3, #21
 800125c:	e702      	b.n	8001064 <__aeabi_ddiv+0xc0>
 800125e:	465a      	mov	r2, fp
 8001260:	9b00      	ldr	r3, [sp, #0]
 8001262:	431a      	orrs	r2, r3
 8001264:	d100      	bne.n	8001268 <__aeabi_ddiv+0x2c4>
 8001266:	e07e      	b.n	8001366 <__aeabi_ddiv+0x3c2>
 8001268:	465b      	mov	r3, fp
 800126a:	2b00      	cmp	r3, #0
 800126c:	d100      	bne.n	8001270 <__aeabi_ddiv+0x2cc>
 800126e:	e100      	b.n	8001472 <__aeabi_ddiv+0x4ce>
 8001270:	4658      	mov	r0, fp
 8001272:	f001 fa37 	bl	80026e4 <__clzsi2>
 8001276:	0002      	movs	r2, r0
 8001278:	0003      	movs	r3, r0
 800127a:	3a0b      	subs	r2, #11
 800127c:	271d      	movs	r7, #29
 800127e:	9e00      	ldr	r6, [sp, #0]
 8001280:	1aba      	subs	r2, r7, r2
 8001282:	0019      	movs	r1, r3
 8001284:	4658      	mov	r0, fp
 8001286:	40d6      	lsrs	r6, r2
 8001288:	3908      	subs	r1, #8
 800128a:	4088      	lsls	r0, r1
 800128c:	0032      	movs	r2, r6
 800128e:	4302      	orrs	r2, r0
 8001290:	4693      	mov	fp, r2
 8001292:	9a00      	ldr	r2, [sp, #0]
 8001294:	408a      	lsls	r2, r1
 8001296:	4928      	ldr	r1, [pc, #160]	@ (8001338 <__aeabi_ddiv+0x394>)
 8001298:	4453      	add	r3, sl
 800129a:	468a      	mov	sl, r1
 800129c:	449a      	add	sl, r3
 800129e:	2300      	movs	r3, #0
 80012a0:	e6c8      	b.n	8001034 <__aeabi_ddiv+0x90>
 80012a2:	465b      	mov	r3, fp
 80012a4:	4303      	orrs	r3, r0
 80012a6:	4699      	mov	r9, r3
 80012a8:	d056      	beq.n	8001358 <__aeabi_ddiv+0x3b4>
 80012aa:	465b      	mov	r3, fp
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d100      	bne.n	80012b2 <__aeabi_ddiv+0x30e>
 80012b0:	e0cd      	b.n	800144e <__aeabi_ddiv+0x4aa>
 80012b2:	4658      	mov	r0, fp
 80012b4:	f001 fa16 	bl	80026e4 <__clzsi2>
 80012b8:	230b      	movs	r3, #11
 80012ba:	425b      	negs	r3, r3
 80012bc:	469c      	mov	ip, r3
 80012be:	0002      	movs	r2, r0
 80012c0:	4484      	add	ip, r0
 80012c2:	4666      	mov	r6, ip
 80012c4:	231d      	movs	r3, #29
 80012c6:	1b9b      	subs	r3, r3, r6
 80012c8:	0026      	movs	r6, r4
 80012ca:	0011      	movs	r1, r2
 80012cc:	4658      	mov	r0, fp
 80012ce:	40de      	lsrs	r6, r3
 80012d0:	3908      	subs	r1, #8
 80012d2:	4088      	lsls	r0, r1
 80012d4:	0033      	movs	r3, r6
 80012d6:	4303      	orrs	r3, r0
 80012d8:	4699      	mov	r9, r3
 80012da:	0023      	movs	r3, r4
 80012dc:	408b      	lsls	r3, r1
 80012de:	4698      	mov	r8, r3
 80012e0:	4b16      	ldr	r3, [pc, #88]	@ (800133c <__aeabi_ddiv+0x398>)
 80012e2:	2400      	movs	r4, #0
 80012e4:	1a9b      	subs	r3, r3, r2
 80012e6:	469a      	mov	sl, r3
 80012e8:	2300      	movs	r3, #0
 80012ea:	9303      	str	r3, [sp, #12]
 80012ec:	e682      	b.n	8000ff4 <__aeabi_ddiv+0x50>
 80012ee:	465a      	mov	r2, fp
 80012f0:	4302      	orrs	r2, r0
 80012f2:	4691      	mov	r9, r2
 80012f4:	d12a      	bne.n	800134c <__aeabi_ddiv+0x3a8>
 80012f6:	2200      	movs	r2, #0
 80012f8:	469a      	mov	sl, r3
 80012fa:	2302      	movs	r3, #2
 80012fc:	4690      	mov	r8, r2
 80012fe:	2408      	movs	r4, #8
 8001300:	9303      	str	r3, [sp, #12]
 8001302:	e677      	b.n	8000ff4 <__aeabi_ddiv+0x50>
 8001304:	465a      	mov	r2, fp
 8001306:	9b00      	ldr	r3, [sp, #0]
 8001308:	431a      	orrs	r2, r3
 800130a:	4b0d      	ldr	r3, [pc, #52]	@ (8001340 <__aeabi_ddiv+0x39c>)
 800130c:	469c      	mov	ip, r3
 800130e:	44e2      	add	sl, ip
 8001310:	2a00      	cmp	r2, #0
 8001312:	d117      	bne.n	8001344 <__aeabi_ddiv+0x3a0>
 8001314:	2302      	movs	r3, #2
 8001316:	431c      	orrs	r4, r3
 8001318:	2300      	movs	r3, #0
 800131a:	469b      	mov	fp, r3
 800131c:	3302      	adds	r3, #2
 800131e:	e689      	b.n	8001034 <__aeabi_ddiv+0x90>
 8001320:	000007ff 	.word	0x000007ff
 8001324:	fffffc01 	.word	0xfffffc01
 8001328:	0800c2bc 	.word	0x0800c2bc
 800132c:	000003ff 	.word	0x000003ff
 8001330:	feffffff 	.word	0xfeffffff
 8001334:	000007fe 	.word	0x000007fe
 8001338:	000003f3 	.word	0x000003f3
 800133c:	fffffc0d 	.word	0xfffffc0d
 8001340:	fffff801 	.word	0xfffff801
 8001344:	2303      	movs	r3, #3
 8001346:	0032      	movs	r2, r6
 8001348:	431c      	orrs	r4, r3
 800134a:	e673      	b.n	8001034 <__aeabi_ddiv+0x90>
 800134c:	469a      	mov	sl, r3
 800134e:	2303      	movs	r3, #3
 8001350:	46d9      	mov	r9, fp
 8001352:	240c      	movs	r4, #12
 8001354:	9303      	str	r3, [sp, #12]
 8001356:	e64d      	b.n	8000ff4 <__aeabi_ddiv+0x50>
 8001358:	2300      	movs	r3, #0
 800135a:	4698      	mov	r8, r3
 800135c:	469a      	mov	sl, r3
 800135e:	3301      	adds	r3, #1
 8001360:	2404      	movs	r4, #4
 8001362:	9303      	str	r3, [sp, #12]
 8001364:	e646      	b.n	8000ff4 <__aeabi_ddiv+0x50>
 8001366:	2301      	movs	r3, #1
 8001368:	431c      	orrs	r4, r3
 800136a:	2300      	movs	r3, #0
 800136c:	469b      	mov	fp, r3
 800136e:	3301      	adds	r3, #1
 8001370:	e660      	b.n	8001034 <__aeabi_ddiv+0x90>
 8001372:	2300      	movs	r3, #0
 8001374:	2480      	movs	r4, #128	@ 0x80
 8001376:	4698      	mov	r8, r3
 8001378:	2600      	movs	r6, #0
 800137a:	4b92      	ldr	r3, [pc, #584]	@ (80015c4 <__aeabi_ddiv+0x620>)
 800137c:	0324      	lsls	r4, r4, #12
 800137e:	e671      	b.n	8001064 <__aeabi_ddiv+0xc0>
 8001380:	2201      	movs	r2, #1
 8001382:	4252      	negs	r2, r2
 8001384:	2101      	movs	r1, #1
 8001386:	1ac9      	subs	r1, r1, r3
 8001388:	2938      	cmp	r1, #56	@ 0x38
 800138a:	dd00      	ble.n	800138e <__aeabi_ddiv+0x3ea>
 800138c:	e666      	b.n	800105c <__aeabi_ddiv+0xb8>
 800138e:	291f      	cmp	r1, #31
 8001390:	dc00      	bgt.n	8001394 <__aeabi_ddiv+0x3f0>
 8001392:	e0ab      	b.n	80014ec <__aeabi_ddiv+0x548>
 8001394:	201f      	movs	r0, #31
 8001396:	4240      	negs	r0, r0
 8001398:	1ac3      	subs	r3, r0, r3
 800139a:	4658      	mov	r0, fp
 800139c:	40d8      	lsrs	r0, r3
 800139e:	0003      	movs	r3, r0
 80013a0:	2920      	cmp	r1, #32
 80013a2:	d004      	beq.n	80013ae <__aeabi_ddiv+0x40a>
 80013a4:	4658      	mov	r0, fp
 80013a6:	4988      	ldr	r1, [pc, #544]	@ (80015c8 <__aeabi_ddiv+0x624>)
 80013a8:	4451      	add	r1, sl
 80013aa:	4088      	lsls	r0, r1
 80013ac:	4302      	orrs	r2, r0
 80013ae:	1e51      	subs	r1, r2, #1
 80013b0:	418a      	sbcs	r2, r1
 80013b2:	431a      	orrs	r2, r3
 80013b4:	2307      	movs	r3, #7
 80013b6:	0019      	movs	r1, r3
 80013b8:	2400      	movs	r4, #0
 80013ba:	4011      	ands	r1, r2
 80013bc:	4213      	tst	r3, r2
 80013be:	d00c      	beq.n	80013da <__aeabi_ddiv+0x436>
 80013c0:	230f      	movs	r3, #15
 80013c2:	4013      	ands	r3, r2
 80013c4:	2b04      	cmp	r3, #4
 80013c6:	d100      	bne.n	80013ca <__aeabi_ddiv+0x426>
 80013c8:	e0f9      	b.n	80015be <__aeabi_ddiv+0x61a>
 80013ca:	1d11      	adds	r1, r2, #4
 80013cc:	4291      	cmp	r1, r2
 80013ce:	419b      	sbcs	r3, r3
 80013d0:	000a      	movs	r2, r1
 80013d2:	425b      	negs	r3, r3
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	025b      	lsls	r3, r3, #9
 80013d8:	0b1c      	lsrs	r4, r3, #12
 80013da:	08d2      	lsrs	r2, r2, #3
 80013dc:	430a      	orrs	r2, r1
 80013de:	4690      	mov	r8, r2
 80013e0:	2300      	movs	r3, #0
 80013e2:	e63f      	b.n	8001064 <__aeabi_ddiv+0xc0>
 80013e4:	2480      	movs	r4, #128	@ 0x80
 80013e6:	464b      	mov	r3, r9
 80013e8:	0324      	lsls	r4, r4, #12
 80013ea:	4223      	tst	r3, r4
 80013ec:	d009      	beq.n	8001402 <__aeabi_ddiv+0x45e>
 80013ee:	465b      	mov	r3, fp
 80013f0:	4223      	tst	r3, r4
 80013f2:	d106      	bne.n	8001402 <__aeabi_ddiv+0x45e>
 80013f4:	431c      	orrs	r4, r3
 80013f6:	0324      	lsls	r4, r4, #12
 80013f8:	002e      	movs	r6, r5
 80013fa:	4690      	mov	r8, r2
 80013fc:	4b71      	ldr	r3, [pc, #452]	@ (80015c4 <__aeabi_ddiv+0x620>)
 80013fe:	0b24      	lsrs	r4, r4, #12
 8001400:	e630      	b.n	8001064 <__aeabi_ddiv+0xc0>
 8001402:	2480      	movs	r4, #128	@ 0x80
 8001404:	464b      	mov	r3, r9
 8001406:	0324      	lsls	r4, r4, #12
 8001408:	431c      	orrs	r4, r3
 800140a:	0324      	lsls	r4, r4, #12
 800140c:	9e02      	ldr	r6, [sp, #8]
 800140e:	4b6d      	ldr	r3, [pc, #436]	@ (80015c4 <__aeabi_ddiv+0x620>)
 8001410:	0b24      	lsrs	r4, r4, #12
 8001412:	e627      	b.n	8001064 <__aeabi_ddiv+0xc0>
 8001414:	2b00      	cmp	r3, #0
 8001416:	d100      	bne.n	800141a <__aeabi_ddiv+0x476>
 8001418:	e700      	b.n	800121c <__aeabi_ddiv+0x278>
 800141a:	9800      	ldr	r0, [sp, #0]
 800141c:	1e51      	subs	r1, r2, #1
 800141e:	4684      	mov	ip, r0
 8001420:	4464      	add	r4, ip
 8001422:	4284      	cmp	r4, r0
 8001424:	d200      	bcs.n	8001428 <__aeabi_ddiv+0x484>
 8001426:	e084      	b.n	8001532 <__aeabi_ddiv+0x58e>
 8001428:	42bc      	cmp	r4, r7
 800142a:	d200      	bcs.n	800142e <__aeabi_ddiv+0x48a>
 800142c:	e0ae      	b.n	800158c <__aeabi_ddiv+0x5e8>
 800142e:	d100      	bne.n	8001432 <__aeabi_ddiv+0x48e>
 8001430:	e0c1      	b.n	80015b6 <__aeabi_ddiv+0x612>
 8001432:	000a      	movs	r2, r1
 8001434:	e6f0      	b.n	8001218 <__aeabi_ddiv+0x274>
 8001436:	4542      	cmp	r2, r8
 8001438:	d900      	bls.n	800143c <__aeabi_ddiv+0x498>
 800143a:	e62c      	b.n	8001096 <__aeabi_ddiv+0xf2>
 800143c:	464b      	mov	r3, r9
 800143e:	07dc      	lsls	r4, r3, #31
 8001440:	0858      	lsrs	r0, r3, #1
 8001442:	4643      	mov	r3, r8
 8001444:	085b      	lsrs	r3, r3, #1
 8001446:	431c      	orrs	r4, r3
 8001448:	4643      	mov	r3, r8
 800144a:	07df      	lsls	r7, r3, #31
 800144c:	e62a      	b.n	80010a4 <__aeabi_ddiv+0x100>
 800144e:	f001 f949 	bl	80026e4 <__clzsi2>
 8001452:	2315      	movs	r3, #21
 8001454:	469c      	mov	ip, r3
 8001456:	4484      	add	ip, r0
 8001458:	0002      	movs	r2, r0
 800145a:	4663      	mov	r3, ip
 800145c:	3220      	adds	r2, #32
 800145e:	2b1c      	cmp	r3, #28
 8001460:	dc00      	bgt.n	8001464 <__aeabi_ddiv+0x4c0>
 8001462:	e72e      	b.n	80012c2 <__aeabi_ddiv+0x31e>
 8001464:	0023      	movs	r3, r4
 8001466:	3808      	subs	r0, #8
 8001468:	4083      	lsls	r3, r0
 800146a:	4699      	mov	r9, r3
 800146c:	2300      	movs	r3, #0
 800146e:	4698      	mov	r8, r3
 8001470:	e736      	b.n	80012e0 <__aeabi_ddiv+0x33c>
 8001472:	f001 f937 	bl	80026e4 <__clzsi2>
 8001476:	0002      	movs	r2, r0
 8001478:	0003      	movs	r3, r0
 800147a:	3215      	adds	r2, #21
 800147c:	3320      	adds	r3, #32
 800147e:	2a1c      	cmp	r2, #28
 8001480:	dc00      	bgt.n	8001484 <__aeabi_ddiv+0x4e0>
 8001482:	e6fb      	b.n	800127c <__aeabi_ddiv+0x2d8>
 8001484:	9900      	ldr	r1, [sp, #0]
 8001486:	3808      	subs	r0, #8
 8001488:	4081      	lsls	r1, r0
 800148a:	2200      	movs	r2, #0
 800148c:	468b      	mov	fp, r1
 800148e:	e702      	b.n	8001296 <__aeabi_ddiv+0x2f2>
 8001490:	9900      	ldr	r1, [sp, #0]
 8001492:	3b01      	subs	r3, #1
 8001494:	468c      	mov	ip, r1
 8001496:	4464      	add	r4, ip
 8001498:	42a1      	cmp	r1, r4
 800149a:	d900      	bls.n	800149e <__aeabi_ddiv+0x4fa>
 800149c:	e69a      	b.n	80011d4 <__aeabi_ddiv+0x230>
 800149e:	42a2      	cmp	r2, r4
 80014a0:	d800      	bhi.n	80014a4 <__aeabi_ddiv+0x500>
 80014a2:	e697      	b.n	80011d4 <__aeabi_ddiv+0x230>
 80014a4:	1e83      	subs	r3, r0, #2
 80014a6:	4464      	add	r4, ip
 80014a8:	e694      	b.n	80011d4 <__aeabi_ddiv+0x230>
 80014aa:	46ac      	mov	ip, r5
 80014ac:	4461      	add	r1, ip
 80014ae:	3f01      	subs	r7, #1
 80014b0:	428d      	cmp	r5, r1
 80014b2:	d900      	bls.n	80014b6 <__aeabi_ddiv+0x512>
 80014b4:	e680      	b.n	80011b8 <__aeabi_ddiv+0x214>
 80014b6:	428a      	cmp	r2, r1
 80014b8:	d800      	bhi.n	80014bc <__aeabi_ddiv+0x518>
 80014ba:	e67d      	b.n	80011b8 <__aeabi_ddiv+0x214>
 80014bc:	1e87      	subs	r7, r0, #2
 80014be:	4461      	add	r1, ip
 80014c0:	e67a      	b.n	80011b8 <__aeabi_ddiv+0x214>
 80014c2:	4285      	cmp	r5, r0
 80014c4:	d000      	beq.n	80014c8 <__aeabi_ddiv+0x524>
 80014c6:	e65f      	b.n	8001188 <__aeabi_ddiv+0x1e4>
 80014c8:	45b9      	cmp	r9, r7
 80014ca:	d900      	bls.n	80014ce <__aeabi_ddiv+0x52a>
 80014cc:	e65c      	b.n	8001188 <__aeabi_ddiv+0x1e4>
 80014ce:	e656      	b.n	800117e <__aeabi_ddiv+0x1da>
 80014d0:	42a2      	cmp	r2, r4
 80014d2:	d800      	bhi.n	80014d6 <__aeabi_ddiv+0x532>
 80014d4:	e61a      	b.n	800110c <__aeabi_ddiv+0x168>
 80014d6:	1e83      	subs	r3, r0, #2
 80014d8:	4464      	add	r4, ip
 80014da:	e617      	b.n	800110c <__aeabi_ddiv+0x168>
 80014dc:	428a      	cmp	r2, r1
 80014de:	d800      	bhi.n	80014e2 <__aeabi_ddiv+0x53e>
 80014e0:	e600      	b.n	80010e4 <__aeabi_ddiv+0x140>
 80014e2:	46ac      	mov	ip, r5
 80014e4:	1e83      	subs	r3, r0, #2
 80014e6:	4698      	mov	r8, r3
 80014e8:	4461      	add	r1, ip
 80014ea:	e5fb      	b.n	80010e4 <__aeabi_ddiv+0x140>
 80014ec:	4837      	ldr	r0, [pc, #220]	@ (80015cc <__aeabi_ddiv+0x628>)
 80014ee:	0014      	movs	r4, r2
 80014f0:	4450      	add	r0, sl
 80014f2:	4082      	lsls	r2, r0
 80014f4:	465b      	mov	r3, fp
 80014f6:	0017      	movs	r7, r2
 80014f8:	4083      	lsls	r3, r0
 80014fa:	40cc      	lsrs	r4, r1
 80014fc:	1e7a      	subs	r2, r7, #1
 80014fe:	4197      	sbcs	r7, r2
 8001500:	4323      	orrs	r3, r4
 8001502:	433b      	orrs	r3, r7
 8001504:	001a      	movs	r2, r3
 8001506:	465b      	mov	r3, fp
 8001508:	40cb      	lsrs	r3, r1
 800150a:	0751      	lsls	r1, r2, #29
 800150c:	d009      	beq.n	8001522 <__aeabi_ddiv+0x57e>
 800150e:	210f      	movs	r1, #15
 8001510:	4011      	ands	r1, r2
 8001512:	2904      	cmp	r1, #4
 8001514:	d005      	beq.n	8001522 <__aeabi_ddiv+0x57e>
 8001516:	1d11      	adds	r1, r2, #4
 8001518:	4291      	cmp	r1, r2
 800151a:	4192      	sbcs	r2, r2
 800151c:	4252      	negs	r2, r2
 800151e:	189b      	adds	r3, r3, r2
 8001520:	000a      	movs	r2, r1
 8001522:	0219      	lsls	r1, r3, #8
 8001524:	d400      	bmi.n	8001528 <__aeabi_ddiv+0x584>
 8001526:	e755      	b.n	80013d4 <__aeabi_ddiv+0x430>
 8001528:	2200      	movs	r2, #0
 800152a:	2301      	movs	r3, #1
 800152c:	2400      	movs	r4, #0
 800152e:	4690      	mov	r8, r2
 8001530:	e598      	b.n	8001064 <__aeabi_ddiv+0xc0>
 8001532:	000a      	movs	r2, r1
 8001534:	42bc      	cmp	r4, r7
 8001536:	d000      	beq.n	800153a <__aeabi_ddiv+0x596>
 8001538:	e66e      	b.n	8001218 <__aeabi_ddiv+0x274>
 800153a:	454b      	cmp	r3, r9
 800153c:	d000      	beq.n	8001540 <__aeabi_ddiv+0x59c>
 800153e:	e66b      	b.n	8001218 <__aeabi_ddiv+0x274>
 8001540:	e66c      	b.n	800121c <__aeabi_ddiv+0x278>
 8001542:	4b23      	ldr	r3, [pc, #140]	@ (80015d0 <__aeabi_ddiv+0x62c>)
 8001544:	4a23      	ldr	r2, [pc, #140]	@ (80015d4 <__aeabi_ddiv+0x630>)
 8001546:	4453      	add	r3, sl
 8001548:	4592      	cmp	sl, r2
 800154a:	da00      	bge.n	800154e <__aeabi_ddiv+0x5aa>
 800154c:	e718      	b.n	8001380 <__aeabi_ddiv+0x3dc>
 800154e:	2101      	movs	r1, #1
 8001550:	4249      	negs	r1, r1
 8001552:	1d0a      	adds	r2, r1, #4
 8001554:	428a      	cmp	r2, r1
 8001556:	4189      	sbcs	r1, r1
 8001558:	4249      	negs	r1, r1
 800155a:	448b      	add	fp, r1
 800155c:	e666      	b.n	800122c <__aeabi_ddiv+0x288>
 800155e:	210f      	movs	r1, #15
 8001560:	4011      	ands	r1, r2
 8001562:	2904      	cmp	r1, #4
 8001564:	d100      	bne.n	8001568 <__aeabi_ddiv+0x5c4>
 8001566:	e661      	b.n	800122c <__aeabi_ddiv+0x288>
 8001568:	0011      	movs	r1, r2
 800156a:	e7f2      	b.n	8001552 <__aeabi_ddiv+0x5ae>
 800156c:	42bc      	cmp	r4, r7
 800156e:	d800      	bhi.n	8001572 <__aeabi_ddiv+0x5ce>
 8001570:	e60a      	b.n	8001188 <__aeabi_ddiv+0x1e4>
 8001572:	2302      	movs	r3, #2
 8001574:	425b      	negs	r3, r3
 8001576:	469c      	mov	ip, r3
 8001578:	9900      	ldr	r1, [sp, #0]
 800157a:	444f      	add	r7, r9
 800157c:	454f      	cmp	r7, r9
 800157e:	419b      	sbcs	r3, r3
 8001580:	44e3      	add	fp, ip
 8001582:	468c      	mov	ip, r1
 8001584:	425b      	negs	r3, r3
 8001586:	4463      	add	r3, ip
 8001588:	18c0      	adds	r0, r0, r3
 800158a:	e5ff      	b.n	800118c <__aeabi_ddiv+0x1e8>
 800158c:	4649      	mov	r1, r9
 800158e:	9d00      	ldr	r5, [sp, #0]
 8001590:	0048      	lsls	r0, r1, #1
 8001592:	4548      	cmp	r0, r9
 8001594:	4189      	sbcs	r1, r1
 8001596:	46ac      	mov	ip, r5
 8001598:	4249      	negs	r1, r1
 800159a:	4461      	add	r1, ip
 800159c:	4681      	mov	r9, r0
 800159e:	3a02      	subs	r2, #2
 80015a0:	1864      	adds	r4, r4, r1
 80015a2:	e7c7      	b.n	8001534 <__aeabi_ddiv+0x590>
 80015a4:	2480      	movs	r4, #128	@ 0x80
 80015a6:	465b      	mov	r3, fp
 80015a8:	0324      	lsls	r4, r4, #12
 80015aa:	431c      	orrs	r4, r3
 80015ac:	0324      	lsls	r4, r4, #12
 80015ae:	4690      	mov	r8, r2
 80015b0:	4b04      	ldr	r3, [pc, #16]	@ (80015c4 <__aeabi_ddiv+0x620>)
 80015b2:	0b24      	lsrs	r4, r4, #12
 80015b4:	e556      	b.n	8001064 <__aeabi_ddiv+0xc0>
 80015b6:	4599      	cmp	r9, r3
 80015b8:	d3e8      	bcc.n	800158c <__aeabi_ddiv+0x5e8>
 80015ba:	000a      	movs	r2, r1
 80015bc:	e7bd      	b.n	800153a <__aeabi_ddiv+0x596>
 80015be:	2300      	movs	r3, #0
 80015c0:	e708      	b.n	80013d4 <__aeabi_ddiv+0x430>
 80015c2:	46c0      	nop			@ (mov r8, r8)
 80015c4:	000007ff 	.word	0x000007ff
 80015c8:	0000043e 	.word	0x0000043e
 80015cc:	0000041e 	.word	0x0000041e
 80015d0:	000003ff 	.word	0x000003ff
 80015d4:	fffffc02 	.word	0xfffffc02

080015d8 <__eqdf2>:
 80015d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015da:	4657      	mov	r7, sl
 80015dc:	46de      	mov	lr, fp
 80015de:	464e      	mov	r6, r9
 80015e0:	4645      	mov	r5, r8
 80015e2:	b5e0      	push	{r5, r6, r7, lr}
 80015e4:	000d      	movs	r5, r1
 80015e6:	0004      	movs	r4, r0
 80015e8:	0fe8      	lsrs	r0, r5, #31
 80015ea:	4683      	mov	fp, r0
 80015ec:	0309      	lsls	r1, r1, #12
 80015ee:	0fd8      	lsrs	r0, r3, #31
 80015f0:	0b09      	lsrs	r1, r1, #12
 80015f2:	4682      	mov	sl, r0
 80015f4:	4819      	ldr	r0, [pc, #100]	@ (800165c <__eqdf2+0x84>)
 80015f6:	468c      	mov	ip, r1
 80015f8:	031f      	lsls	r7, r3, #12
 80015fa:	0069      	lsls	r1, r5, #1
 80015fc:	005e      	lsls	r6, r3, #1
 80015fe:	0d49      	lsrs	r1, r1, #21
 8001600:	0b3f      	lsrs	r7, r7, #12
 8001602:	0d76      	lsrs	r6, r6, #21
 8001604:	4281      	cmp	r1, r0
 8001606:	d018      	beq.n	800163a <__eqdf2+0x62>
 8001608:	4286      	cmp	r6, r0
 800160a:	d00f      	beq.n	800162c <__eqdf2+0x54>
 800160c:	2001      	movs	r0, #1
 800160e:	42b1      	cmp	r1, r6
 8001610:	d10d      	bne.n	800162e <__eqdf2+0x56>
 8001612:	45bc      	cmp	ip, r7
 8001614:	d10b      	bne.n	800162e <__eqdf2+0x56>
 8001616:	4294      	cmp	r4, r2
 8001618:	d109      	bne.n	800162e <__eqdf2+0x56>
 800161a:	45d3      	cmp	fp, sl
 800161c:	d01c      	beq.n	8001658 <__eqdf2+0x80>
 800161e:	2900      	cmp	r1, #0
 8001620:	d105      	bne.n	800162e <__eqdf2+0x56>
 8001622:	4660      	mov	r0, ip
 8001624:	4320      	orrs	r0, r4
 8001626:	1e43      	subs	r3, r0, #1
 8001628:	4198      	sbcs	r0, r3
 800162a:	e000      	b.n	800162e <__eqdf2+0x56>
 800162c:	2001      	movs	r0, #1
 800162e:	bcf0      	pop	{r4, r5, r6, r7}
 8001630:	46bb      	mov	fp, r7
 8001632:	46b2      	mov	sl, r6
 8001634:	46a9      	mov	r9, r5
 8001636:	46a0      	mov	r8, r4
 8001638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800163a:	2001      	movs	r0, #1
 800163c:	428e      	cmp	r6, r1
 800163e:	d1f6      	bne.n	800162e <__eqdf2+0x56>
 8001640:	4661      	mov	r1, ip
 8001642:	4339      	orrs	r1, r7
 8001644:	000f      	movs	r7, r1
 8001646:	4317      	orrs	r7, r2
 8001648:	4327      	orrs	r7, r4
 800164a:	d1f0      	bne.n	800162e <__eqdf2+0x56>
 800164c:	465b      	mov	r3, fp
 800164e:	4652      	mov	r2, sl
 8001650:	1a98      	subs	r0, r3, r2
 8001652:	1e43      	subs	r3, r0, #1
 8001654:	4198      	sbcs	r0, r3
 8001656:	e7ea      	b.n	800162e <__eqdf2+0x56>
 8001658:	2000      	movs	r0, #0
 800165a:	e7e8      	b.n	800162e <__eqdf2+0x56>
 800165c:	000007ff 	.word	0x000007ff

08001660 <__gedf2>:
 8001660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001662:	4657      	mov	r7, sl
 8001664:	464e      	mov	r6, r9
 8001666:	4645      	mov	r5, r8
 8001668:	46de      	mov	lr, fp
 800166a:	b5e0      	push	{r5, r6, r7, lr}
 800166c:	000d      	movs	r5, r1
 800166e:	030f      	lsls	r7, r1, #12
 8001670:	0b39      	lsrs	r1, r7, #12
 8001672:	b083      	sub	sp, #12
 8001674:	0004      	movs	r4, r0
 8001676:	4680      	mov	r8, r0
 8001678:	9101      	str	r1, [sp, #4]
 800167a:	0058      	lsls	r0, r3, #1
 800167c:	0fe9      	lsrs	r1, r5, #31
 800167e:	4f31      	ldr	r7, [pc, #196]	@ (8001744 <__gedf2+0xe4>)
 8001680:	0d40      	lsrs	r0, r0, #21
 8001682:	468c      	mov	ip, r1
 8001684:	006e      	lsls	r6, r5, #1
 8001686:	0319      	lsls	r1, r3, #12
 8001688:	4682      	mov	sl, r0
 800168a:	4691      	mov	r9, r2
 800168c:	0d76      	lsrs	r6, r6, #21
 800168e:	0b09      	lsrs	r1, r1, #12
 8001690:	0fd8      	lsrs	r0, r3, #31
 8001692:	42be      	cmp	r6, r7
 8001694:	d01f      	beq.n	80016d6 <__gedf2+0x76>
 8001696:	45ba      	cmp	sl, r7
 8001698:	d00f      	beq.n	80016ba <__gedf2+0x5a>
 800169a:	2e00      	cmp	r6, #0
 800169c:	d12f      	bne.n	80016fe <__gedf2+0x9e>
 800169e:	4655      	mov	r5, sl
 80016a0:	9e01      	ldr	r6, [sp, #4]
 80016a2:	4334      	orrs	r4, r6
 80016a4:	2d00      	cmp	r5, #0
 80016a6:	d127      	bne.n	80016f8 <__gedf2+0x98>
 80016a8:	430a      	orrs	r2, r1
 80016aa:	d03a      	beq.n	8001722 <__gedf2+0xc2>
 80016ac:	2c00      	cmp	r4, #0
 80016ae:	d145      	bne.n	800173c <__gedf2+0xdc>
 80016b0:	2800      	cmp	r0, #0
 80016b2:	d11a      	bne.n	80016ea <__gedf2+0x8a>
 80016b4:	2001      	movs	r0, #1
 80016b6:	4240      	negs	r0, r0
 80016b8:	e017      	b.n	80016ea <__gedf2+0x8a>
 80016ba:	4311      	orrs	r1, r2
 80016bc:	d13b      	bne.n	8001736 <__gedf2+0xd6>
 80016be:	2e00      	cmp	r6, #0
 80016c0:	d102      	bne.n	80016c8 <__gedf2+0x68>
 80016c2:	9f01      	ldr	r7, [sp, #4]
 80016c4:	4327      	orrs	r7, r4
 80016c6:	d0f3      	beq.n	80016b0 <__gedf2+0x50>
 80016c8:	4584      	cmp	ip, r0
 80016ca:	d109      	bne.n	80016e0 <__gedf2+0x80>
 80016cc:	4663      	mov	r3, ip
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <__gedf2+0x54>
 80016d2:	4660      	mov	r0, ip
 80016d4:	e009      	b.n	80016ea <__gedf2+0x8a>
 80016d6:	9f01      	ldr	r7, [sp, #4]
 80016d8:	4327      	orrs	r7, r4
 80016da:	d12c      	bne.n	8001736 <__gedf2+0xd6>
 80016dc:	45b2      	cmp	sl, r6
 80016de:	d024      	beq.n	800172a <__gedf2+0xca>
 80016e0:	4663      	mov	r3, ip
 80016e2:	2002      	movs	r0, #2
 80016e4:	3b01      	subs	r3, #1
 80016e6:	4018      	ands	r0, r3
 80016e8:	3801      	subs	r0, #1
 80016ea:	b003      	add	sp, #12
 80016ec:	bcf0      	pop	{r4, r5, r6, r7}
 80016ee:	46bb      	mov	fp, r7
 80016f0:	46b2      	mov	sl, r6
 80016f2:	46a9      	mov	r9, r5
 80016f4:	46a0      	mov	r8, r4
 80016f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016f8:	2c00      	cmp	r4, #0
 80016fa:	d0d9      	beq.n	80016b0 <__gedf2+0x50>
 80016fc:	e7e4      	b.n	80016c8 <__gedf2+0x68>
 80016fe:	4654      	mov	r4, sl
 8001700:	2c00      	cmp	r4, #0
 8001702:	d0ed      	beq.n	80016e0 <__gedf2+0x80>
 8001704:	4584      	cmp	ip, r0
 8001706:	d1eb      	bne.n	80016e0 <__gedf2+0x80>
 8001708:	4556      	cmp	r6, sl
 800170a:	dce9      	bgt.n	80016e0 <__gedf2+0x80>
 800170c:	dbde      	blt.n	80016cc <__gedf2+0x6c>
 800170e:	9b01      	ldr	r3, [sp, #4]
 8001710:	428b      	cmp	r3, r1
 8001712:	d8e5      	bhi.n	80016e0 <__gedf2+0x80>
 8001714:	d1da      	bne.n	80016cc <__gedf2+0x6c>
 8001716:	45c8      	cmp	r8, r9
 8001718:	d8e2      	bhi.n	80016e0 <__gedf2+0x80>
 800171a:	2000      	movs	r0, #0
 800171c:	45c8      	cmp	r8, r9
 800171e:	d2e4      	bcs.n	80016ea <__gedf2+0x8a>
 8001720:	e7d4      	b.n	80016cc <__gedf2+0x6c>
 8001722:	2000      	movs	r0, #0
 8001724:	2c00      	cmp	r4, #0
 8001726:	d0e0      	beq.n	80016ea <__gedf2+0x8a>
 8001728:	e7da      	b.n	80016e0 <__gedf2+0x80>
 800172a:	4311      	orrs	r1, r2
 800172c:	d103      	bne.n	8001736 <__gedf2+0xd6>
 800172e:	4584      	cmp	ip, r0
 8001730:	d1d6      	bne.n	80016e0 <__gedf2+0x80>
 8001732:	2000      	movs	r0, #0
 8001734:	e7d9      	b.n	80016ea <__gedf2+0x8a>
 8001736:	2002      	movs	r0, #2
 8001738:	4240      	negs	r0, r0
 800173a:	e7d6      	b.n	80016ea <__gedf2+0x8a>
 800173c:	4584      	cmp	ip, r0
 800173e:	d0e6      	beq.n	800170e <__gedf2+0xae>
 8001740:	e7ce      	b.n	80016e0 <__gedf2+0x80>
 8001742:	46c0      	nop			@ (mov r8, r8)
 8001744:	000007ff 	.word	0x000007ff

08001748 <__ledf2>:
 8001748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800174a:	4657      	mov	r7, sl
 800174c:	464e      	mov	r6, r9
 800174e:	4645      	mov	r5, r8
 8001750:	46de      	mov	lr, fp
 8001752:	b5e0      	push	{r5, r6, r7, lr}
 8001754:	000d      	movs	r5, r1
 8001756:	030f      	lsls	r7, r1, #12
 8001758:	0004      	movs	r4, r0
 800175a:	4680      	mov	r8, r0
 800175c:	0fe8      	lsrs	r0, r5, #31
 800175e:	0b39      	lsrs	r1, r7, #12
 8001760:	4684      	mov	ip, r0
 8001762:	b083      	sub	sp, #12
 8001764:	0058      	lsls	r0, r3, #1
 8001766:	4f30      	ldr	r7, [pc, #192]	@ (8001828 <__ledf2+0xe0>)
 8001768:	0d40      	lsrs	r0, r0, #21
 800176a:	9101      	str	r1, [sp, #4]
 800176c:	031e      	lsls	r6, r3, #12
 800176e:	0069      	lsls	r1, r5, #1
 8001770:	4682      	mov	sl, r0
 8001772:	4691      	mov	r9, r2
 8001774:	0d49      	lsrs	r1, r1, #21
 8001776:	0b36      	lsrs	r6, r6, #12
 8001778:	0fd8      	lsrs	r0, r3, #31
 800177a:	42b9      	cmp	r1, r7
 800177c:	d020      	beq.n	80017c0 <__ledf2+0x78>
 800177e:	45ba      	cmp	sl, r7
 8001780:	d00f      	beq.n	80017a2 <__ledf2+0x5a>
 8001782:	2900      	cmp	r1, #0
 8001784:	d12b      	bne.n	80017de <__ledf2+0x96>
 8001786:	9901      	ldr	r1, [sp, #4]
 8001788:	430c      	orrs	r4, r1
 800178a:	4651      	mov	r1, sl
 800178c:	2900      	cmp	r1, #0
 800178e:	d137      	bne.n	8001800 <__ledf2+0xb8>
 8001790:	4332      	orrs	r2, r6
 8001792:	d038      	beq.n	8001806 <__ledf2+0xbe>
 8001794:	2c00      	cmp	r4, #0
 8001796:	d144      	bne.n	8001822 <__ledf2+0xda>
 8001798:	2800      	cmp	r0, #0
 800179a:	d119      	bne.n	80017d0 <__ledf2+0x88>
 800179c:	2001      	movs	r0, #1
 800179e:	4240      	negs	r0, r0
 80017a0:	e016      	b.n	80017d0 <__ledf2+0x88>
 80017a2:	4316      	orrs	r6, r2
 80017a4:	d113      	bne.n	80017ce <__ledf2+0x86>
 80017a6:	2900      	cmp	r1, #0
 80017a8:	d102      	bne.n	80017b0 <__ledf2+0x68>
 80017aa:	9f01      	ldr	r7, [sp, #4]
 80017ac:	4327      	orrs	r7, r4
 80017ae:	d0f3      	beq.n	8001798 <__ledf2+0x50>
 80017b0:	4584      	cmp	ip, r0
 80017b2:	d020      	beq.n	80017f6 <__ledf2+0xae>
 80017b4:	4663      	mov	r3, ip
 80017b6:	2002      	movs	r0, #2
 80017b8:	3b01      	subs	r3, #1
 80017ba:	4018      	ands	r0, r3
 80017bc:	3801      	subs	r0, #1
 80017be:	e007      	b.n	80017d0 <__ledf2+0x88>
 80017c0:	9f01      	ldr	r7, [sp, #4]
 80017c2:	4327      	orrs	r7, r4
 80017c4:	d103      	bne.n	80017ce <__ledf2+0x86>
 80017c6:	458a      	cmp	sl, r1
 80017c8:	d1f4      	bne.n	80017b4 <__ledf2+0x6c>
 80017ca:	4316      	orrs	r6, r2
 80017cc:	d01f      	beq.n	800180e <__ledf2+0xc6>
 80017ce:	2002      	movs	r0, #2
 80017d0:	b003      	add	sp, #12
 80017d2:	bcf0      	pop	{r4, r5, r6, r7}
 80017d4:	46bb      	mov	fp, r7
 80017d6:	46b2      	mov	sl, r6
 80017d8:	46a9      	mov	r9, r5
 80017da:	46a0      	mov	r8, r4
 80017dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017de:	4654      	mov	r4, sl
 80017e0:	2c00      	cmp	r4, #0
 80017e2:	d0e7      	beq.n	80017b4 <__ledf2+0x6c>
 80017e4:	4584      	cmp	ip, r0
 80017e6:	d1e5      	bne.n	80017b4 <__ledf2+0x6c>
 80017e8:	4551      	cmp	r1, sl
 80017ea:	dce3      	bgt.n	80017b4 <__ledf2+0x6c>
 80017ec:	db03      	blt.n	80017f6 <__ledf2+0xae>
 80017ee:	9b01      	ldr	r3, [sp, #4]
 80017f0:	42b3      	cmp	r3, r6
 80017f2:	d8df      	bhi.n	80017b4 <__ledf2+0x6c>
 80017f4:	d00f      	beq.n	8001816 <__ledf2+0xce>
 80017f6:	4663      	mov	r3, ip
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0cf      	beq.n	800179c <__ledf2+0x54>
 80017fc:	4660      	mov	r0, ip
 80017fe:	e7e7      	b.n	80017d0 <__ledf2+0x88>
 8001800:	2c00      	cmp	r4, #0
 8001802:	d0c9      	beq.n	8001798 <__ledf2+0x50>
 8001804:	e7d4      	b.n	80017b0 <__ledf2+0x68>
 8001806:	2000      	movs	r0, #0
 8001808:	2c00      	cmp	r4, #0
 800180a:	d0e1      	beq.n	80017d0 <__ledf2+0x88>
 800180c:	e7d2      	b.n	80017b4 <__ledf2+0x6c>
 800180e:	4584      	cmp	ip, r0
 8001810:	d1d0      	bne.n	80017b4 <__ledf2+0x6c>
 8001812:	2000      	movs	r0, #0
 8001814:	e7dc      	b.n	80017d0 <__ledf2+0x88>
 8001816:	45c8      	cmp	r8, r9
 8001818:	d8cc      	bhi.n	80017b4 <__ledf2+0x6c>
 800181a:	2000      	movs	r0, #0
 800181c:	45c8      	cmp	r8, r9
 800181e:	d2d7      	bcs.n	80017d0 <__ledf2+0x88>
 8001820:	e7e9      	b.n	80017f6 <__ledf2+0xae>
 8001822:	4584      	cmp	ip, r0
 8001824:	d0e3      	beq.n	80017ee <__ledf2+0xa6>
 8001826:	e7c5      	b.n	80017b4 <__ledf2+0x6c>
 8001828:	000007ff 	.word	0x000007ff

0800182c <__aeabi_dmul>:
 800182c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800182e:	4657      	mov	r7, sl
 8001830:	46de      	mov	lr, fp
 8001832:	464e      	mov	r6, r9
 8001834:	4645      	mov	r5, r8
 8001836:	b5e0      	push	{r5, r6, r7, lr}
 8001838:	001f      	movs	r7, r3
 800183a:	030b      	lsls	r3, r1, #12
 800183c:	0b1b      	lsrs	r3, r3, #12
 800183e:	0016      	movs	r6, r2
 8001840:	469a      	mov	sl, r3
 8001842:	0fca      	lsrs	r2, r1, #31
 8001844:	004b      	lsls	r3, r1, #1
 8001846:	0004      	movs	r4, r0
 8001848:	4693      	mov	fp, r2
 800184a:	b087      	sub	sp, #28
 800184c:	0d5b      	lsrs	r3, r3, #21
 800184e:	d100      	bne.n	8001852 <__aeabi_dmul+0x26>
 8001850:	e0d5      	b.n	80019fe <__aeabi_dmul+0x1d2>
 8001852:	4abb      	ldr	r2, [pc, #748]	@ (8001b40 <__aeabi_dmul+0x314>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d100      	bne.n	800185a <__aeabi_dmul+0x2e>
 8001858:	e0f8      	b.n	8001a4c <__aeabi_dmul+0x220>
 800185a:	4651      	mov	r1, sl
 800185c:	0f42      	lsrs	r2, r0, #29
 800185e:	00c9      	lsls	r1, r1, #3
 8001860:	430a      	orrs	r2, r1
 8001862:	2180      	movs	r1, #128	@ 0x80
 8001864:	0409      	lsls	r1, r1, #16
 8001866:	4311      	orrs	r1, r2
 8001868:	00c2      	lsls	r2, r0, #3
 800186a:	4691      	mov	r9, r2
 800186c:	4ab5      	ldr	r2, [pc, #724]	@ (8001b44 <__aeabi_dmul+0x318>)
 800186e:	468a      	mov	sl, r1
 8001870:	189d      	adds	r5, r3, r2
 8001872:	2300      	movs	r3, #0
 8001874:	4698      	mov	r8, r3
 8001876:	9302      	str	r3, [sp, #8]
 8001878:	033c      	lsls	r4, r7, #12
 800187a:	007b      	lsls	r3, r7, #1
 800187c:	0ffa      	lsrs	r2, r7, #31
 800187e:	0030      	movs	r0, r6
 8001880:	0b24      	lsrs	r4, r4, #12
 8001882:	0d5b      	lsrs	r3, r3, #21
 8001884:	9200      	str	r2, [sp, #0]
 8001886:	d100      	bne.n	800188a <__aeabi_dmul+0x5e>
 8001888:	e096      	b.n	80019b8 <__aeabi_dmul+0x18c>
 800188a:	4aad      	ldr	r2, [pc, #692]	@ (8001b40 <__aeabi_dmul+0x314>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d031      	beq.n	80018f4 <__aeabi_dmul+0xc8>
 8001890:	0f72      	lsrs	r2, r6, #29
 8001892:	00e4      	lsls	r4, r4, #3
 8001894:	4322      	orrs	r2, r4
 8001896:	2480      	movs	r4, #128	@ 0x80
 8001898:	0424      	lsls	r4, r4, #16
 800189a:	4314      	orrs	r4, r2
 800189c:	4aa9      	ldr	r2, [pc, #676]	@ (8001b44 <__aeabi_dmul+0x318>)
 800189e:	00f0      	lsls	r0, r6, #3
 80018a0:	4694      	mov	ip, r2
 80018a2:	4463      	add	r3, ip
 80018a4:	195b      	adds	r3, r3, r5
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	9201      	str	r2, [sp, #4]
 80018aa:	4642      	mov	r2, r8
 80018ac:	2600      	movs	r6, #0
 80018ae:	2a0a      	cmp	r2, #10
 80018b0:	dc42      	bgt.n	8001938 <__aeabi_dmul+0x10c>
 80018b2:	465a      	mov	r2, fp
 80018b4:	9900      	ldr	r1, [sp, #0]
 80018b6:	404a      	eors	r2, r1
 80018b8:	4693      	mov	fp, r2
 80018ba:	4642      	mov	r2, r8
 80018bc:	2a02      	cmp	r2, #2
 80018be:	dc32      	bgt.n	8001926 <__aeabi_dmul+0xfa>
 80018c0:	3a01      	subs	r2, #1
 80018c2:	2a01      	cmp	r2, #1
 80018c4:	d900      	bls.n	80018c8 <__aeabi_dmul+0x9c>
 80018c6:	e149      	b.n	8001b5c <__aeabi_dmul+0x330>
 80018c8:	2e02      	cmp	r6, #2
 80018ca:	d100      	bne.n	80018ce <__aeabi_dmul+0xa2>
 80018cc:	e0ca      	b.n	8001a64 <__aeabi_dmul+0x238>
 80018ce:	2e01      	cmp	r6, #1
 80018d0:	d13d      	bne.n	800194e <__aeabi_dmul+0x122>
 80018d2:	2300      	movs	r3, #0
 80018d4:	2400      	movs	r4, #0
 80018d6:	2200      	movs	r2, #0
 80018d8:	0010      	movs	r0, r2
 80018da:	465a      	mov	r2, fp
 80018dc:	051b      	lsls	r3, r3, #20
 80018de:	4323      	orrs	r3, r4
 80018e0:	07d2      	lsls	r2, r2, #31
 80018e2:	4313      	orrs	r3, r2
 80018e4:	0019      	movs	r1, r3
 80018e6:	b007      	add	sp, #28
 80018e8:	bcf0      	pop	{r4, r5, r6, r7}
 80018ea:	46bb      	mov	fp, r7
 80018ec:	46b2      	mov	sl, r6
 80018ee:	46a9      	mov	r9, r5
 80018f0:	46a0      	mov	r8, r4
 80018f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018f4:	4b92      	ldr	r3, [pc, #584]	@ (8001b40 <__aeabi_dmul+0x314>)
 80018f6:	4326      	orrs	r6, r4
 80018f8:	18eb      	adds	r3, r5, r3
 80018fa:	2e00      	cmp	r6, #0
 80018fc:	d100      	bne.n	8001900 <__aeabi_dmul+0xd4>
 80018fe:	e0bb      	b.n	8001a78 <__aeabi_dmul+0x24c>
 8001900:	2203      	movs	r2, #3
 8001902:	4641      	mov	r1, r8
 8001904:	4311      	orrs	r1, r2
 8001906:	465a      	mov	r2, fp
 8001908:	4688      	mov	r8, r1
 800190a:	9900      	ldr	r1, [sp, #0]
 800190c:	404a      	eors	r2, r1
 800190e:	2180      	movs	r1, #128	@ 0x80
 8001910:	0109      	lsls	r1, r1, #4
 8001912:	468c      	mov	ip, r1
 8001914:	0029      	movs	r1, r5
 8001916:	4461      	add	r1, ip
 8001918:	9101      	str	r1, [sp, #4]
 800191a:	4641      	mov	r1, r8
 800191c:	290a      	cmp	r1, #10
 800191e:	dd00      	ble.n	8001922 <__aeabi_dmul+0xf6>
 8001920:	e233      	b.n	8001d8a <__aeabi_dmul+0x55e>
 8001922:	4693      	mov	fp, r2
 8001924:	2603      	movs	r6, #3
 8001926:	4642      	mov	r2, r8
 8001928:	2701      	movs	r7, #1
 800192a:	4097      	lsls	r7, r2
 800192c:	21a6      	movs	r1, #166	@ 0xa6
 800192e:	003a      	movs	r2, r7
 8001930:	00c9      	lsls	r1, r1, #3
 8001932:	400a      	ands	r2, r1
 8001934:	420f      	tst	r7, r1
 8001936:	d031      	beq.n	800199c <__aeabi_dmul+0x170>
 8001938:	9e02      	ldr	r6, [sp, #8]
 800193a:	2e02      	cmp	r6, #2
 800193c:	d100      	bne.n	8001940 <__aeabi_dmul+0x114>
 800193e:	e235      	b.n	8001dac <__aeabi_dmul+0x580>
 8001940:	2e03      	cmp	r6, #3
 8001942:	d100      	bne.n	8001946 <__aeabi_dmul+0x11a>
 8001944:	e1d2      	b.n	8001cec <__aeabi_dmul+0x4c0>
 8001946:	4654      	mov	r4, sl
 8001948:	4648      	mov	r0, r9
 800194a:	2e01      	cmp	r6, #1
 800194c:	d0c1      	beq.n	80018d2 <__aeabi_dmul+0xa6>
 800194e:	9a01      	ldr	r2, [sp, #4]
 8001950:	4b7d      	ldr	r3, [pc, #500]	@ (8001b48 <__aeabi_dmul+0x31c>)
 8001952:	4694      	mov	ip, r2
 8001954:	4463      	add	r3, ip
 8001956:	2b00      	cmp	r3, #0
 8001958:	dc00      	bgt.n	800195c <__aeabi_dmul+0x130>
 800195a:	e0c0      	b.n	8001ade <__aeabi_dmul+0x2b2>
 800195c:	0742      	lsls	r2, r0, #29
 800195e:	d009      	beq.n	8001974 <__aeabi_dmul+0x148>
 8001960:	220f      	movs	r2, #15
 8001962:	4002      	ands	r2, r0
 8001964:	2a04      	cmp	r2, #4
 8001966:	d005      	beq.n	8001974 <__aeabi_dmul+0x148>
 8001968:	1d02      	adds	r2, r0, #4
 800196a:	4282      	cmp	r2, r0
 800196c:	4180      	sbcs	r0, r0
 800196e:	4240      	negs	r0, r0
 8001970:	1824      	adds	r4, r4, r0
 8001972:	0010      	movs	r0, r2
 8001974:	01e2      	lsls	r2, r4, #7
 8001976:	d506      	bpl.n	8001986 <__aeabi_dmul+0x15a>
 8001978:	4b74      	ldr	r3, [pc, #464]	@ (8001b4c <__aeabi_dmul+0x320>)
 800197a:	9a01      	ldr	r2, [sp, #4]
 800197c:	401c      	ands	r4, r3
 800197e:	2380      	movs	r3, #128	@ 0x80
 8001980:	4694      	mov	ip, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	4463      	add	r3, ip
 8001986:	4a72      	ldr	r2, [pc, #456]	@ (8001b50 <__aeabi_dmul+0x324>)
 8001988:	4293      	cmp	r3, r2
 800198a:	dc6b      	bgt.n	8001a64 <__aeabi_dmul+0x238>
 800198c:	0762      	lsls	r2, r4, #29
 800198e:	08c0      	lsrs	r0, r0, #3
 8001990:	0264      	lsls	r4, r4, #9
 8001992:	055b      	lsls	r3, r3, #21
 8001994:	4302      	orrs	r2, r0
 8001996:	0b24      	lsrs	r4, r4, #12
 8001998:	0d5b      	lsrs	r3, r3, #21
 800199a:	e79d      	b.n	80018d8 <__aeabi_dmul+0xac>
 800199c:	2190      	movs	r1, #144	@ 0x90
 800199e:	0089      	lsls	r1, r1, #2
 80019a0:	420f      	tst	r7, r1
 80019a2:	d163      	bne.n	8001a6c <__aeabi_dmul+0x240>
 80019a4:	2288      	movs	r2, #136	@ 0x88
 80019a6:	423a      	tst	r2, r7
 80019a8:	d100      	bne.n	80019ac <__aeabi_dmul+0x180>
 80019aa:	e0d7      	b.n	8001b5c <__aeabi_dmul+0x330>
 80019ac:	9b00      	ldr	r3, [sp, #0]
 80019ae:	46a2      	mov	sl, r4
 80019b0:	469b      	mov	fp, r3
 80019b2:	4681      	mov	r9, r0
 80019b4:	9602      	str	r6, [sp, #8]
 80019b6:	e7bf      	b.n	8001938 <__aeabi_dmul+0x10c>
 80019b8:	0023      	movs	r3, r4
 80019ba:	4333      	orrs	r3, r6
 80019bc:	d100      	bne.n	80019c0 <__aeabi_dmul+0x194>
 80019be:	e07f      	b.n	8001ac0 <__aeabi_dmul+0x294>
 80019c0:	2c00      	cmp	r4, #0
 80019c2:	d100      	bne.n	80019c6 <__aeabi_dmul+0x19a>
 80019c4:	e1ad      	b.n	8001d22 <__aeabi_dmul+0x4f6>
 80019c6:	0020      	movs	r0, r4
 80019c8:	f000 fe8c 	bl	80026e4 <__clzsi2>
 80019cc:	0002      	movs	r2, r0
 80019ce:	0003      	movs	r3, r0
 80019d0:	3a0b      	subs	r2, #11
 80019d2:	201d      	movs	r0, #29
 80019d4:	0019      	movs	r1, r3
 80019d6:	1a82      	subs	r2, r0, r2
 80019d8:	0030      	movs	r0, r6
 80019da:	3908      	subs	r1, #8
 80019dc:	40d0      	lsrs	r0, r2
 80019de:	408c      	lsls	r4, r1
 80019e0:	4304      	orrs	r4, r0
 80019e2:	0030      	movs	r0, r6
 80019e4:	4088      	lsls	r0, r1
 80019e6:	4a5b      	ldr	r2, [pc, #364]	@ (8001b54 <__aeabi_dmul+0x328>)
 80019e8:	1aeb      	subs	r3, r5, r3
 80019ea:	4694      	mov	ip, r2
 80019ec:	4463      	add	r3, ip
 80019ee:	1c5a      	adds	r2, r3, #1
 80019f0:	9201      	str	r2, [sp, #4]
 80019f2:	4642      	mov	r2, r8
 80019f4:	2600      	movs	r6, #0
 80019f6:	2a0a      	cmp	r2, #10
 80019f8:	dc00      	bgt.n	80019fc <__aeabi_dmul+0x1d0>
 80019fa:	e75a      	b.n	80018b2 <__aeabi_dmul+0x86>
 80019fc:	e79c      	b.n	8001938 <__aeabi_dmul+0x10c>
 80019fe:	4653      	mov	r3, sl
 8001a00:	4303      	orrs	r3, r0
 8001a02:	4699      	mov	r9, r3
 8001a04:	d054      	beq.n	8001ab0 <__aeabi_dmul+0x284>
 8001a06:	4653      	mov	r3, sl
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d100      	bne.n	8001a0e <__aeabi_dmul+0x1e2>
 8001a0c:	e177      	b.n	8001cfe <__aeabi_dmul+0x4d2>
 8001a0e:	4650      	mov	r0, sl
 8001a10:	f000 fe68 	bl	80026e4 <__clzsi2>
 8001a14:	230b      	movs	r3, #11
 8001a16:	425b      	negs	r3, r3
 8001a18:	469c      	mov	ip, r3
 8001a1a:	0002      	movs	r2, r0
 8001a1c:	4484      	add	ip, r0
 8001a1e:	0011      	movs	r1, r2
 8001a20:	4650      	mov	r0, sl
 8001a22:	3908      	subs	r1, #8
 8001a24:	4088      	lsls	r0, r1
 8001a26:	231d      	movs	r3, #29
 8001a28:	4680      	mov	r8, r0
 8001a2a:	4660      	mov	r0, ip
 8001a2c:	1a1b      	subs	r3, r3, r0
 8001a2e:	0020      	movs	r0, r4
 8001a30:	40d8      	lsrs	r0, r3
 8001a32:	0003      	movs	r3, r0
 8001a34:	4640      	mov	r0, r8
 8001a36:	4303      	orrs	r3, r0
 8001a38:	469a      	mov	sl, r3
 8001a3a:	0023      	movs	r3, r4
 8001a3c:	408b      	lsls	r3, r1
 8001a3e:	4699      	mov	r9, r3
 8001a40:	2300      	movs	r3, #0
 8001a42:	4d44      	ldr	r5, [pc, #272]	@ (8001b54 <__aeabi_dmul+0x328>)
 8001a44:	4698      	mov	r8, r3
 8001a46:	1aad      	subs	r5, r5, r2
 8001a48:	9302      	str	r3, [sp, #8]
 8001a4a:	e715      	b.n	8001878 <__aeabi_dmul+0x4c>
 8001a4c:	4652      	mov	r2, sl
 8001a4e:	4302      	orrs	r2, r0
 8001a50:	4691      	mov	r9, r2
 8001a52:	d126      	bne.n	8001aa2 <__aeabi_dmul+0x276>
 8001a54:	2200      	movs	r2, #0
 8001a56:	001d      	movs	r5, r3
 8001a58:	2302      	movs	r3, #2
 8001a5a:	4692      	mov	sl, r2
 8001a5c:	3208      	adds	r2, #8
 8001a5e:	4690      	mov	r8, r2
 8001a60:	9302      	str	r3, [sp, #8]
 8001a62:	e709      	b.n	8001878 <__aeabi_dmul+0x4c>
 8001a64:	2400      	movs	r4, #0
 8001a66:	2200      	movs	r2, #0
 8001a68:	4b35      	ldr	r3, [pc, #212]	@ (8001b40 <__aeabi_dmul+0x314>)
 8001a6a:	e735      	b.n	80018d8 <__aeabi_dmul+0xac>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	2480      	movs	r4, #128	@ 0x80
 8001a70:	469b      	mov	fp, r3
 8001a72:	0324      	lsls	r4, r4, #12
 8001a74:	4b32      	ldr	r3, [pc, #200]	@ (8001b40 <__aeabi_dmul+0x314>)
 8001a76:	e72f      	b.n	80018d8 <__aeabi_dmul+0xac>
 8001a78:	2202      	movs	r2, #2
 8001a7a:	4641      	mov	r1, r8
 8001a7c:	4311      	orrs	r1, r2
 8001a7e:	2280      	movs	r2, #128	@ 0x80
 8001a80:	0112      	lsls	r2, r2, #4
 8001a82:	4694      	mov	ip, r2
 8001a84:	002a      	movs	r2, r5
 8001a86:	4462      	add	r2, ip
 8001a88:	4688      	mov	r8, r1
 8001a8a:	9201      	str	r2, [sp, #4]
 8001a8c:	290a      	cmp	r1, #10
 8001a8e:	dd00      	ble.n	8001a92 <__aeabi_dmul+0x266>
 8001a90:	e752      	b.n	8001938 <__aeabi_dmul+0x10c>
 8001a92:	465a      	mov	r2, fp
 8001a94:	2000      	movs	r0, #0
 8001a96:	9900      	ldr	r1, [sp, #0]
 8001a98:	0004      	movs	r4, r0
 8001a9a:	404a      	eors	r2, r1
 8001a9c:	4693      	mov	fp, r2
 8001a9e:	2602      	movs	r6, #2
 8001aa0:	e70b      	b.n	80018ba <__aeabi_dmul+0x8e>
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	001d      	movs	r5, r3
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	4681      	mov	r9, r0
 8001aaa:	4690      	mov	r8, r2
 8001aac:	9302      	str	r3, [sp, #8]
 8001aae:	e6e3      	b.n	8001878 <__aeabi_dmul+0x4c>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	469a      	mov	sl, r3
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	4698      	mov	r8, r3
 8001ab8:	3b03      	subs	r3, #3
 8001aba:	2500      	movs	r5, #0
 8001abc:	9302      	str	r3, [sp, #8]
 8001abe:	e6db      	b.n	8001878 <__aeabi_dmul+0x4c>
 8001ac0:	4642      	mov	r2, r8
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	002b      	movs	r3, r5
 8001ac8:	4690      	mov	r8, r2
 8001aca:	1c5a      	adds	r2, r3, #1
 8001acc:	9201      	str	r2, [sp, #4]
 8001ace:	4642      	mov	r2, r8
 8001ad0:	2400      	movs	r4, #0
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	2601      	movs	r6, #1
 8001ad6:	2a0a      	cmp	r2, #10
 8001ad8:	dc00      	bgt.n	8001adc <__aeabi_dmul+0x2b0>
 8001ada:	e6ea      	b.n	80018b2 <__aeabi_dmul+0x86>
 8001adc:	e72c      	b.n	8001938 <__aeabi_dmul+0x10c>
 8001ade:	2201      	movs	r2, #1
 8001ae0:	1ad2      	subs	r2, r2, r3
 8001ae2:	2a38      	cmp	r2, #56	@ 0x38
 8001ae4:	dd00      	ble.n	8001ae8 <__aeabi_dmul+0x2bc>
 8001ae6:	e6f4      	b.n	80018d2 <__aeabi_dmul+0xa6>
 8001ae8:	2a1f      	cmp	r2, #31
 8001aea:	dc00      	bgt.n	8001aee <__aeabi_dmul+0x2c2>
 8001aec:	e12a      	b.n	8001d44 <__aeabi_dmul+0x518>
 8001aee:	211f      	movs	r1, #31
 8001af0:	4249      	negs	r1, r1
 8001af2:	1acb      	subs	r3, r1, r3
 8001af4:	0021      	movs	r1, r4
 8001af6:	40d9      	lsrs	r1, r3
 8001af8:	000b      	movs	r3, r1
 8001afa:	2a20      	cmp	r2, #32
 8001afc:	d005      	beq.n	8001b0a <__aeabi_dmul+0x2de>
 8001afe:	4a16      	ldr	r2, [pc, #88]	@ (8001b58 <__aeabi_dmul+0x32c>)
 8001b00:	9d01      	ldr	r5, [sp, #4]
 8001b02:	4694      	mov	ip, r2
 8001b04:	4465      	add	r5, ip
 8001b06:	40ac      	lsls	r4, r5
 8001b08:	4320      	orrs	r0, r4
 8001b0a:	1e42      	subs	r2, r0, #1
 8001b0c:	4190      	sbcs	r0, r2
 8001b0e:	4318      	orrs	r0, r3
 8001b10:	2307      	movs	r3, #7
 8001b12:	0019      	movs	r1, r3
 8001b14:	2400      	movs	r4, #0
 8001b16:	4001      	ands	r1, r0
 8001b18:	4203      	tst	r3, r0
 8001b1a:	d00c      	beq.n	8001b36 <__aeabi_dmul+0x30a>
 8001b1c:	230f      	movs	r3, #15
 8001b1e:	4003      	ands	r3, r0
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d100      	bne.n	8001b26 <__aeabi_dmul+0x2fa>
 8001b24:	e140      	b.n	8001da8 <__aeabi_dmul+0x57c>
 8001b26:	1d03      	adds	r3, r0, #4
 8001b28:	4283      	cmp	r3, r0
 8001b2a:	41a4      	sbcs	r4, r4
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	4264      	negs	r4, r4
 8001b30:	0761      	lsls	r1, r4, #29
 8001b32:	0264      	lsls	r4, r4, #9
 8001b34:	0b24      	lsrs	r4, r4, #12
 8001b36:	08c2      	lsrs	r2, r0, #3
 8001b38:	2300      	movs	r3, #0
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	e6cc      	b.n	80018d8 <__aeabi_dmul+0xac>
 8001b3e:	46c0      	nop			@ (mov r8, r8)
 8001b40:	000007ff 	.word	0x000007ff
 8001b44:	fffffc01 	.word	0xfffffc01
 8001b48:	000003ff 	.word	0x000003ff
 8001b4c:	feffffff 	.word	0xfeffffff
 8001b50:	000007fe 	.word	0x000007fe
 8001b54:	fffffc0d 	.word	0xfffffc0d
 8001b58:	0000043e 	.word	0x0000043e
 8001b5c:	4649      	mov	r1, r9
 8001b5e:	464a      	mov	r2, r9
 8001b60:	0409      	lsls	r1, r1, #16
 8001b62:	0c09      	lsrs	r1, r1, #16
 8001b64:	000d      	movs	r5, r1
 8001b66:	0c16      	lsrs	r6, r2, #16
 8001b68:	0c02      	lsrs	r2, r0, #16
 8001b6a:	0400      	lsls	r0, r0, #16
 8001b6c:	0c00      	lsrs	r0, r0, #16
 8001b6e:	4345      	muls	r5, r0
 8001b70:	46ac      	mov	ip, r5
 8001b72:	0005      	movs	r5, r0
 8001b74:	4375      	muls	r5, r6
 8001b76:	46a8      	mov	r8, r5
 8001b78:	0015      	movs	r5, r2
 8001b7a:	000f      	movs	r7, r1
 8001b7c:	4375      	muls	r5, r6
 8001b7e:	9200      	str	r2, [sp, #0]
 8001b80:	9502      	str	r5, [sp, #8]
 8001b82:	002a      	movs	r2, r5
 8001b84:	9d00      	ldr	r5, [sp, #0]
 8001b86:	436f      	muls	r7, r5
 8001b88:	4665      	mov	r5, ip
 8001b8a:	0c2d      	lsrs	r5, r5, #16
 8001b8c:	46a9      	mov	r9, r5
 8001b8e:	4447      	add	r7, r8
 8001b90:	444f      	add	r7, r9
 8001b92:	45b8      	cmp	r8, r7
 8001b94:	d905      	bls.n	8001ba2 <__aeabi_dmul+0x376>
 8001b96:	0015      	movs	r5, r2
 8001b98:	2280      	movs	r2, #128	@ 0x80
 8001b9a:	0252      	lsls	r2, r2, #9
 8001b9c:	4690      	mov	r8, r2
 8001b9e:	4445      	add	r5, r8
 8001ba0:	9502      	str	r5, [sp, #8]
 8001ba2:	0c3d      	lsrs	r5, r7, #16
 8001ba4:	9503      	str	r5, [sp, #12]
 8001ba6:	4665      	mov	r5, ip
 8001ba8:	042d      	lsls	r5, r5, #16
 8001baa:	043f      	lsls	r7, r7, #16
 8001bac:	0c2d      	lsrs	r5, r5, #16
 8001bae:	46ac      	mov	ip, r5
 8001bb0:	003d      	movs	r5, r7
 8001bb2:	4465      	add	r5, ip
 8001bb4:	9504      	str	r5, [sp, #16]
 8001bb6:	0c25      	lsrs	r5, r4, #16
 8001bb8:	0424      	lsls	r4, r4, #16
 8001bba:	0c24      	lsrs	r4, r4, #16
 8001bbc:	46ac      	mov	ip, r5
 8001bbe:	0025      	movs	r5, r4
 8001bc0:	4375      	muls	r5, r6
 8001bc2:	46a8      	mov	r8, r5
 8001bc4:	4665      	mov	r5, ip
 8001bc6:	000f      	movs	r7, r1
 8001bc8:	4369      	muls	r1, r5
 8001bca:	4441      	add	r1, r8
 8001bcc:	4689      	mov	r9, r1
 8001bce:	4367      	muls	r7, r4
 8001bd0:	0c39      	lsrs	r1, r7, #16
 8001bd2:	4449      	add	r1, r9
 8001bd4:	436e      	muls	r6, r5
 8001bd6:	4588      	cmp	r8, r1
 8001bd8:	d903      	bls.n	8001be2 <__aeabi_dmul+0x3b6>
 8001bda:	2280      	movs	r2, #128	@ 0x80
 8001bdc:	0252      	lsls	r2, r2, #9
 8001bde:	4690      	mov	r8, r2
 8001be0:	4446      	add	r6, r8
 8001be2:	0c0d      	lsrs	r5, r1, #16
 8001be4:	46a8      	mov	r8, r5
 8001be6:	0035      	movs	r5, r6
 8001be8:	4445      	add	r5, r8
 8001bea:	9505      	str	r5, [sp, #20]
 8001bec:	9d03      	ldr	r5, [sp, #12]
 8001bee:	043f      	lsls	r7, r7, #16
 8001bf0:	46a8      	mov	r8, r5
 8001bf2:	0c3f      	lsrs	r7, r7, #16
 8001bf4:	0409      	lsls	r1, r1, #16
 8001bf6:	19c9      	adds	r1, r1, r7
 8001bf8:	4488      	add	r8, r1
 8001bfa:	4645      	mov	r5, r8
 8001bfc:	9503      	str	r5, [sp, #12]
 8001bfe:	4655      	mov	r5, sl
 8001c00:	042e      	lsls	r6, r5, #16
 8001c02:	0c36      	lsrs	r6, r6, #16
 8001c04:	0c2f      	lsrs	r7, r5, #16
 8001c06:	0035      	movs	r5, r6
 8001c08:	4345      	muls	r5, r0
 8001c0a:	4378      	muls	r0, r7
 8001c0c:	4681      	mov	r9, r0
 8001c0e:	0038      	movs	r0, r7
 8001c10:	46a8      	mov	r8, r5
 8001c12:	0c2d      	lsrs	r5, r5, #16
 8001c14:	46aa      	mov	sl, r5
 8001c16:	9a00      	ldr	r2, [sp, #0]
 8001c18:	4350      	muls	r0, r2
 8001c1a:	4372      	muls	r2, r6
 8001c1c:	444a      	add	r2, r9
 8001c1e:	4452      	add	r2, sl
 8001c20:	4591      	cmp	r9, r2
 8001c22:	d903      	bls.n	8001c2c <__aeabi_dmul+0x400>
 8001c24:	2580      	movs	r5, #128	@ 0x80
 8001c26:	026d      	lsls	r5, r5, #9
 8001c28:	46a9      	mov	r9, r5
 8001c2a:	4448      	add	r0, r9
 8001c2c:	0c15      	lsrs	r5, r2, #16
 8001c2e:	46a9      	mov	r9, r5
 8001c30:	4645      	mov	r5, r8
 8001c32:	042d      	lsls	r5, r5, #16
 8001c34:	0c2d      	lsrs	r5, r5, #16
 8001c36:	46a8      	mov	r8, r5
 8001c38:	4665      	mov	r5, ip
 8001c3a:	437d      	muls	r5, r7
 8001c3c:	0412      	lsls	r2, r2, #16
 8001c3e:	4448      	add	r0, r9
 8001c40:	4490      	add	r8, r2
 8001c42:	46a9      	mov	r9, r5
 8001c44:	0032      	movs	r2, r6
 8001c46:	4665      	mov	r5, ip
 8001c48:	4362      	muls	r2, r4
 8001c4a:	436e      	muls	r6, r5
 8001c4c:	437c      	muls	r4, r7
 8001c4e:	0c17      	lsrs	r7, r2, #16
 8001c50:	1936      	adds	r6, r6, r4
 8001c52:	19bf      	adds	r7, r7, r6
 8001c54:	42bc      	cmp	r4, r7
 8001c56:	d903      	bls.n	8001c60 <__aeabi_dmul+0x434>
 8001c58:	2480      	movs	r4, #128	@ 0x80
 8001c5a:	0264      	lsls	r4, r4, #9
 8001c5c:	46a4      	mov	ip, r4
 8001c5e:	44e1      	add	r9, ip
 8001c60:	9c02      	ldr	r4, [sp, #8]
 8001c62:	9e03      	ldr	r6, [sp, #12]
 8001c64:	46a4      	mov	ip, r4
 8001c66:	9d05      	ldr	r5, [sp, #20]
 8001c68:	4466      	add	r6, ip
 8001c6a:	428e      	cmp	r6, r1
 8001c6c:	4189      	sbcs	r1, r1
 8001c6e:	46ac      	mov	ip, r5
 8001c70:	0412      	lsls	r2, r2, #16
 8001c72:	043c      	lsls	r4, r7, #16
 8001c74:	0c12      	lsrs	r2, r2, #16
 8001c76:	18a2      	adds	r2, r4, r2
 8001c78:	4462      	add	r2, ip
 8001c7a:	4249      	negs	r1, r1
 8001c7c:	1854      	adds	r4, r2, r1
 8001c7e:	4446      	add	r6, r8
 8001c80:	46a4      	mov	ip, r4
 8001c82:	4546      	cmp	r6, r8
 8001c84:	41a4      	sbcs	r4, r4
 8001c86:	4682      	mov	sl, r0
 8001c88:	4264      	negs	r4, r4
 8001c8a:	46a0      	mov	r8, r4
 8001c8c:	42aa      	cmp	r2, r5
 8001c8e:	4192      	sbcs	r2, r2
 8001c90:	458c      	cmp	ip, r1
 8001c92:	4189      	sbcs	r1, r1
 8001c94:	44e2      	add	sl, ip
 8001c96:	44d0      	add	r8, sl
 8001c98:	4249      	negs	r1, r1
 8001c9a:	4252      	negs	r2, r2
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	45a0      	cmp	r8, r4
 8001ca0:	41a4      	sbcs	r4, r4
 8001ca2:	4582      	cmp	sl, r0
 8001ca4:	4189      	sbcs	r1, r1
 8001ca6:	4264      	negs	r4, r4
 8001ca8:	4249      	negs	r1, r1
 8001caa:	430c      	orrs	r4, r1
 8001cac:	4641      	mov	r1, r8
 8001cae:	0c3f      	lsrs	r7, r7, #16
 8001cb0:	19d2      	adds	r2, r2, r7
 8001cb2:	1912      	adds	r2, r2, r4
 8001cb4:	0dcc      	lsrs	r4, r1, #23
 8001cb6:	9904      	ldr	r1, [sp, #16]
 8001cb8:	0270      	lsls	r0, r6, #9
 8001cba:	4308      	orrs	r0, r1
 8001cbc:	1e41      	subs	r1, r0, #1
 8001cbe:	4188      	sbcs	r0, r1
 8001cc0:	4641      	mov	r1, r8
 8001cc2:	444a      	add	r2, r9
 8001cc4:	0df6      	lsrs	r6, r6, #23
 8001cc6:	0252      	lsls	r2, r2, #9
 8001cc8:	4330      	orrs	r0, r6
 8001cca:	0249      	lsls	r1, r1, #9
 8001ccc:	4314      	orrs	r4, r2
 8001cce:	4308      	orrs	r0, r1
 8001cd0:	01d2      	lsls	r2, r2, #7
 8001cd2:	d535      	bpl.n	8001d40 <__aeabi_dmul+0x514>
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	0843      	lsrs	r3, r0, #1
 8001cd8:	4002      	ands	r2, r0
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	07e0      	lsls	r0, r4, #31
 8001cde:	4318      	orrs	r0, r3
 8001ce0:	0864      	lsrs	r4, r4, #1
 8001ce2:	e634      	b.n	800194e <__aeabi_dmul+0x122>
 8001ce4:	9b00      	ldr	r3, [sp, #0]
 8001ce6:	46a2      	mov	sl, r4
 8001ce8:	469b      	mov	fp, r3
 8001cea:	4681      	mov	r9, r0
 8001cec:	2480      	movs	r4, #128	@ 0x80
 8001cee:	4653      	mov	r3, sl
 8001cf0:	0324      	lsls	r4, r4, #12
 8001cf2:	431c      	orrs	r4, r3
 8001cf4:	0324      	lsls	r4, r4, #12
 8001cf6:	464a      	mov	r2, r9
 8001cf8:	4b2e      	ldr	r3, [pc, #184]	@ (8001db4 <__aeabi_dmul+0x588>)
 8001cfa:	0b24      	lsrs	r4, r4, #12
 8001cfc:	e5ec      	b.n	80018d8 <__aeabi_dmul+0xac>
 8001cfe:	f000 fcf1 	bl	80026e4 <__clzsi2>
 8001d02:	2315      	movs	r3, #21
 8001d04:	469c      	mov	ip, r3
 8001d06:	4484      	add	ip, r0
 8001d08:	0002      	movs	r2, r0
 8001d0a:	4663      	mov	r3, ip
 8001d0c:	3220      	adds	r2, #32
 8001d0e:	2b1c      	cmp	r3, #28
 8001d10:	dc00      	bgt.n	8001d14 <__aeabi_dmul+0x4e8>
 8001d12:	e684      	b.n	8001a1e <__aeabi_dmul+0x1f2>
 8001d14:	2300      	movs	r3, #0
 8001d16:	4699      	mov	r9, r3
 8001d18:	0023      	movs	r3, r4
 8001d1a:	3808      	subs	r0, #8
 8001d1c:	4083      	lsls	r3, r0
 8001d1e:	469a      	mov	sl, r3
 8001d20:	e68e      	b.n	8001a40 <__aeabi_dmul+0x214>
 8001d22:	f000 fcdf 	bl	80026e4 <__clzsi2>
 8001d26:	0002      	movs	r2, r0
 8001d28:	0003      	movs	r3, r0
 8001d2a:	3215      	adds	r2, #21
 8001d2c:	3320      	adds	r3, #32
 8001d2e:	2a1c      	cmp	r2, #28
 8001d30:	dc00      	bgt.n	8001d34 <__aeabi_dmul+0x508>
 8001d32:	e64e      	b.n	80019d2 <__aeabi_dmul+0x1a6>
 8001d34:	0002      	movs	r2, r0
 8001d36:	0034      	movs	r4, r6
 8001d38:	3a08      	subs	r2, #8
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	4094      	lsls	r4, r2
 8001d3e:	e652      	b.n	80019e6 <__aeabi_dmul+0x1ba>
 8001d40:	9301      	str	r3, [sp, #4]
 8001d42:	e604      	b.n	800194e <__aeabi_dmul+0x122>
 8001d44:	4b1c      	ldr	r3, [pc, #112]	@ (8001db8 <__aeabi_dmul+0x58c>)
 8001d46:	0021      	movs	r1, r4
 8001d48:	469c      	mov	ip, r3
 8001d4a:	0003      	movs	r3, r0
 8001d4c:	9d01      	ldr	r5, [sp, #4]
 8001d4e:	40d3      	lsrs	r3, r2
 8001d50:	4465      	add	r5, ip
 8001d52:	40a9      	lsls	r1, r5
 8001d54:	4319      	orrs	r1, r3
 8001d56:	0003      	movs	r3, r0
 8001d58:	40ab      	lsls	r3, r5
 8001d5a:	1e58      	subs	r0, r3, #1
 8001d5c:	4183      	sbcs	r3, r0
 8001d5e:	4319      	orrs	r1, r3
 8001d60:	0008      	movs	r0, r1
 8001d62:	40d4      	lsrs	r4, r2
 8001d64:	074b      	lsls	r3, r1, #29
 8001d66:	d009      	beq.n	8001d7c <__aeabi_dmul+0x550>
 8001d68:	230f      	movs	r3, #15
 8001d6a:	400b      	ands	r3, r1
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d005      	beq.n	8001d7c <__aeabi_dmul+0x550>
 8001d70:	1d0b      	adds	r3, r1, #4
 8001d72:	428b      	cmp	r3, r1
 8001d74:	4180      	sbcs	r0, r0
 8001d76:	4240      	negs	r0, r0
 8001d78:	1824      	adds	r4, r4, r0
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	0223      	lsls	r3, r4, #8
 8001d7e:	d400      	bmi.n	8001d82 <__aeabi_dmul+0x556>
 8001d80:	e6d6      	b.n	8001b30 <__aeabi_dmul+0x304>
 8001d82:	2301      	movs	r3, #1
 8001d84:	2400      	movs	r4, #0
 8001d86:	2200      	movs	r2, #0
 8001d88:	e5a6      	b.n	80018d8 <__aeabi_dmul+0xac>
 8001d8a:	290f      	cmp	r1, #15
 8001d8c:	d1aa      	bne.n	8001ce4 <__aeabi_dmul+0x4b8>
 8001d8e:	2380      	movs	r3, #128	@ 0x80
 8001d90:	4652      	mov	r2, sl
 8001d92:	031b      	lsls	r3, r3, #12
 8001d94:	421a      	tst	r2, r3
 8001d96:	d0a9      	beq.n	8001cec <__aeabi_dmul+0x4c0>
 8001d98:	421c      	tst	r4, r3
 8001d9a:	d1a7      	bne.n	8001cec <__aeabi_dmul+0x4c0>
 8001d9c:	431c      	orrs	r4, r3
 8001d9e:	9b00      	ldr	r3, [sp, #0]
 8001da0:	0002      	movs	r2, r0
 8001da2:	469b      	mov	fp, r3
 8001da4:	4b03      	ldr	r3, [pc, #12]	@ (8001db4 <__aeabi_dmul+0x588>)
 8001da6:	e597      	b.n	80018d8 <__aeabi_dmul+0xac>
 8001da8:	2400      	movs	r4, #0
 8001daa:	e6c1      	b.n	8001b30 <__aeabi_dmul+0x304>
 8001dac:	2400      	movs	r4, #0
 8001dae:	4b01      	ldr	r3, [pc, #4]	@ (8001db4 <__aeabi_dmul+0x588>)
 8001db0:	0022      	movs	r2, r4
 8001db2:	e591      	b.n	80018d8 <__aeabi_dmul+0xac>
 8001db4:	000007ff 	.word	0x000007ff
 8001db8:	0000041e 	.word	0x0000041e

08001dbc <__aeabi_dsub>:
 8001dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dbe:	464e      	mov	r6, r9
 8001dc0:	4645      	mov	r5, r8
 8001dc2:	46de      	mov	lr, fp
 8001dc4:	4657      	mov	r7, sl
 8001dc6:	b5e0      	push	{r5, r6, r7, lr}
 8001dc8:	b085      	sub	sp, #20
 8001dca:	9000      	str	r0, [sp, #0]
 8001dcc:	9101      	str	r1, [sp, #4]
 8001dce:	030c      	lsls	r4, r1, #12
 8001dd0:	004f      	lsls	r7, r1, #1
 8001dd2:	0fce      	lsrs	r6, r1, #31
 8001dd4:	0a61      	lsrs	r1, r4, #9
 8001dd6:	9c00      	ldr	r4, [sp, #0]
 8001dd8:	46b0      	mov	r8, r6
 8001dda:	0f64      	lsrs	r4, r4, #29
 8001ddc:	430c      	orrs	r4, r1
 8001dde:	9900      	ldr	r1, [sp, #0]
 8001de0:	0d7f      	lsrs	r7, r7, #21
 8001de2:	00c8      	lsls	r0, r1, #3
 8001de4:	0011      	movs	r1, r2
 8001de6:	001a      	movs	r2, r3
 8001de8:	031b      	lsls	r3, r3, #12
 8001dea:	469c      	mov	ip, r3
 8001dec:	9100      	str	r1, [sp, #0]
 8001dee:	9201      	str	r2, [sp, #4]
 8001df0:	0051      	lsls	r1, r2, #1
 8001df2:	0d4b      	lsrs	r3, r1, #21
 8001df4:	4699      	mov	r9, r3
 8001df6:	9b01      	ldr	r3, [sp, #4]
 8001df8:	9d00      	ldr	r5, [sp, #0]
 8001dfa:	0fd9      	lsrs	r1, r3, #31
 8001dfc:	4663      	mov	r3, ip
 8001dfe:	0f6a      	lsrs	r2, r5, #29
 8001e00:	0a5b      	lsrs	r3, r3, #9
 8001e02:	4313      	orrs	r3, r2
 8001e04:	00ea      	lsls	r2, r5, #3
 8001e06:	4694      	mov	ip, r2
 8001e08:	4693      	mov	fp, r2
 8001e0a:	4ac1      	ldr	r2, [pc, #772]	@ (8002110 <__aeabi_dsub+0x354>)
 8001e0c:	9003      	str	r0, [sp, #12]
 8001e0e:	9302      	str	r3, [sp, #8]
 8001e10:	4591      	cmp	r9, r2
 8001e12:	d100      	bne.n	8001e16 <__aeabi_dsub+0x5a>
 8001e14:	e0cd      	b.n	8001fb2 <__aeabi_dsub+0x1f6>
 8001e16:	2501      	movs	r5, #1
 8001e18:	4069      	eors	r1, r5
 8001e1a:	464d      	mov	r5, r9
 8001e1c:	1b7d      	subs	r5, r7, r5
 8001e1e:	46aa      	mov	sl, r5
 8001e20:	428e      	cmp	r6, r1
 8001e22:	d100      	bne.n	8001e26 <__aeabi_dsub+0x6a>
 8001e24:	e080      	b.n	8001f28 <__aeabi_dsub+0x16c>
 8001e26:	2d00      	cmp	r5, #0
 8001e28:	dc00      	bgt.n	8001e2c <__aeabi_dsub+0x70>
 8001e2a:	e335      	b.n	8002498 <__aeabi_dsub+0x6dc>
 8001e2c:	4649      	mov	r1, r9
 8001e2e:	2900      	cmp	r1, #0
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x78>
 8001e32:	e0df      	b.n	8001ff4 <__aeabi_dsub+0x238>
 8001e34:	4297      	cmp	r7, r2
 8001e36:	d100      	bne.n	8001e3a <__aeabi_dsub+0x7e>
 8001e38:	e194      	b.n	8002164 <__aeabi_dsub+0x3a8>
 8001e3a:	4652      	mov	r2, sl
 8001e3c:	2501      	movs	r5, #1
 8001e3e:	2a38      	cmp	r2, #56	@ 0x38
 8001e40:	dc19      	bgt.n	8001e76 <__aeabi_dsub+0xba>
 8001e42:	2280      	movs	r2, #128	@ 0x80
 8001e44:	9b02      	ldr	r3, [sp, #8]
 8001e46:	0412      	lsls	r2, r2, #16
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	9302      	str	r3, [sp, #8]
 8001e4c:	4652      	mov	r2, sl
 8001e4e:	2a1f      	cmp	r2, #31
 8001e50:	dd00      	ble.n	8001e54 <__aeabi_dsub+0x98>
 8001e52:	e1e3      	b.n	800221c <__aeabi_dsub+0x460>
 8001e54:	4653      	mov	r3, sl
 8001e56:	2220      	movs	r2, #32
 8001e58:	4661      	mov	r1, ip
 8001e5a:	9d02      	ldr	r5, [sp, #8]
 8001e5c:	1ad2      	subs	r2, r2, r3
 8001e5e:	4095      	lsls	r5, r2
 8001e60:	40d9      	lsrs	r1, r3
 8001e62:	430d      	orrs	r5, r1
 8001e64:	4661      	mov	r1, ip
 8001e66:	4091      	lsls	r1, r2
 8001e68:	000a      	movs	r2, r1
 8001e6a:	1e51      	subs	r1, r2, #1
 8001e6c:	418a      	sbcs	r2, r1
 8001e6e:	4315      	orrs	r5, r2
 8001e70:	9a02      	ldr	r2, [sp, #8]
 8001e72:	40da      	lsrs	r2, r3
 8001e74:	1aa4      	subs	r4, r4, r2
 8001e76:	1b45      	subs	r5, r0, r5
 8001e78:	42a8      	cmp	r0, r5
 8001e7a:	4180      	sbcs	r0, r0
 8001e7c:	4240      	negs	r0, r0
 8001e7e:	1a24      	subs	r4, r4, r0
 8001e80:	0223      	lsls	r3, r4, #8
 8001e82:	d400      	bmi.n	8001e86 <__aeabi_dsub+0xca>
 8001e84:	e13d      	b.n	8002102 <__aeabi_dsub+0x346>
 8001e86:	0264      	lsls	r4, r4, #9
 8001e88:	0a64      	lsrs	r4, r4, #9
 8001e8a:	2c00      	cmp	r4, #0
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dsub+0xd4>
 8001e8e:	e147      	b.n	8002120 <__aeabi_dsub+0x364>
 8001e90:	0020      	movs	r0, r4
 8001e92:	f000 fc27 	bl	80026e4 <__clzsi2>
 8001e96:	0003      	movs	r3, r0
 8001e98:	3b08      	subs	r3, #8
 8001e9a:	2120      	movs	r1, #32
 8001e9c:	0028      	movs	r0, r5
 8001e9e:	1aca      	subs	r2, r1, r3
 8001ea0:	40d0      	lsrs	r0, r2
 8001ea2:	409c      	lsls	r4, r3
 8001ea4:	0002      	movs	r2, r0
 8001ea6:	409d      	lsls	r5, r3
 8001ea8:	4322      	orrs	r2, r4
 8001eaa:	429f      	cmp	r7, r3
 8001eac:	dd00      	ble.n	8001eb0 <__aeabi_dsub+0xf4>
 8001eae:	e177      	b.n	80021a0 <__aeabi_dsub+0x3e4>
 8001eb0:	1bd8      	subs	r0, r3, r7
 8001eb2:	3001      	adds	r0, #1
 8001eb4:	1a09      	subs	r1, r1, r0
 8001eb6:	002c      	movs	r4, r5
 8001eb8:	408d      	lsls	r5, r1
 8001eba:	40c4      	lsrs	r4, r0
 8001ebc:	1e6b      	subs	r3, r5, #1
 8001ebe:	419d      	sbcs	r5, r3
 8001ec0:	0013      	movs	r3, r2
 8001ec2:	40c2      	lsrs	r2, r0
 8001ec4:	408b      	lsls	r3, r1
 8001ec6:	4325      	orrs	r5, r4
 8001ec8:	2700      	movs	r7, #0
 8001eca:	0014      	movs	r4, r2
 8001ecc:	431d      	orrs	r5, r3
 8001ece:	076b      	lsls	r3, r5, #29
 8001ed0:	d009      	beq.n	8001ee6 <__aeabi_dsub+0x12a>
 8001ed2:	230f      	movs	r3, #15
 8001ed4:	402b      	ands	r3, r5
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d005      	beq.n	8001ee6 <__aeabi_dsub+0x12a>
 8001eda:	1d2b      	adds	r3, r5, #4
 8001edc:	42ab      	cmp	r3, r5
 8001ede:	41ad      	sbcs	r5, r5
 8001ee0:	426d      	negs	r5, r5
 8001ee2:	1964      	adds	r4, r4, r5
 8001ee4:	001d      	movs	r5, r3
 8001ee6:	0223      	lsls	r3, r4, #8
 8001ee8:	d400      	bmi.n	8001eec <__aeabi_dsub+0x130>
 8001eea:	e140      	b.n	800216e <__aeabi_dsub+0x3b2>
 8001eec:	4a88      	ldr	r2, [pc, #544]	@ (8002110 <__aeabi_dsub+0x354>)
 8001eee:	3701      	adds	r7, #1
 8001ef0:	4297      	cmp	r7, r2
 8001ef2:	d100      	bne.n	8001ef6 <__aeabi_dsub+0x13a>
 8001ef4:	e101      	b.n	80020fa <__aeabi_dsub+0x33e>
 8001ef6:	2601      	movs	r6, #1
 8001ef8:	4643      	mov	r3, r8
 8001efa:	4986      	ldr	r1, [pc, #536]	@ (8002114 <__aeabi_dsub+0x358>)
 8001efc:	08ed      	lsrs	r5, r5, #3
 8001efe:	4021      	ands	r1, r4
 8001f00:	074a      	lsls	r2, r1, #29
 8001f02:	432a      	orrs	r2, r5
 8001f04:	057c      	lsls	r4, r7, #21
 8001f06:	024d      	lsls	r5, r1, #9
 8001f08:	0b2d      	lsrs	r5, r5, #12
 8001f0a:	0d64      	lsrs	r4, r4, #21
 8001f0c:	401e      	ands	r6, r3
 8001f0e:	0524      	lsls	r4, r4, #20
 8001f10:	432c      	orrs	r4, r5
 8001f12:	07f6      	lsls	r6, r6, #31
 8001f14:	4334      	orrs	r4, r6
 8001f16:	0010      	movs	r0, r2
 8001f18:	0021      	movs	r1, r4
 8001f1a:	b005      	add	sp, #20
 8001f1c:	bcf0      	pop	{r4, r5, r6, r7}
 8001f1e:	46bb      	mov	fp, r7
 8001f20:	46b2      	mov	sl, r6
 8001f22:	46a9      	mov	r9, r5
 8001f24:	46a0      	mov	r8, r4
 8001f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f28:	2d00      	cmp	r5, #0
 8001f2a:	dc00      	bgt.n	8001f2e <__aeabi_dsub+0x172>
 8001f2c:	e2d0      	b.n	80024d0 <__aeabi_dsub+0x714>
 8001f2e:	4649      	mov	r1, r9
 8001f30:	2900      	cmp	r1, #0
 8001f32:	d000      	beq.n	8001f36 <__aeabi_dsub+0x17a>
 8001f34:	e0d4      	b.n	80020e0 <__aeabi_dsub+0x324>
 8001f36:	4661      	mov	r1, ip
 8001f38:	9b02      	ldr	r3, [sp, #8]
 8001f3a:	4319      	orrs	r1, r3
 8001f3c:	d100      	bne.n	8001f40 <__aeabi_dsub+0x184>
 8001f3e:	e12b      	b.n	8002198 <__aeabi_dsub+0x3dc>
 8001f40:	1e69      	subs	r1, r5, #1
 8001f42:	2d01      	cmp	r5, #1
 8001f44:	d100      	bne.n	8001f48 <__aeabi_dsub+0x18c>
 8001f46:	e1d9      	b.n	80022fc <__aeabi_dsub+0x540>
 8001f48:	4295      	cmp	r5, r2
 8001f4a:	d100      	bne.n	8001f4e <__aeabi_dsub+0x192>
 8001f4c:	e10a      	b.n	8002164 <__aeabi_dsub+0x3a8>
 8001f4e:	2501      	movs	r5, #1
 8001f50:	2938      	cmp	r1, #56	@ 0x38
 8001f52:	dc17      	bgt.n	8001f84 <__aeabi_dsub+0x1c8>
 8001f54:	468a      	mov	sl, r1
 8001f56:	4653      	mov	r3, sl
 8001f58:	2b1f      	cmp	r3, #31
 8001f5a:	dd00      	ble.n	8001f5e <__aeabi_dsub+0x1a2>
 8001f5c:	e1e7      	b.n	800232e <__aeabi_dsub+0x572>
 8001f5e:	2220      	movs	r2, #32
 8001f60:	1ad2      	subs	r2, r2, r3
 8001f62:	9b02      	ldr	r3, [sp, #8]
 8001f64:	4661      	mov	r1, ip
 8001f66:	4093      	lsls	r3, r2
 8001f68:	001d      	movs	r5, r3
 8001f6a:	4653      	mov	r3, sl
 8001f6c:	40d9      	lsrs	r1, r3
 8001f6e:	4663      	mov	r3, ip
 8001f70:	4093      	lsls	r3, r2
 8001f72:	001a      	movs	r2, r3
 8001f74:	430d      	orrs	r5, r1
 8001f76:	1e51      	subs	r1, r2, #1
 8001f78:	418a      	sbcs	r2, r1
 8001f7a:	4653      	mov	r3, sl
 8001f7c:	4315      	orrs	r5, r2
 8001f7e:	9a02      	ldr	r2, [sp, #8]
 8001f80:	40da      	lsrs	r2, r3
 8001f82:	18a4      	adds	r4, r4, r2
 8001f84:	182d      	adds	r5, r5, r0
 8001f86:	4285      	cmp	r5, r0
 8001f88:	4180      	sbcs	r0, r0
 8001f8a:	4240      	negs	r0, r0
 8001f8c:	1824      	adds	r4, r4, r0
 8001f8e:	0223      	lsls	r3, r4, #8
 8001f90:	d400      	bmi.n	8001f94 <__aeabi_dsub+0x1d8>
 8001f92:	e0b6      	b.n	8002102 <__aeabi_dsub+0x346>
 8001f94:	4b5e      	ldr	r3, [pc, #376]	@ (8002110 <__aeabi_dsub+0x354>)
 8001f96:	3701      	adds	r7, #1
 8001f98:	429f      	cmp	r7, r3
 8001f9a:	d100      	bne.n	8001f9e <__aeabi_dsub+0x1e2>
 8001f9c:	e0ad      	b.n	80020fa <__aeabi_dsub+0x33e>
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	4b5c      	ldr	r3, [pc, #368]	@ (8002114 <__aeabi_dsub+0x358>)
 8001fa2:	086a      	lsrs	r2, r5, #1
 8001fa4:	401c      	ands	r4, r3
 8001fa6:	4029      	ands	r1, r5
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	07e5      	lsls	r5, r4, #31
 8001fac:	4315      	orrs	r5, r2
 8001fae:	0864      	lsrs	r4, r4, #1
 8001fb0:	e78d      	b.n	8001ece <__aeabi_dsub+0x112>
 8001fb2:	4a59      	ldr	r2, [pc, #356]	@ (8002118 <__aeabi_dsub+0x35c>)
 8001fb4:	9b02      	ldr	r3, [sp, #8]
 8001fb6:	4692      	mov	sl, r2
 8001fb8:	4662      	mov	r2, ip
 8001fba:	44ba      	add	sl, r7
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	d02c      	beq.n	800201a <__aeabi_dsub+0x25e>
 8001fc0:	428e      	cmp	r6, r1
 8001fc2:	d02e      	beq.n	8002022 <__aeabi_dsub+0x266>
 8001fc4:	4652      	mov	r2, sl
 8001fc6:	2a00      	cmp	r2, #0
 8001fc8:	d060      	beq.n	800208c <__aeabi_dsub+0x2d0>
 8001fca:	2f00      	cmp	r7, #0
 8001fcc:	d100      	bne.n	8001fd0 <__aeabi_dsub+0x214>
 8001fce:	e0db      	b.n	8002188 <__aeabi_dsub+0x3cc>
 8001fd0:	4663      	mov	r3, ip
 8001fd2:	000e      	movs	r6, r1
 8001fd4:	9c02      	ldr	r4, [sp, #8]
 8001fd6:	08d8      	lsrs	r0, r3, #3
 8001fd8:	0762      	lsls	r2, r4, #29
 8001fda:	4302      	orrs	r2, r0
 8001fdc:	08e4      	lsrs	r4, r4, #3
 8001fde:	0013      	movs	r3, r2
 8001fe0:	4323      	orrs	r3, r4
 8001fe2:	d100      	bne.n	8001fe6 <__aeabi_dsub+0x22a>
 8001fe4:	e254      	b.n	8002490 <__aeabi_dsub+0x6d4>
 8001fe6:	2580      	movs	r5, #128	@ 0x80
 8001fe8:	032d      	lsls	r5, r5, #12
 8001fea:	4325      	orrs	r5, r4
 8001fec:	032d      	lsls	r5, r5, #12
 8001fee:	4c48      	ldr	r4, [pc, #288]	@ (8002110 <__aeabi_dsub+0x354>)
 8001ff0:	0b2d      	lsrs	r5, r5, #12
 8001ff2:	e78c      	b.n	8001f0e <__aeabi_dsub+0x152>
 8001ff4:	4661      	mov	r1, ip
 8001ff6:	9b02      	ldr	r3, [sp, #8]
 8001ff8:	4319      	orrs	r1, r3
 8001ffa:	d100      	bne.n	8001ffe <__aeabi_dsub+0x242>
 8001ffc:	e0cc      	b.n	8002198 <__aeabi_dsub+0x3dc>
 8001ffe:	0029      	movs	r1, r5
 8002000:	3901      	subs	r1, #1
 8002002:	2d01      	cmp	r5, #1
 8002004:	d100      	bne.n	8002008 <__aeabi_dsub+0x24c>
 8002006:	e188      	b.n	800231a <__aeabi_dsub+0x55e>
 8002008:	4295      	cmp	r5, r2
 800200a:	d100      	bne.n	800200e <__aeabi_dsub+0x252>
 800200c:	e0aa      	b.n	8002164 <__aeabi_dsub+0x3a8>
 800200e:	2501      	movs	r5, #1
 8002010:	2938      	cmp	r1, #56	@ 0x38
 8002012:	dd00      	ble.n	8002016 <__aeabi_dsub+0x25a>
 8002014:	e72f      	b.n	8001e76 <__aeabi_dsub+0xba>
 8002016:	468a      	mov	sl, r1
 8002018:	e718      	b.n	8001e4c <__aeabi_dsub+0x90>
 800201a:	2201      	movs	r2, #1
 800201c:	4051      	eors	r1, r2
 800201e:	428e      	cmp	r6, r1
 8002020:	d1d0      	bne.n	8001fc4 <__aeabi_dsub+0x208>
 8002022:	4653      	mov	r3, sl
 8002024:	2b00      	cmp	r3, #0
 8002026:	d100      	bne.n	800202a <__aeabi_dsub+0x26e>
 8002028:	e0be      	b.n	80021a8 <__aeabi_dsub+0x3ec>
 800202a:	2f00      	cmp	r7, #0
 800202c:	d000      	beq.n	8002030 <__aeabi_dsub+0x274>
 800202e:	e138      	b.n	80022a2 <__aeabi_dsub+0x4e6>
 8002030:	46ca      	mov	sl, r9
 8002032:	0022      	movs	r2, r4
 8002034:	4302      	orrs	r2, r0
 8002036:	d100      	bne.n	800203a <__aeabi_dsub+0x27e>
 8002038:	e1e2      	b.n	8002400 <__aeabi_dsub+0x644>
 800203a:	4653      	mov	r3, sl
 800203c:	1e59      	subs	r1, r3, #1
 800203e:	2b01      	cmp	r3, #1
 8002040:	d100      	bne.n	8002044 <__aeabi_dsub+0x288>
 8002042:	e20d      	b.n	8002460 <__aeabi_dsub+0x6a4>
 8002044:	4a32      	ldr	r2, [pc, #200]	@ (8002110 <__aeabi_dsub+0x354>)
 8002046:	4592      	cmp	sl, r2
 8002048:	d100      	bne.n	800204c <__aeabi_dsub+0x290>
 800204a:	e1d2      	b.n	80023f2 <__aeabi_dsub+0x636>
 800204c:	2701      	movs	r7, #1
 800204e:	2938      	cmp	r1, #56	@ 0x38
 8002050:	dc13      	bgt.n	800207a <__aeabi_dsub+0x2be>
 8002052:	291f      	cmp	r1, #31
 8002054:	dd00      	ble.n	8002058 <__aeabi_dsub+0x29c>
 8002056:	e1ee      	b.n	8002436 <__aeabi_dsub+0x67a>
 8002058:	2220      	movs	r2, #32
 800205a:	9b02      	ldr	r3, [sp, #8]
 800205c:	1a52      	subs	r2, r2, r1
 800205e:	0025      	movs	r5, r4
 8002060:	0007      	movs	r7, r0
 8002062:	469a      	mov	sl, r3
 8002064:	40cc      	lsrs	r4, r1
 8002066:	4090      	lsls	r0, r2
 8002068:	4095      	lsls	r5, r2
 800206a:	40cf      	lsrs	r7, r1
 800206c:	44a2      	add	sl, r4
 800206e:	1e42      	subs	r2, r0, #1
 8002070:	4190      	sbcs	r0, r2
 8002072:	4653      	mov	r3, sl
 8002074:	432f      	orrs	r7, r5
 8002076:	4307      	orrs	r7, r0
 8002078:	9302      	str	r3, [sp, #8]
 800207a:	003d      	movs	r5, r7
 800207c:	4465      	add	r5, ip
 800207e:	4565      	cmp	r5, ip
 8002080:	4192      	sbcs	r2, r2
 8002082:	9b02      	ldr	r3, [sp, #8]
 8002084:	4252      	negs	r2, r2
 8002086:	464f      	mov	r7, r9
 8002088:	18d4      	adds	r4, r2, r3
 800208a:	e780      	b.n	8001f8e <__aeabi_dsub+0x1d2>
 800208c:	4a23      	ldr	r2, [pc, #140]	@ (800211c <__aeabi_dsub+0x360>)
 800208e:	1c7d      	adds	r5, r7, #1
 8002090:	4215      	tst	r5, r2
 8002092:	d000      	beq.n	8002096 <__aeabi_dsub+0x2da>
 8002094:	e0aa      	b.n	80021ec <__aeabi_dsub+0x430>
 8002096:	4662      	mov	r2, ip
 8002098:	0025      	movs	r5, r4
 800209a:	9b02      	ldr	r3, [sp, #8]
 800209c:	4305      	orrs	r5, r0
 800209e:	431a      	orrs	r2, r3
 80020a0:	2f00      	cmp	r7, #0
 80020a2:	d000      	beq.n	80020a6 <__aeabi_dsub+0x2ea>
 80020a4:	e0f5      	b.n	8002292 <__aeabi_dsub+0x4d6>
 80020a6:	2d00      	cmp	r5, #0
 80020a8:	d100      	bne.n	80020ac <__aeabi_dsub+0x2f0>
 80020aa:	e16b      	b.n	8002384 <__aeabi_dsub+0x5c8>
 80020ac:	2a00      	cmp	r2, #0
 80020ae:	d100      	bne.n	80020b2 <__aeabi_dsub+0x2f6>
 80020b0:	e152      	b.n	8002358 <__aeabi_dsub+0x59c>
 80020b2:	4663      	mov	r3, ip
 80020b4:	1ac5      	subs	r5, r0, r3
 80020b6:	9b02      	ldr	r3, [sp, #8]
 80020b8:	1ae2      	subs	r2, r4, r3
 80020ba:	42a8      	cmp	r0, r5
 80020bc:	419b      	sbcs	r3, r3
 80020be:	425b      	negs	r3, r3
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	021a      	lsls	r2, r3, #8
 80020c4:	d400      	bmi.n	80020c8 <__aeabi_dsub+0x30c>
 80020c6:	e1d5      	b.n	8002474 <__aeabi_dsub+0x6b8>
 80020c8:	4663      	mov	r3, ip
 80020ca:	1a1d      	subs	r5, r3, r0
 80020cc:	45ac      	cmp	ip, r5
 80020ce:	4192      	sbcs	r2, r2
 80020d0:	2601      	movs	r6, #1
 80020d2:	9b02      	ldr	r3, [sp, #8]
 80020d4:	4252      	negs	r2, r2
 80020d6:	1b1c      	subs	r4, r3, r4
 80020d8:	4688      	mov	r8, r1
 80020da:	1aa4      	subs	r4, r4, r2
 80020dc:	400e      	ands	r6, r1
 80020de:	e6f6      	b.n	8001ece <__aeabi_dsub+0x112>
 80020e0:	4297      	cmp	r7, r2
 80020e2:	d03f      	beq.n	8002164 <__aeabi_dsub+0x3a8>
 80020e4:	4652      	mov	r2, sl
 80020e6:	2501      	movs	r5, #1
 80020e8:	2a38      	cmp	r2, #56	@ 0x38
 80020ea:	dd00      	ble.n	80020ee <__aeabi_dsub+0x332>
 80020ec:	e74a      	b.n	8001f84 <__aeabi_dsub+0x1c8>
 80020ee:	2280      	movs	r2, #128	@ 0x80
 80020f0:	9b02      	ldr	r3, [sp, #8]
 80020f2:	0412      	lsls	r2, r2, #16
 80020f4:	4313      	orrs	r3, r2
 80020f6:	9302      	str	r3, [sp, #8]
 80020f8:	e72d      	b.n	8001f56 <__aeabi_dsub+0x19a>
 80020fa:	003c      	movs	r4, r7
 80020fc:	2500      	movs	r5, #0
 80020fe:	2200      	movs	r2, #0
 8002100:	e705      	b.n	8001f0e <__aeabi_dsub+0x152>
 8002102:	2307      	movs	r3, #7
 8002104:	402b      	ands	r3, r5
 8002106:	2b00      	cmp	r3, #0
 8002108:	d000      	beq.n	800210c <__aeabi_dsub+0x350>
 800210a:	e6e2      	b.n	8001ed2 <__aeabi_dsub+0x116>
 800210c:	e06b      	b.n	80021e6 <__aeabi_dsub+0x42a>
 800210e:	46c0      	nop			@ (mov r8, r8)
 8002110:	000007ff 	.word	0x000007ff
 8002114:	ff7fffff 	.word	0xff7fffff
 8002118:	fffff801 	.word	0xfffff801
 800211c:	000007fe 	.word	0x000007fe
 8002120:	0028      	movs	r0, r5
 8002122:	f000 fadf 	bl	80026e4 <__clzsi2>
 8002126:	0003      	movs	r3, r0
 8002128:	3318      	adds	r3, #24
 800212a:	2b1f      	cmp	r3, #31
 800212c:	dc00      	bgt.n	8002130 <__aeabi_dsub+0x374>
 800212e:	e6b4      	b.n	8001e9a <__aeabi_dsub+0xde>
 8002130:	002a      	movs	r2, r5
 8002132:	3808      	subs	r0, #8
 8002134:	4082      	lsls	r2, r0
 8002136:	429f      	cmp	r7, r3
 8002138:	dd00      	ble.n	800213c <__aeabi_dsub+0x380>
 800213a:	e0b9      	b.n	80022b0 <__aeabi_dsub+0x4f4>
 800213c:	1bdb      	subs	r3, r3, r7
 800213e:	1c58      	adds	r0, r3, #1
 8002140:	281f      	cmp	r0, #31
 8002142:	dc00      	bgt.n	8002146 <__aeabi_dsub+0x38a>
 8002144:	e1a0      	b.n	8002488 <__aeabi_dsub+0x6cc>
 8002146:	0015      	movs	r5, r2
 8002148:	3b1f      	subs	r3, #31
 800214a:	40dd      	lsrs	r5, r3
 800214c:	2820      	cmp	r0, #32
 800214e:	d005      	beq.n	800215c <__aeabi_dsub+0x3a0>
 8002150:	2340      	movs	r3, #64	@ 0x40
 8002152:	1a1b      	subs	r3, r3, r0
 8002154:	409a      	lsls	r2, r3
 8002156:	1e53      	subs	r3, r2, #1
 8002158:	419a      	sbcs	r2, r3
 800215a:	4315      	orrs	r5, r2
 800215c:	2307      	movs	r3, #7
 800215e:	2700      	movs	r7, #0
 8002160:	402b      	ands	r3, r5
 8002162:	e7d0      	b.n	8002106 <__aeabi_dsub+0x34a>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	0762      	lsls	r2, r4, #29
 8002168:	4302      	orrs	r2, r0
 800216a:	08e4      	lsrs	r4, r4, #3
 800216c:	e737      	b.n	8001fde <__aeabi_dsub+0x222>
 800216e:	08ea      	lsrs	r2, r5, #3
 8002170:	0763      	lsls	r3, r4, #29
 8002172:	431a      	orrs	r2, r3
 8002174:	4bd3      	ldr	r3, [pc, #844]	@ (80024c4 <__aeabi_dsub+0x708>)
 8002176:	08e4      	lsrs	r4, r4, #3
 8002178:	429f      	cmp	r7, r3
 800217a:	d100      	bne.n	800217e <__aeabi_dsub+0x3c2>
 800217c:	e72f      	b.n	8001fde <__aeabi_dsub+0x222>
 800217e:	0324      	lsls	r4, r4, #12
 8002180:	0b25      	lsrs	r5, r4, #12
 8002182:	057c      	lsls	r4, r7, #21
 8002184:	0d64      	lsrs	r4, r4, #21
 8002186:	e6c2      	b.n	8001f0e <__aeabi_dsub+0x152>
 8002188:	46ca      	mov	sl, r9
 800218a:	0022      	movs	r2, r4
 800218c:	4302      	orrs	r2, r0
 800218e:	d158      	bne.n	8002242 <__aeabi_dsub+0x486>
 8002190:	4663      	mov	r3, ip
 8002192:	000e      	movs	r6, r1
 8002194:	9c02      	ldr	r4, [sp, #8]
 8002196:	9303      	str	r3, [sp, #12]
 8002198:	9b03      	ldr	r3, [sp, #12]
 800219a:	4657      	mov	r7, sl
 800219c:	08da      	lsrs	r2, r3, #3
 800219e:	e7e7      	b.n	8002170 <__aeabi_dsub+0x3b4>
 80021a0:	4cc9      	ldr	r4, [pc, #804]	@ (80024c8 <__aeabi_dsub+0x70c>)
 80021a2:	1aff      	subs	r7, r7, r3
 80021a4:	4014      	ands	r4, r2
 80021a6:	e692      	b.n	8001ece <__aeabi_dsub+0x112>
 80021a8:	4dc8      	ldr	r5, [pc, #800]	@ (80024cc <__aeabi_dsub+0x710>)
 80021aa:	1c7a      	adds	r2, r7, #1
 80021ac:	422a      	tst	r2, r5
 80021ae:	d000      	beq.n	80021b2 <__aeabi_dsub+0x3f6>
 80021b0:	e084      	b.n	80022bc <__aeabi_dsub+0x500>
 80021b2:	0022      	movs	r2, r4
 80021b4:	4302      	orrs	r2, r0
 80021b6:	2f00      	cmp	r7, #0
 80021b8:	d000      	beq.n	80021bc <__aeabi_dsub+0x400>
 80021ba:	e0ef      	b.n	800239c <__aeabi_dsub+0x5e0>
 80021bc:	2a00      	cmp	r2, #0
 80021be:	d100      	bne.n	80021c2 <__aeabi_dsub+0x406>
 80021c0:	e0e5      	b.n	800238e <__aeabi_dsub+0x5d2>
 80021c2:	4662      	mov	r2, ip
 80021c4:	9902      	ldr	r1, [sp, #8]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	d100      	bne.n	80021cc <__aeabi_dsub+0x410>
 80021ca:	e0c5      	b.n	8002358 <__aeabi_dsub+0x59c>
 80021cc:	4663      	mov	r3, ip
 80021ce:	18c5      	adds	r5, r0, r3
 80021d0:	468c      	mov	ip, r1
 80021d2:	4285      	cmp	r5, r0
 80021d4:	4180      	sbcs	r0, r0
 80021d6:	4464      	add	r4, ip
 80021d8:	4240      	negs	r0, r0
 80021da:	1824      	adds	r4, r4, r0
 80021dc:	0223      	lsls	r3, r4, #8
 80021de:	d502      	bpl.n	80021e6 <__aeabi_dsub+0x42a>
 80021e0:	4bb9      	ldr	r3, [pc, #740]	@ (80024c8 <__aeabi_dsub+0x70c>)
 80021e2:	3701      	adds	r7, #1
 80021e4:	401c      	ands	r4, r3
 80021e6:	46ba      	mov	sl, r7
 80021e8:	9503      	str	r5, [sp, #12]
 80021ea:	e7d5      	b.n	8002198 <__aeabi_dsub+0x3dc>
 80021ec:	4662      	mov	r2, ip
 80021ee:	1a85      	subs	r5, r0, r2
 80021f0:	42a8      	cmp	r0, r5
 80021f2:	4192      	sbcs	r2, r2
 80021f4:	4252      	negs	r2, r2
 80021f6:	4691      	mov	r9, r2
 80021f8:	9b02      	ldr	r3, [sp, #8]
 80021fa:	1ae3      	subs	r3, r4, r3
 80021fc:	001a      	movs	r2, r3
 80021fe:	464b      	mov	r3, r9
 8002200:	1ad2      	subs	r2, r2, r3
 8002202:	0013      	movs	r3, r2
 8002204:	4691      	mov	r9, r2
 8002206:	021a      	lsls	r2, r3, #8
 8002208:	d46c      	bmi.n	80022e4 <__aeabi_dsub+0x528>
 800220a:	464a      	mov	r2, r9
 800220c:	464c      	mov	r4, r9
 800220e:	432a      	orrs	r2, r5
 8002210:	d000      	beq.n	8002214 <__aeabi_dsub+0x458>
 8002212:	e63a      	b.n	8001e8a <__aeabi_dsub+0xce>
 8002214:	2600      	movs	r6, #0
 8002216:	2400      	movs	r4, #0
 8002218:	2500      	movs	r5, #0
 800221a:	e678      	b.n	8001f0e <__aeabi_dsub+0x152>
 800221c:	9902      	ldr	r1, [sp, #8]
 800221e:	4653      	mov	r3, sl
 8002220:	000d      	movs	r5, r1
 8002222:	3a20      	subs	r2, #32
 8002224:	40d5      	lsrs	r5, r2
 8002226:	2b20      	cmp	r3, #32
 8002228:	d006      	beq.n	8002238 <__aeabi_dsub+0x47c>
 800222a:	2240      	movs	r2, #64	@ 0x40
 800222c:	1ad2      	subs	r2, r2, r3
 800222e:	000b      	movs	r3, r1
 8002230:	4093      	lsls	r3, r2
 8002232:	4662      	mov	r2, ip
 8002234:	431a      	orrs	r2, r3
 8002236:	4693      	mov	fp, r2
 8002238:	465b      	mov	r3, fp
 800223a:	1e5a      	subs	r2, r3, #1
 800223c:	4193      	sbcs	r3, r2
 800223e:	431d      	orrs	r5, r3
 8002240:	e619      	b.n	8001e76 <__aeabi_dsub+0xba>
 8002242:	4653      	mov	r3, sl
 8002244:	1e5a      	subs	r2, r3, #1
 8002246:	2b01      	cmp	r3, #1
 8002248:	d100      	bne.n	800224c <__aeabi_dsub+0x490>
 800224a:	e0c6      	b.n	80023da <__aeabi_dsub+0x61e>
 800224c:	4e9d      	ldr	r6, [pc, #628]	@ (80024c4 <__aeabi_dsub+0x708>)
 800224e:	45b2      	cmp	sl, r6
 8002250:	d100      	bne.n	8002254 <__aeabi_dsub+0x498>
 8002252:	e6bd      	b.n	8001fd0 <__aeabi_dsub+0x214>
 8002254:	4688      	mov	r8, r1
 8002256:	000e      	movs	r6, r1
 8002258:	2501      	movs	r5, #1
 800225a:	2a38      	cmp	r2, #56	@ 0x38
 800225c:	dc10      	bgt.n	8002280 <__aeabi_dsub+0x4c4>
 800225e:	2a1f      	cmp	r2, #31
 8002260:	dc7f      	bgt.n	8002362 <__aeabi_dsub+0x5a6>
 8002262:	2120      	movs	r1, #32
 8002264:	0025      	movs	r5, r4
 8002266:	1a89      	subs	r1, r1, r2
 8002268:	0007      	movs	r7, r0
 800226a:	4088      	lsls	r0, r1
 800226c:	408d      	lsls	r5, r1
 800226e:	40d7      	lsrs	r7, r2
 8002270:	40d4      	lsrs	r4, r2
 8002272:	1e41      	subs	r1, r0, #1
 8002274:	4188      	sbcs	r0, r1
 8002276:	9b02      	ldr	r3, [sp, #8]
 8002278:	433d      	orrs	r5, r7
 800227a:	1b1b      	subs	r3, r3, r4
 800227c:	4305      	orrs	r5, r0
 800227e:	9302      	str	r3, [sp, #8]
 8002280:	4662      	mov	r2, ip
 8002282:	1b55      	subs	r5, r2, r5
 8002284:	45ac      	cmp	ip, r5
 8002286:	4192      	sbcs	r2, r2
 8002288:	9b02      	ldr	r3, [sp, #8]
 800228a:	4252      	negs	r2, r2
 800228c:	464f      	mov	r7, r9
 800228e:	1a9c      	subs	r4, r3, r2
 8002290:	e5f6      	b.n	8001e80 <__aeabi_dsub+0xc4>
 8002292:	2d00      	cmp	r5, #0
 8002294:	d000      	beq.n	8002298 <__aeabi_dsub+0x4dc>
 8002296:	e0b7      	b.n	8002408 <__aeabi_dsub+0x64c>
 8002298:	2a00      	cmp	r2, #0
 800229a:	d100      	bne.n	800229e <__aeabi_dsub+0x4e2>
 800229c:	e0f0      	b.n	8002480 <__aeabi_dsub+0x6c4>
 800229e:	2601      	movs	r6, #1
 80022a0:	400e      	ands	r6, r1
 80022a2:	4663      	mov	r3, ip
 80022a4:	9802      	ldr	r0, [sp, #8]
 80022a6:	08d9      	lsrs	r1, r3, #3
 80022a8:	0742      	lsls	r2, r0, #29
 80022aa:	430a      	orrs	r2, r1
 80022ac:	08c4      	lsrs	r4, r0, #3
 80022ae:	e696      	b.n	8001fde <__aeabi_dsub+0x222>
 80022b0:	4c85      	ldr	r4, [pc, #532]	@ (80024c8 <__aeabi_dsub+0x70c>)
 80022b2:	1aff      	subs	r7, r7, r3
 80022b4:	4014      	ands	r4, r2
 80022b6:	0762      	lsls	r2, r4, #29
 80022b8:	08e4      	lsrs	r4, r4, #3
 80022ba:	e760      	b.n	800217e <__aeabi_dsub+0x3c2>
 80022bc:	4981      	ldr	r1, [pc, #516]	@ (80024c4 <__aeabi_dsub+0x708>)
 80022be:	428a      	cmp	r2, r1
 80022c0:	d100      	bne.n	80022c4 <__aeabi_dsub+0x508>
 80022c2:	e0c9      	b.n	8002458 <__aeabi_dsub+0x69c>
 80022c4:	4663      	mov	r3, ip
 80022c6:	18c1      	adds	r1, r0, r3
 80022c8:	4281      	cmp	r1, r0
 80022ca:	4180      	sbcs	r0, r0
 80022cc:	9b02      	ldr	r3, [sp, #8]
 80022ce:	4240      	negs	r0, r0
 80022d0:	18e3      	adds	r3, r4, r3
 80022d2:	181b      	adds	r3, r3, r0
 80022d4:	07dd      	lsls	r5, r3, #31
 80022d6:	085c      	lsrs	r4, r3, #1
 80022d8:	2307      	movs	r3, #7
 80022da:	0849      	lsrs	r1, r1, #1
 80022dc:	430d      	orrs	r5, r1
 80022de:	0017      	movs	r7, r2
 80022e0:	402b      	ands	r3, r5
 80022e2:	e710      	b.n	8002106 <__aeabi_dsub+0x34a>
 80022e4:	4663      	mov	r3, ip
 80022e6:	1a1d      	subs	r5, r3, r0
 80022e8:	45ac      	cmp	ip, r5
 80022ea:	4192      	sbcs	r2, r2
 80022ec:	2601      	movs	r6, #1
 80022ee:	9b02      	ldr	r3, [sp, #8]
 80022f0:	4252      	negs	r2, r2
 80022f2:	1b1c      	subs	r4, r3, r4
 80022f4:	4688      	mov	r8, r1
 80022f6:	1aa4      	subs	r4, r4, r2
 80022f8:	400e      	ands	r6, r1
 80022fa:	e5c6      	b.n	8001e8a <__aeabi_dsub+0xce>
 80022fc:	4663      	mov	r3, ip
 80022fe:	18c5      	adds	r5, r0, r3
 8002300:	9b02      	ldr	r3, [sp, #8]
 8002302:	4285      	cmp	r5, r0
 8002304:	4180      	sbcs	r0, r0
 8002306:	469c      	mov	ip, r3
 8002308:	4240      	negs	r0, r0
 800230a:	4464      	add	r4, ip
 800230c:	1824      	adds	r4, r4, r0
 800230e:	2701      	movs	r7, #1
 8002310:	0223      	lsls	r3, r4, #8
 8002312:	d400      	bmi.n	8002316 <__aeabi_dsub+0x55a>
 8002314:	e6f5      	b.n	8002102 <__aeabi_dsub+0x346>
 8002316:	2702      	movs	r7, #2
 8002318:	e641      	b.n	8001f9e <__aeabi_dsub+0x1e2>
 800231a:	4663      	mov	r3, ip
 800231c:	1ac5      	subs	r5, r0, r3
 800231e:	42a8      	cmp	r0, r5
 8002320:	4180      	sbcs	r0, r0
 8002322:	9b02      	ldr	r3, [sp, #8]
 8002324:	4240      	negs	r0, r0
 8002326:	1ae4      	subs	r4, r4, r3
 8002328:	2701      	movs	r7, #1
 800232a:	1a24      	subs	r4, r4, r0
 800232c:	e5a8      	b.n	8001e80 <__aeabi_dsub+0xc4>
 800232e:	9d02      	ldr	r5, [sp, #8]
 8002330:	4652      	mov	r2, sl
 8002332:	002b      	movs	r3, r5
 8002334:	3a20      	subs	r2, #32
 8002336:	40d3      	lsrs	r3, r2
 8002338:	0019      	movs	r1, r3
 800233a:	4653      	mov	r3, sl
 800233c:	2b20      	cmp	r3, #32
 800233e:	d006      	beq.n	800234e <__aeabi_dsub+0x592>
 8002340:	2240      	movs	r2, #64	@ 0x40
 8002342:	1ad2      	subs	r2, r2, r3
 8002344:	002b      	movs	r3, r5
 8002346:	4093      	lsls	r3, r2
 8002348:	4662      	mov	r2, ip
 800234a:	431a      	orrs	r2, r3
 800234c:	4693      	mov	fp, r2
 800234e:	465d      	mov	r5, fp
 8002350:	1e6b      	subs	r3, r5, #1
 8002352:	419d      	sbcs	r5, r3
 8002354:	430d      	orrs	r5, r1
 8002356:	e615      	b.n	8001f84 <__aeabi_dsub+0x1c8>
 8002358:	0762      	lsls	r2, r4, #29
 800235a:	08c0      	lsrs	r0, r0, #3
 800235c:	4302      	orrs	r2, r0
 800235e:	08e4      	lsrs	r4, r4, #3
 8002360:	e70d      	b.n	800217e <__aeabi_dsub+0x3c2>
 8002362:	0011      	movs	r1, r2
 8002364:	0027      	movs	r7, r4
 8002366:	3920      	subs	r1, #32
 8002368:	40cf      	lsrs	r7, r1
 800236a:	2a20      	cmp	r2, #32
 800236c:	d005      	beq.n	800237a <__aeabi_dsub+0x5be>
 800236e:	2140      	movs	r1, #64	@ 0x40
 8002370:	1a8a      	subs	r2, r1, r2
 8002372:	4094      	lsls	r4, r2
 8002374:	0025      	movs	r5, r4
 8002376:	4305      	orrs	r5, r0
 8002378:	9503      	str	r5, [sp, #12]
 800237a:	9d03      	ldr	r5, [sp, #12]
 800237c:	1e6a      	subs	r2, r5, #1
 800237e:	4195      	sbcs	r5, r2
 8002380:	433d      	orrs	r5, r7
 8002382:	e77d      	b.n	8002280 <__aeabi_dsub+0x4c4>
 8002384:	2a00      	cmp	r2, #0
 8002386:	d100      	bne.n	800238a <__aeabi_dsub+0x5ce>
 8002388:	e744      	b.n	8002214 <__aeabi_dsub+0x458>
 800238a:	2601      	movs	r6, #1
 800238c:	400e      	ands	r6, r1
 800238e:	4663      	mov	r3, ip
 8002390:	08d9      	lsrs	r1, r3, #3
 8002392:	9b02      	ldr	r3, [sp, #8]
 8002394:	075a      	lsls	r2, r3, #29
 8002396:	430a      	orrs	r2, r1
 8002398:	08dc      	lsrs	r4, r3, #3
 800239a:	e6f0      	b.n	800217e <__aeabi_dsub+0x3c2>
 800239c:	2a00      	cmp	r2, #0
 800239e:	d028      	beq.n	80023f2 <__aeabi_dsub+0x636>
 80023a0:	4662      	mov	r2, ip
 80023a2:	9f02      	ldr	r7, [sp, #8]
 80023a4:	08c0      	lsrs	r0, r0, #3
 80023a6:	433a      	orrs	r2, r7
 80023a8:	d100      	bne.n	80023ac <__aeabi_dsub+0x5f0>
 80023aa:	e6dc      	b.n	8002166 <__aeabi_dsub+0x3aa>
 80023ac:	0762      	lsls	r2, r4, #29
 80023ae:	4310      	orrs	r0, r2
 80023b0:	2280      	movs	r2, #128	@ 0x80
 80023b2:	08e4      	lsrs	r4, r4, #3
 80023b4:	0312      	lsls	r2, r2, #12
 80023b6:	4214      	tst	r4, r2
 80023b8:	d009      	beq.n	80023ce <__aeabi_dsub+0x612>
 80023ba:	08fd      	lsrs	r5, r7, #3
 80023bc:	4215      	tst	r5, r2
 80023be:	d106      	bne.n	80023ce <__aeabi_dsub+0x612>
 80023c0:	4663      	mov	r3, ip
 80023c2:	2601      	movs	r6, #1
 80023c4:	002c      	movs	r4, r5
 80023c6:	08d8      	lsrs	r0, r3, #3
 80023c8:	077b      	lsls	r3, r7, #29
 80023ca:	4318      	orrs	r0, r3
 80023cc:	400e      	ands	r6, r1
 80023ce:	0f42      	lsrs	r2, r0, #29
 80023d0:	00c0      	lsls	r0, r0, #3
 80023d2:	08c0      	lsrs	r0, r0, #3
 80023d4:	0752      	lsls	r2, r2, #29
 80023d6:	4302      	orrs	r2, r0
 80023d8:	e601      	b.n	8001fde <__aeabi_dsub+0x222>
 80023da:	4663      	mov	r3, ip
 80023dc:	1a1d      	subs	r5, r3, r0
 80023de:	45ac      	cmp	ip, r5
 80023e0:	4192      	sbcs	r2, r2
 80023e2:	9b02      	ldr	r3, [sp, #8]
 80023e4:	4252      	negs	r2, r2
 80023e6:	1b1c      	subs	r4, r3, r4
 80023e8:	000e      	movs	r6, r1
 80023ea:	4688      	mov	r8, r1
 80023ec:	2701      	movs	r7, #1
 80023ee:	1aa4      	subs	r4, r4, r2
 80023f0:	e546      	b.n	8001e80 <__aeabi_dsub+0xc4>
 80023f2:	4663      	mov	r3, ip
 80023f4:	08d9      	lsrs	r1, r3, #3
 80023f6:	9b02      	ldr	r3, [sp, #8]
 80023f8:	075a      	lsls	r2, r3, #29
 80023fa:	430a      	orrs	r2, r1
 80023fc:	08dc      	lsrs	r4, r3, #3
 80023fe:	e5ee      	b.n	8001fde <__aeabi_dsub+0x222>
 8002400:	4663      	mov	r3, ip
 8002402:	9c02      	ldr	r4, [sp, #8]
 8002404:	9303      	str	r3, [sp, #12]
 8002406:	e6c7      	b.n	8002198 <__aeabi_dsub+0x3dc>
 8002408:	08c0      	lsrs	r0, r0, #3
 800240a:	2a00      	cmp	r2, #0
 800240c:	d100      	bne.n	8002410 <__aeabi_dsub+0x654>
 800240e:	e6aa      	b.n	8002166 <__aeabi_dsub+0x3aa>
 8002410:	0762      	lsls	r2, r4, #29
 8002412:	4310      	orrs	r0, r2
 8002414:	2280      	movs	r2, #128	@ 0x80
 8002416:	08e4      	lsrs	r4, r4, #3
 8002418:	0312      	lsls	r2, r2, #12
 800241a:	4214      	tst	r4, r2
 800241c:	d0d7      	beq.n	80023ce <__aeabi_dsub+0x612>
 800241e:	9f02      	ldr	r7, [sp, #8]
 8002420:	08fd      	lsrs	r5, r7, #3
 8002422:	4215      	tst	r5, r2
 8002424:	d1d3      	bne.n	80023ce <__aeabi_dsub+0x612>
 8002426:	4663      	mov	r3, ip
 8002428:	2601      	movs	r6, #1
 800242a:	08d8      	lsrs	r0, r3, #3
 800242c:	077b      	lsls	r3, r7, #29
 800242e:	002c      	movs	r4, r5
 8002430:	4318      	orrs	r0, r3
 8002432:	400e      	ands	r6, r1
 8002434:	e7cb      	b.n	80023ce <__aeabi_dsub+0x612>
 8002436:	000a      	movs	r2, r1
 8002438:	0027      	movs	r7, r4
 800243a:	3a20      	subs	r2, #32
 800243c:	40d7      	lsrs	r7, r2
 800243e:	2920      	cmp	r1, #32
 8002440:	d005      	beq.n	800244e <__aeabi_dsub+0x692>
 8002442:	2240      	movs	r2, #64	@ 0x40
 8002444:	1a52      	subs	r2, r2, r1
 8002446:	4094      	lsls	r4, r2
 8002448:	0025      	movs	r5, r4
 800244a:	4305      	orrs	r5, r0
 800244c:	9503      	str	r5, [sp, #12]
 800244e:	9d03      	ldr	r5, [sp, #12]
 8002450:	1e6a      	subs	r2, r5, #1
 8002452:	4195      	sbcs	r5, r2
 8002454:	432f      	orrs	r7, r5
 8002456:	e610      	b.n	800207a <__aeabi_dsub+0x2be>
 8002458:	0014      	movs	r4, r2
 800245a:	2500      	movs	r5, #0
 800245c:	2200      	movs	r2, #0
 800245e:	e556      	b.n	8001f0e <__aeabi_dsub+0x152>
 8002460:	9b02      	ldr	r3, [sp, #8]
 8002462:	4460      	add	r0, ip
 8002464:	4699      	mov	r9, r3
 8002466:	4560      	cmp	r0, ip
 8002468:	4192      	sbcs	r2, r2
 800246a:	444c      	add	r4, r9
 800246c:	4252      	negs	r2, r2
 800246e:	0005      	movs	r5, r0
 8002470:	18a4      	adds	r4, r4, r2
 8002472:	e74c      	b.n	800230e <__aeabi_dsub+0x552>
 8002474:	001a      	movs	r2, r3
 8002476:	001c      	movs	r4, r3
 8002478:	432a      	orrs	r2, r5
 800247a:	d000      	beq.n	800247e <__aeabi_dsub+0x6c2>
 800247c:	e6b3      	b.n	80021e6 <__aeabi_dsub+0x42a>
 800247e:	e6c9      	b.n	8002214 <__aeabi_dsub+0x458>
 8002480:	2480      	movs	r4, #128	@ 0x80
 8002482:	2600      	movs	r6, #0
 8002484:	0324      	lsls	r4, r4, #12
 8002486:	e5ae      	b.n	8001fe6 <__aeabi_dsub+0x22a>
 8002488:	2120      	movs	r1, #32
 800248a:	2500      	movs	r5, #0
 800248c:	1a09      	subs	r1, r1, r0
 800248e:	e517      	b.n	8001ec0 <__aeabi_dsub+0x104>
 8002490:	2200      	movs	r2, #0
 8002492:	2500      	movs	r5, #0
 8002494:	4c0b      	ldr	r4, [pc, #44]	@ (80024c4 <__aeabi_dsub+0x708>)
 8002496:	e53a      	b.n	8001f0e <__aeabi_dsub+0x152>
 8002498:	2d00      	cmp	r5, #0
 800249a:	d100      	bne.n	800249e <__aeabi_dsub+0x6e2>
 800249c:	e5f6      	b.n	800208c <__aeabi_dsub+0x2d0>
 800249e:	464b      	mov	r3, r9
 80024a0:	1bda      	subs	r2, r3, r7
 80024a2:	4692      	mov	sl, r2
 80024a4:	2f00      	cmp	r7, #0
 80024a6:	d100      	bne.n	80024aa <__aeabi_dsub+0x6ee>
 80024a8:	e66f      	b.n	800218a <__aeabi_dsub+0x3ce>
 80024aa:	2a38      	cmp	r2, #56	@ 0x38
 80024ac:	dc05      	bgt.n	80024ba <__aeabi_dsub+0x6fe>
 80024ae:	2680      	movs	r6, #128	@ 0x80
 80024b0:	0436      	lsls	r6, r6, #16
 80024b2:	4334      	orrs	r4, r6
 80024b4:	4688      	mov	r8, r1
 80024b6:	000e      	movs	r6, r1
 80024b8:	e6d1      	b.n	800225e <__aeabi_dsub+0x4a2>
 80024ba:	4688      	mov	r8, r1
 80024bc:	000e      	movs	r6, r1
 80024be:	2501      	movs	r5, #1
 80024c0:	e6de      	b.n	8002280 <__aeabi_dsub+0x4c4>
 80024c2:	46c0      	nop			@ (mov r8, r8)
 80024c4:	000007ff 	.word	0x000007ff
 80024c8:	ff7fffff 	.word	0xff7fffff
 80024cc:	000007fe 	.word	0x000007fe
 80024d0:	2d00      	cmp	r5, #0
 80024d2:	d100      	bne.n	80024d6 <__aeabi_dsub+0x71a>
 80024d4:	e668      	b.n	80021a8 <__aeabi_dsub+0x3ec>
 80024d6:	464b      	mov	r3, r9
 80024d8:	1bd9      	subs	r1, r3, r7
 80024da:	2f00      	cmp	r7, #0
 80024dc:	d101      	bne.n	80024e2 <__aeabi_dsub+0x726>
 80024de:	468a      	mov	sl, r1
 80024e0:	e5a7      	b.n	8002032 <__aeabi_dsub+0x276>
 80024e2:	2701      	movs	r7, #1
 80024e4:	2938      	cmp	r1, #56	@ 0x38
 80024e6:	dd00      	ble.n	80024ea <__aeabi_dsub+0x72e>
 80024e8:	e5c7      	b.n	800207a <__aeabi_dsub+0x2be>
 80024ea:	2280      	movs	r2, #128	@ 0x80
 80024ec:	0412      	lsls	r2, r2, #16
 80024ee:	4314      	orrs	r4, r2
 80024f0:	e5af      	b.n	8002052 <__aeabi_dsub+0x296>
 80024f2:	46c0      	nop			@ (mov r8, r8)

080024f4 <__aeabi_dcmpun>:
 80024f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024f6:	46c6      	mov	lr, r8
 80024f8:	031e      	lsls	r6, r3, #12
 80024fa:	0b36      	lsrs	r6, r6, #12
 80024fc:	46b0      	mov	r8, r6
 80024fe:	4e0d      	ldr	r6, [pc, #52]	@ (8002534 <__aeabi_dcmpun+0x40>)
 8002500:	030c      	lsls	r4, r1, #12
 8002502:	004d      	lsls	r5, r1, #1
 8002504:	005f      	lsls	r7, r3, #1
 8002506:	b500      	push	{lr}
 8002508:	0b24      	lsrs	r4, r4, #12
 800250a:	0d6d      	lsrs	r5, r5, #21
 800250c:	0d7f      	lsrs	r7, r7, #21
 800250e:	42b5      	cmp	r5, r6
 8002510:	d00b      	beq.n	800252a <__aeabi_dcmpun+0x36>
 8002512:	4908      	ldr	r1, [pc, #32]	@ (8002534 <__aeabi_dcmpun+0x40>)
 8002514:	2000      	movs	r0, #0
 8002516:	428f      	cmp	r7, r1
 8002518:	d104      	bne.n	8002524 <__aeabi_dcmpun+0x30>
 800251a:	4646      	mov	r6, r8
 800251c:	4316      	orrs	r6, r2
 800251e:	0030      	movs	r0, r6
 8002520:	1e43      	subs	r3, r0, #1
 8002522:	4198      	sbcs	r0, r3
 8002524:	bc80      	pop	{r7}
 8002526:	46b8      	mov	r8, r7
 8002528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800252a:	4304      	orrs	r4, r0
 800252c:	2001      	movs	r0, #1
 800252e:	2c00      	cmp	r4, #0
 8002530:	d1f8      	bne.n	8002524 <__aeabi_dcmpun+0x30>
 8002532:	e7ee      	b.n	8002512 <__aeabi_dcmpun+0x1e>
 8002534:	000007ff 	.word	0x000007ff

08002538 <__aeabi_d2iz>:
 8002538:	000b      	movs	r3, r1
 800253a:	0002      	movs	r2, r0
 800253c:	b570      	push	{r4, r5, r6, lr}
 800253e:	4d16      	ldr	r5, [pc, #88]	@ (8002598 <__aeabi_d2iz+0x60>)
 8002540:	030c      	lsls	r4, r1, #12
 8002542:	b082      	sub	sp, #8
 8002544:	0049      	lsls	r1, r1, #1
 8002546:	2000      	movs	r0, #0
 8002548:	9200      	str	r2, [sp, #0]
 800254a:	9301      	str	r3, [sp, #4]
 800254c:	0b24      	lsrs	r4, r4, #12
 800254e:	0d49      	lsrs	r1, r1, #21
 8002550:	0fde      	lsrs	r6, r3, #31
 8002552:	42a9      	cmp	r1, r5
 8002554:	dd04      	ble.n	8002560 <__aeabi_d2iz+0x28>
 8002556:	4811      	ldr	r0, [pc, #68]	@ (800259c <__aeabi_d2iz+0x64>)
 8002558:	4281      	cmp	r1, r0
 800255a:	dd03      	ble.n	8002564 <__aeabi_d2iz+0x2c>
 800255c:	4b10      	ldr	r3, [pc, #64]	@ (80025a0 <__aeabi_d2iz+0x68>)
 800255e:	18f0      	adds	r0, r6, r3
 8002560:	b002      	add	sp, #8
 8002562:	bd70      	pop	{r4, r5, r6, pc}
 8002564:	2080      	movs	r0, #128	@ 0x80
 8002566:	0340      	lsls	r0, r0, #13
 8002568:	4320      	orrs	r0, r4
 800256a:	4c0e      	ldr	r4, [pc, #56]	@ (80025a4 <__aeabi_d2iz+0x6c>)
 800256c:	1a64      	subs	r4, r4, r1
 800256e:	2c1f      	cmp	r4, #31
 8002570:	dd08      	ble.n	8002584 <__aeabi_d2iz+0x4c>
 8002572:	4b0d      	ldr	r3, [pc, #52]	@ (80025a8 <__aeabi_d2iz+0x70>)
 8002574:	1a5b      	subs	r3, r3, r1
 8002576:	40d8      	lsrs	r0, r3
 8002578:	0003      	movs	r3, r0
 800257a:	4258      	negs	r0, r3
 800257c:	2e00      	cmp	r6, #0
 800257e:	d1ef      	bne.n	8002560 <__aeabi_d2iz+0x28>
 8002580:	0018      	movs	r0, r3
 8002582:	e7ed      	b.n	8002560 <__aeabi_d2iz+0x28>
 8002584:	4b09      	ldr	r3, [pc, #36]	@ (80025ac <__aeabi_d2iz+0x74>)
 8002586:	9a00      	ldr	r2, [sp, #0]
 8002588:	469c      	mov	ip, r3
 800258a:	0003      	movs	r3, r0
 800258c:	4461      	add	r1, ip
 800258e:	408b      	lsls	r3, r1
 8002590:	40e2      	lsrs	r2, r4
 8002592:	4313      	orrs	r3, r2
 8002594:	e7f1      	b.n	800257a <__aeabi_d2iz+0x42>
 8002596:	46c0      	nop			@ (mov r8, r8)
 8002598:	000003fe 	.word	0x000003fe
 800259c:	0000041d 	.word	0x0000041d
 80025a0:	7fffffff 	.word	0x7fffffff
 80025a4:	00000433 	.word	0x00000433
 80025a8:	00000413 	.word	0x00000413
 80025ac:	fffffbed 	.word	0xfffffbed

080025b0 <__aeabi_i2d>:
 80025b0:	b570      	push	{r4, r5, r6, lr}
 80025b2:	2800      	cmp	r0, #0
 80025b4:	d016      	beq.n	80025e4 <__aeabi_i2d+0x34>
 80025b6:	17c3      	asrs	r3, r0, #31
 80025b8:	18c5      	adds	r5, r0, r3
 80025ba:	405d      	eors	r5, r3
 80025bc:	0fc4      	lsrs	r4, r0, #31
 80025be:	0028      	movs	r0, r5
 80025c0:	f000 f890 	bl	80026e4 <__clzsi2>
 80025c4:	4b10      	ldr	r3, [pc, #64]	@ (8002608 <__aeabi_i2d+0x58>)
 80025c6:	1a1b      	subs	r3, r3, r0
 80025c8:	055b      	lsls	r3, r3, #21
 80025ca:	0d5b      	lsrs	r3, r3, #21
 80025cc:	280a      	cmp	r0, #10
 80025ce:	dc14      	bgt.n	80025fa <__aeabi_i2d+0x4a>
 80025d0:	0002      	movs	r2, r0
 80025d2:	002e      	movs	r6, r5
 80025d4:	3215      	adds	r2, #21
 80025d6:	4096      	lsls	r6, r2
 80025d8:	220b      	movs	r2, #11
 80025da:	1a12      	subs	r2, r2, r0
 80025dc:	40d5      	lsrs	r5, r2
 80025de:	032d      	lsls	r5, r5, #12
 80025e0:	0b2d      	lsrs	r5, r5, #12
 80025e2:	e003      	b.n	80025ec <__aeabi_i2d+0x3c>
 80025e4:	2400      	movs	r4, #0
 80025e6:	2300      	movs	r3, #0
 80025e8:	2500      	movs	r5, #0
 80025ea:	2600      	movs	r6, #0
 80025ec:	051b      	lsls	r3, r3, #20
 80025ee:	432b      	orrs	r3, r5
 80025f0:	07e4      	lsls	r4, r4, #31
 80025f2:	4323      	orrs	r3, r4
 80025f4:	0030      	movs	r0, r6
 80025f6:	0019      	movs	r1, r3
 80025f8:	bd70      	pop	{r4, r5, r6, pc}
 80025fa:	380b      	subs	r0, #11
 80025fc:	4085      	lsls	r5, r0
 80025fe:	032d      	lsls	r5, r5, #12
 8002600:	2600      	movs	r6, #0
 8002602:	0b2d      	lsrs	r5, r5, #12
 8002604:	e7f2      	b.n	80025ec <__aeabi_i2d+0x3c>
 8002606:	46c0      	nop			@ (mov r8, r8)
 8002608:	0000041e 	.word	0x0000041e

0800260c <__aeabi_ui2d>:
 800260c:	b510      	push	{r4, lr}
 800260e:	1e04      	subs	r4, r0, #0
 8002610:	d010      	beq.n	8002634 <__aeabi_ui2d+0x28>
 8002612:	f000 f867 	bl	80026e4 <__clzsi2>
 8002616:	4b0e      	ldr	r3, [pc, #56]	@ (8002650 <__aeabi_ui2d+0x44>)
 8002618:	1a1b      	subs	r3, r3, r0
 800261a:	055b      	lsls	r3, r3, #21
 800261c:	0d5b      	lsrs	r3, r3, #21
 800261e:	280a      	cmp	r0, #10
 8002620:	dc0f      	bgt.n	8002642 <__aeabi_ui2d+0x36>
 8002622:	220b      	movs	r2, #11
 8002624:	0021      	movs	r1, r4
 8002626:	1a12      	subs	r2, r2, r0
 8002628:	40d1      	lsrs	r1, r2
 800262a:	3015      	adds	r0, #21
 800262c:	030a      	lsls	r2, r1, #12
 800262e:	4084      	lsls	r4, r0
 8002630:	0b12      	lsrs	r2, r2, #12
 8002632:	e001      	b.n	8002638 <__aeabi_ui2d+0x2c>
 8002634:	2300      	movs	r3, #0
 8002636:	2200      	movs	r2, #0
 8002638:	051b      	lsls	r3, r3, #20
 800263a:	4313      	orrs	r3, r2
 800263c:	0020      	movs	r0, r4
 800263e:	0019      	movs	r1, r3
 8002640:	bd10      	pop	{r4, pc}
 8002642:	0022      	movs	r2, r4
 8002644:	380b      	subs	r0, #11
 8002646:	4082      	lsls	r2, r0
 8002648:	0312      	lsls	r2, r2, #12
 800264a:	2400      	movs	r4, #0
 800264c:	0b12      	lsrs	r2, r2, #12
 800264e:	e7f3      	b.n	8002638 <__aeabi_ui2d+0x2c>
 8002650:	0000041e 	.word	0x0000041e

08002654 <__aeabi_f2d>:
 8002654:	b570      	push	{r4, r5, r6, lr}
 8002656:	0242      	lsls	r2, r0, #9
 8002658:	0043      	lsls	r3, r0, #1
 800265a:	0fc4      	lsrs	r4, r0, #31
 800265c:	20fe      	movs	r0, #254	@ 0xfe
 800265e:	0e1b      	lsrs	r3, r3, #24
 8002660:	1c59      	adds	r1, r3, #1
 8002662:	0a55      	lsrs	r5, r2, #9
 8002664:	4208      	tst	r0, r1
 8002666:	d00c      	beq.n	8002682 <__aeabi_f2d+0x2e>
 8002668:	21e0      	movs	r1, #224	@ 0xe0
 800266a:	0089      	lsls	r1, r1, #2
 800266c:	468c      	mov	ip, r1
 800266e:	076d      	lsls	r5, r5, #29
 8002670:	0b12      	lsrs	r2, r2, #12
 8002672:	4463      	add	r3, ip
 8002674:	051b      	lsls	r3, r3, #20
 8002676:	4313      	orrs	r3, r2
 8002678:	07e4      	lsls	r4, r4, #31
 800267a:	4323      	orrs	r3, r4
 800267c:	0028      	movs	r0, r5
 800267e:	0019      	movs	r1, r3
 8002680:	bd70      	pop	{r4, r5, r6, pc}
 8002682:	2b00      	cmp	r3, #0
 8002684:	d114      	bne.n	80026b0 <__aeabi_f2d+0x5c>
 8002686:	2d00      	cmp	r5, #0
 8002688:	d01b      	beq.n	80026c2 <__aeabi_f2d+0x6e>
 800268a:	0028      	movs	r0, r5
 800268c:	f000 f82a 	bl	80026e4 <__clzsi2>
 8002690:	280a      	cmp	r0, #10
 8002692:	dc1c      	bgt.n	80026ce <__aeabi_f2d+0x7a>
 8002694:	230b      	movs	r3, #11
 8002696:	002a      	movs	r2, r5
 8002698:	1a1b      	subs	r3, r3, r0
 800269a:	40da      	lsrs	r2, r3
 800269c:	0003      	movs	r3, r0
 800269e:	3315      	adds	r3, #21
 80026a0:	409d      	lsls	r5, r3
 80026a2:	4b0e      	ldr	r3, [pc, #56]	@ (80026dc <__aeabi_f2d+0x88>)
 80026a4:	0312      	lsls	r2, r2, #12
 80026a6:	1a1b      	subs	r3, r3, r0
 80026a8:	055b      	lsls	r3, r3, #21
 80026aa:	0b12      	lsrs	r2, r2, #12
 80026ac:	0d5b      	lsrs	r3, r3, #21
 80026ae:	e7e1      	b.n	8002674 <__aeabi_f2d+0x20>
 80026b0:	2d00      	cmp	r5, #0
 80026b2:	d009      	beq.n	80026c8 <__aeabi_f2d+0x74>
 80026b4:	0b13      	lsrs	r3, r2, #12
 80026b6:	2280      	movs	r2, #128	@ 0x80
 80026b8:	0312      	lsls	r2, r2, #12
 80026ba:	431a      	orrs	r2, r3
 80026bc:	076d      	lsls	r5, r5, #29
 80026be:	4b08      	ldr	r3, [pc, #32]	@ (80026e0 <__aeabi_f2d+0x8c>)
 80026c0:	e7d8      	b.n	8002674 <__aeabi_f2d+0x20>
 80026c2:	2300      	movs	r3, #0
 80026c4:	2200      	movs	r2, #0
 80026c6:	e7d5      	b.n	8002674 <__aeabi_f2d+0x20>
 80026c8:	2200      	movs	r2, #0
 80026ca:	4b05      	ldr	r3, [pc, #20]	@ (80026e0 <__aeabi_f2d+0x8c>)
 80026cc:	e7d2      	b.n	8002674 <__aeabi_f2d+0x20>
 80026ce:	0003      	movs	r3, r0
 80026d0:	002a      	movs	r2, r5
 80026d2:	3b0b      	subs	r3, #11
 80026d4:	409a      	lsls	r2, r3
 80026d6:	2500      	movs	r5, #0
 80026d8:	e7e3      	b.n	80026a2 <__aeabi_f2d+0x4e>
 80026da:	46c0      	nop			@ (mov r8, r8)
 80026dc:	00000389 	.word	0x00000389
 80026e0:	000007ff 	.word	0x000007ff

080026e4 <__clzsi2>:
 80026e4:	211c      	movs	r1, #28
 80026e6:	2301      	movs	r3, #1
 80026e8:	041b      	lsls	r3, r3, #16
 80026ea:	4298      	cmp	r0, r3
 80026ec:	d301      	bcc.n	80026f2 <__clzsi2+0xe>
 80026ee:	0c00      	lsrs	r0, r0, #16
 80026f0:	3910      	subs	r1, #16
 80026f2:	0a1b      	lsrs	r3, r3, #8
 80026f4:	4298      	cmp	r0, r3
 80026f6:	d301      	bcc.n	80026fc <__clzsi2+0x18>
 80026f8:	0a00      	lsrs	r0, r0, #8
 80026fa:	3908      	subs	r1, #8
 80026fc:	091b      	lsrs	r3, r3, #4
 80026fe:	4298      	cmp	r0, r3
 8002700:	d301      	bcc.n	8002706 <__clzsi2+0x22>
 8002702:	0900      	lsrs	r0, r0, #4
 8002704:	3904      	subs	r1, #4
 8002706:	a202      	add	r2, pc, #8	@ (adr r2, 8002710 <__clzsi2+0x2c>)
 8002708:	5c10      	ldrb	r0, [r2, r0]
 800270a:	1840      	adds	r0, r0, r1
 800270c:	4770      	bx	lr
 800270e:	46c0      	nop			@ (mov r8, r8)
 8002710:	02020304 	.word	0x02020304
 8002714:	01010101 	.word	0x01010101
	...

08002720 <__divdi3>:
 8002720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002722:	46d6      	mov	lr, sl
 8002724:	464f      	mov	r7, r9
 8002726:	4646      	mov	r6, r8
 8002728:	b5c0      	push	{r6, r7, lr}
 800272a:	0004      	movs	r4, r0
 800272c:	000d      	movs	r5, r1
 800272e:	0010      	movs	r0, r2
 8002730:	0019      	movs	r1, r3
 8002732:	b082      	sub	sp, #8
 8002734:	2d00      	cmp	r5, #0
 8002736:	da00      	bge.n	800273a <__divdi3+0x1a>
 8002738:	e087      	b.n	800284a <__divdi3+0x12a>
 800273a:	2b00      	cmp	r3, #0
 800273c:	db0b      	blt.n	8002756 <__divdi3+0x36>
 800273e:	0016      	movs	r6, r2
 8002740:	001f      	movs	r7, r3
 8002742:	42ab      	cmp	r3, r5
 8002744:	d919      	bls.n	800277a <__divdi3+0x5a>
 8002746:	2000      	movs	r0, #0
 8002748:	2100      	movs	r1, #0
 800274a:	b002      	add	sp, #8
 800274c:	bce0      	pop	{r5, r6, r7}
 800274e:	46ba      	mov	sl, r7
 8002750:	46b1      	mov	r9, r6
 8002752:	46a8      	mov	r8, r5
 8002754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002756:	2700      	movs	r7, #0
 8002758:	4246      	negs	r6, r0
 800275a:	418f      	sbcs	r7, r1
 800275c:	42af      	cmp	r7, r5
 800275e:	d804      	bhi.n	800276a <__divdi3+0x4a>
 8002760:	d000      	beq.n	8002764 <__divdi3+0x44>
 8002762:	e082      	b.n	800286a <__divdi3+0x14a>
 8002764:	42a6      	cmp	r6, r4
 8002766:	d800      	bhi.n	800276a <__divdi3+0x4a>
 8002768:	e07f      	b.n	800286a <__divdi3+0x14a>
 800276a:	2000      	movs	r0, #0
 800276c:	2100      	movs	r1, #0
 800276e:	e08f      	b.n	8002890 <__divdi3+0x170>
 8002770:	2700      	movs	r7, #0
 8002772:	4246      	negs	r6, r0
 8002774:	418f      	sbcs	r7, r1
 8002776:	429f      	cmp	r7, r3
 8002778:	d8e5      	bhi.n	8002746 <__divdi3+0x26>
 800277a:	42af      	cmp	r7, r5
 800277c:	d100      	bne.n	8002780 <__divdi3+0x60>
 800277e:	e098      	b.n	80028b2 <__divdi3+0x192>
 8002780:	2300      	movs	r3, #0
 8002782:	4699      	mov	r9, r3
 8002784:	0039      	movs	r1, r7
 8002786:	0030      	movs	r0, r6
 8002788:	f000 f8bc 	bl	8002904 <__clzdi2>
 800278c:	4680      	mov	r8, r0
 800278e:	0029      	movs	r1, r5
 8002790:	0020      	movs	r0, r4
 8002792:	f000 f8b7 	bl	8002904 <__clzdi2>
 8002796:	4643      	mov	r3, r8
 8002798:	1a1b      	subs	r3, r3, r0
 800279a:	4698      	mov	r8, r3
 800279c:	3b20      	subs	r3, #32
 800279e:	d500      	bpl.n	80027a2 <__divdi3+0x82>
 80027a0:	e07c      	b.n	800289c <__divdi3+0x17c>
 80027a2:	0031      	movs	r1, r6
 80027a4:	4099      	lsls	r1, r3
 80027a6:	469a      	mov	sl, r3
 80027a8:	000b      	movs	r3, r1
 80027aa:	0031      	movs	r1, r6
 80027ac:	4640      	mov	r0, r8
 80027ae:	4081      	lsls	r1, r0
 80027b0:	000a      	movs	r2, r1
 80027b2:	42ab      	cmp	r3, r5
 80027b4:	d85f      	bhi.n	8002876 <__divdi3+0x156>
 80027b6:	d05c      	beq.n	8002872 <__divdi3+0x152>
 80027b8:	4651      	mov	r1, sl
 80027ba:	1aa4      	subs	r4, r4, r2
 80027bc:	419d      	sbcs	r5, r3
 80027be:	2900      	cmp	r1, #0
 80027c0:	da00      	bge.n	80027c4 <__divdi3+0xa4>
 80027c2:	e093      	b.n	80028ec <__divdi3+0x1cc>
 80027c4:	2100      	movs	r1, #0
 80027c6:	2000      	movs	r0, #0
 80027c8:	2601      	movs	r6, #1
 80027ca:	9000      	str	r0, [sp, #0]
 80027cc:	9101      	str	r1, [sp, #4]
 80027ce:	4651      	mov	r1, sl
 80027d0:	408e      	lsls	r6, r1
 80027d2:	9601      	str	r6, [sp, #4]
 80027d4:	4641      	mov	r1, r8
 80027d6:	2601      	movs	r6, #1
 80027d8:	408e      	lsls	r6, r1
 80027da:	4641      	mov	r1, r8
 80027dc:	9600      	str	r6, [sp, #0]
 80027de:	2900      	cmp	r1, #0
 80027e0:	d050      	beq.n	8002884 <__divdi3+0x164>
 80027e2:	07d9      	lsls	r1, r3, #31
 80027e4:	0856      	lsrs	r6, r2, #1
 80027e6:	430e      	orrs	r6, r1
 80027e8:	085f      	lsrs	r7, r3, #1
 80027ea:	4641      	mov	r1, r8
 80027ec:	2201      	movs	r2, #1
 80027ee:	2300      	movs	r3, #0
 80027f0:	e00c      	b.n	800280c <__divdi3+0xec>
 80027f2:	42af      	cmp	r7, r5
 80027f4:	d101      	bne.n	80027fa <__divdi3+0xda>
 80027f6:	42a6      	cmp	r6, r4
 80027f8:	d80a      	bhi.n	8002810 <__divdi3+0xf0>
 80027fa:	1ba4      	subs	r4, r4, r6
 80027fc:	41bd      	sbcs	r5, r7
 80027fe:	1924      	adds	r4, r4, r4
 8002800:	416d      	adcs	r5, r5
 8002802:	3901      	subs	r1, #1
 8002804:	18a4      	adds	r4, r4, r2
 8002806:	415d      	adcs	r5, r3
 8002808:	2900      	cmp	r1, #0
 800280a:	d006      	beq.n	800281a <__divdi3+0xfa>
 800280c:	42af      	cmp	r7, r5
 800280e:	d9f0      	bls.n	80027f2 <__divdi3+0xd2>
 8002810:	3901      	subs	r1, #1
 8002812:	1924      	adds	r4, r4, r4
 8002814:	416d      	adcs	r5, r5
 8002816:	2900      	cmp	r1, #0
 8002818:	d1f8      	bne.n	800280c <__divdi3+0xec>
 800281a:	9800      	ldr	r0, [sp, #0]
 800281c:	9901      	ldr	r1, [sp, #4]
 800281e:	4653      	mov	r3, sl
 8002820:	1900      	adds	r0, r0, r4
 8002822:	4169      	adcs	r1, r5
 8002824:	2b00      	cmp	r3, #0
 8002826:	db48      	blt.n	80028ba <__divdi3+0x19a>
 8002828:	002e      	movs	r6, r5
 800282a:	002c      	movs	r4, r5
 800282c:	40de      	lsrs	r6, r3
 800282e:	4643      	mov	r3, r8
 8002830:	40dc      	lsrs	r4, r3
 8002832:	4653      	mov	r3, sl
 8002834:	2b00      	cmp	r3, #0
 8002836:	db50      	blt.n	80028da <__divdi3+0x1ba>
 8002838:	0034      	movs	r4, r6
 800283a:	409c      	lsls	r4, r3
 800283c:	0023      	movs	r3, r4
 800283e:	4644      	mov	r4, r8
 8002840:	40a6      	lsls	r6, r4
 8002842:	0032      	movs	r2, r6
 8002844:	1a80      	subs	r0, r0, r2
 8002846:	4199      	sbcs	r1, r3
 8002848:	e01e      	b.n	8002888 <__divdi3+0x168>
 800284a:	2300      	movs	r3, #0
 800284c:	4262      	negs	r2, r4
 800284e:	41ab      	sbcs	r3, r5
 8002850:	0014      	movs	r4, r2
 8002852:	001d      	movs	r5, r3
 8002854:	2900      	cmp	r1, #0
 8002856:	db8b      	blt.n	8002770 <__divdi3+0x50>
 8002858:	0006      	movs	r6, r0
 800285a:	000f      	movs	r7, r1
 800285c:	4299      	cmp	r1, r3
 800285e:	d900      	bls.n	8002862 <__divdi3+0x142>
 8002860:	e771      	b.n	8002746 <__divdi3+0x26>
 8002862:	d102      	bne.n	800286a <__divdi3+0x14a>
 8002864:	4290      	cmp	r0, r2
 8002866:	d900      	bls.n	800286a <__divdi3+0x14a>
 8002868:	e76d      	b.n	8002746 <__divdi3+0x26>
 800286a:	2301      	movs	r3, #1
 800286c:	425b      	negs	r3, r3
 800286e:	4699      	mov	r9, r3
 8002870:	e788      	b.n	8002784 <__divdi3+0x64>
 8002872:	42a1      	cmp	r1, r4
 8002874:	d9a0      	bls.n	80027b8 <__divdi3+0x98>
 8002876:	2100      	movs	r1, #0
 8002878:	2000      	movs	r0, #0
 800287a:	9000      	str	r0, [sp, #0]
 800287c:	9101      	str	r1, [sp, #4]
 800287e:	4641      	mov	r1, r8
 8002880:	2900      	cmp	r1, #0
 8002882:	d1ae      	bne.n	80027e2 <__divdi3+0xc2>
 8002884:	9800      	ldr	r0, [sp, #0]
 8002886:	9901      	ldr	r1, [sp, #4]
 8002888:	464b      	mov	r3, r9
 800288a:	2b00      	cmp	r3, #0
 800288c:	d100      	bne.n	8002890 <__divdi3+0x170>
 800288e:	e75c      	b.n	800274a <__divdi3+0x2a>
 8002890:	0003      	movs	r3, r0
 8002892:	000c      	movs	r4, r1
 8002894:	2100      	movs	r1, #0
 8002896:	4258      	negs	r0, r3
 8002898:	41a1      	sbcs	r1, r4
 800289a:	e756      	b.n	800274a <__divdi3+0x2a>
 800289c:	4642      	mov	r2, r8
 800289e:	0038      	movs	r0, r7
 80028a0:	469a      	mov	sl, r3
 80028a2:	2320      	movs	r3, #32
 80028a4:	0031      	movs	r1, r6
 80028a6:	4090      	lsls	r0, r2
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	40d9      	lsrs	r1, r3
 80028ac:	0003      	movs	r3, r0
 80028ae:	430b      	orrs	r3, r1
 80028b0:	e77b      	b.n	80027aa <__divdi3+0x8a>
 80028b2:	42a6      	cmp	r6, r4
 80028b4:	d800      	bhi.n	80028b8 <__divdi3+0x198>
 80028b6:	e763      	b.n	8002780 <__divdi3+0x60>
 80028b8:	e745      	b.n	8002746 <__divdi3+0x26>
 80028ba:	4642      	mov	r2, r8
 80028bc:	2320      	movs	r3, #32
 80028be:	1a9b      	subs	r3, r3, r2
 80028c0:	002a      	movs	r2, r5
 80028c2:	409a      	lsls	r2, r3
 80028c4:	0026      	movs	r6, r4
 80028c6:	0013      	movs	r3, r2
 80028c8:	4642      	mov	r2, r8
 80028ca:	40d6      	lsrs	r6, r2
 80028cc:	002c      	movs	r4, r5
 80028ce:	431e      	orrs	r6, r3
 80028d0:	4643      	mov	r3, r8
 80028d2:	40dc      	lsrs	r4, r3
 80028d4:	4653      	mov	r3, sl
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	daae      	bge.n	8002838 <__divdi3+0x118>
 80028da:	4642      	mov	r2, r8
 80028dc:	2320      	movs	r3, #32
 80028de:	0035      	movs	r5, r6
 80028e0:	4094      	lsls	r4, r2
 80028e2:	1a9b      	subs	r3, r3, r2
 80028e4:	40dd      	lsrs	r5, r3
 80028e6:	0023      	movs	r3, r4
 80028e8:	432b      	orrs	r3, r5
 80028ea:	e7a8      	b.n	800283e <__divdi3+0x11e>
 80028ec:	4641      	mov	r1, r8
 80028ee:	2620      	movs	r6, #32
 80028f0:	2701      	movs	r7, #1
 80028f2:	1a76      	subs	r6, r6, r1
 80028f4:	2000      	movs	r0, #0
 80028f6:	2100      	movs	r1, #0
 80028f8:	40f7      	lsrs	r7, r6
 80028fa:	9000      	str	r0, [sp, #0]
 80028fc:	9101      	str	r1, [sp, #4]
 80028fe:	9701      	str	r7, [sp, #4]
 8002900:	e768      	b.n	80027d4 <__divdi3+0xb4>
 8002902:	46c0      	nop			@ (mov r8, r8)

08002904 <__clzdi2>:
 8002904:	b510      	push	{r4, lr}
 8002906:	2900      	cmp	r1, #0
 8002908:	d103      	bne.n	8002912 <__clzdi2+0xe>
 800290a:	f7ff feeb 	bl	80026e4 <__clzsi2>
 800290e:	3020      	adds	r0, #32
 8002910:	e002      	b.n	8002918 <__clzdi2+0x14>
 8002912:	0008      	movs	r0, r1
 8002914:	f7ff fee6 	bl	80026e4 <__clzsi2>
 8002918:	bd10      	pop	{r4, pc}
 800291a:	46c0      	nop			@ (mov r8, r8)

0800291c <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2203      	movs	r2, #3
 8002928:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2203      	movs	r2, #3
 8002934:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2203      	movs	r2, #3
 800293a:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2203      	movs	r2, #3
 8002940:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2203      	movs	r2, #3
 8002946:	715a      	strb	r2, [r3, #5]
}
 8002948:	46c0      	nop			@ (mov r8, r8)
 800294a:	46bd      	mov	sp, r7
 800294c:	b002      	add	sp, #8
 800294e:	bd80      	pop	{r7, pc}

08002950 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8002950:	b590      	push	{r4, r7, lr}
 8002952:	b08b      	sub	sp, #44	@ 0x2c
 8002954:	af04      	add	r7, sp, #16
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	607a      	str	r2, [r7, #4]
 800295a:	240b      	movs	r4, #11
 800295c:	193b      	adds	r3, r7, r4
 800295e:	1c0a      	adds	r2, r1, #0
 8002960:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002966:	2116      	movs	r1, #22
 8002968:	187a      	adds	r2, r7, r1
 800296a:	18db      	adds	r3, r3, r3
 800296c:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002972:	193b      	adds	r3, r7, r4
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	b29a      	uxth	r2, r3
 8002978:	187b      	adds	r3, r7, r1
 800297a:	8819      	ldrh	r1, [r3, #0]
 800297c:	4b0f      	ldr	r3, [pc, #60]	@ (80029bc <read_register16+0x6c>)
 800297e:	9302      	str	r3, [sp, #8]
 8002980:	2302      	movs	r3, #2
 8002982:	9301      	str	r3, [sp, #4]
 8002984:	2414      	movs	r4, #20
 8002986:	193b      	adds	r3, r7, r4
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	2301      	movs	r3, #1
 800298c:	f003 fb80 	bl	8006090 <HAL_I2C_Mem_Read>
 8002990:	1e03      	subs	r3, r0, #0
 8002992:	d10e      	bne.n	80029b2 <read_register16+0x62>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8002994:	0021      	movs	r1, r4
 8002996:	187b      	adds	r3, r7, r1
 8002998:	785b      	ldrb	r3, [r3, #1]
 800299a:	021b      	lsls	r3, r3, #8
 800299c:	b21a      	sxth	r2, r3
 800299e:	187b      	adds	r3, r7, r1
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	b21b      	sxth	r3, r3
 80029a4:	4313      	orrs	r3, r2
 80029a6:	b21b      	sxth	r3, r3
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	801a      	strh	r2, [r3, #0]
		return true;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <read_register16+0x64>
	} else
		return false;
 80029b2:	2300      	movs	r3, #0

}
 80029b4:	0018      	movs	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	b007      	add	sp, #28
 80029ba:	bd90      	pop	{r4, r7, pc}
 80029bc:	00001388 	.word	0x00001388

080029c0 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80029c0:	b5b0      	push	{r4, r5, r7, lr}
 80029c2:	b08a      	sub	sp, #40	@ 0x28
 80029c4:	af04      	add	r7, sp, #16
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	0008      	movs	r0, r1
 80029ca:	607a      	str	r2, [r7, #4]
 80029cc:	0019      	movs	r1, r3
 80029ce:	240b      	movs	r4, #11
 80029d0:	193b      	adds	r3, r7, r4
 80029d2:	1c02      	adds	r2, r0, #0
 80029d4:	701a      	strb	r2, [r3, #0]
 80029d6:	250a      	movs	r5, #10
 80029d8:	197b      	adds	r3, r7, r5
 80029da:	1c0a      	adds	r2, r1, #0
 80029dc:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80029e2:	2116      	movs	r1, #22
 80029e4:	187a      	adds	r2, r7, r1
 80029e6:	18db      	adds	r3, r3, r3
 80029e8:	8013      	strh	r3, [r2, #0]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80029ee:	193b      	adds	r3, r7, r4
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	b29c      	uxth	r4, r3
 80029f4:	197b      	adds	r3, r7, r5
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	187a      	adds	r2, r7, r1
 80029fc:	8811      	ldrh	r1, [r2, #0]
 80029fe:	4a09      	ldr	r2, [pc, #36]	@ (8002a24 <read_data+0x64>)
 8002a00:	9202      	str	r2, [sp, #8]
 8002a02:	9301      	str	r3, [sp, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	2301      	movs	r3, #1
 8002a0a:	0022      	movs	r2, r4
 8002a0c:	f003 fb40 	bl	8006090 <HAL_I2C_Mem_Read>
 8002a10:	1e03      	subs	r3, r0, #0
 8002a12:	d101      	bne.n	8002a18 <read_data+0x58>
		return 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	e000      	b.n	8002a1a <read_data+0x5a>
	else
		return 1;
 8002a18:	2301      	movs	r3, #1

}
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b006      	add	sp, #24
 8002a20:	bdb0      	pop	{r4, r5, r7, pc}
 8002a22:	46c0      	nop			@ (mov r8, r8)
 8002a24:	00001388 	.word	0x00001388

08002a28 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2188      	movs	r1, #136	@ 0x88
 8002a36:	0018      	movs	r0, r3
 8002a38:	f7ff ff8a 	bl	8002950 <read_register16>
 8002a3c:	1e03      	subs	r3, r0, #0
 8002a3e:	d100      	bne.n	8002a42 <read_calibration_data+0x1a>
 8002a40:	e06d      	b.n	8002b1e <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	1c9a      	adds	r2, r3, #2
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	218a      	movs	r1, #138	@ 0x8a
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f7ff ff80 	bl	8002950 <read_register16>
 8002a50:	1e03      	subs	r3, r0, #0
 8002a52:	d100      	bne.n	8002a56 <read_calibration_data+0x2e>
 8002a54:	e063      	b.n	8002b1e <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	1d1a      	adds	r2, r3, #4
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	218c      	movs	r1, #140	@ 0x8c
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f7ff ff76 	bl	8002950 <read_register16>
 8002a64:	1e03      	subs	r3, r0, #0
 8002a66:	d05a      	beq.n	8002b1e <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	1d9a      	adds	r2, r3, #6
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	218e      	movs	r1, #142	@ 0x8e
 8002a70:	0018      	movs	r0, r3
 8002a72:	f7ff ff6d 	bl	8002950 <read_register16>
 8002a76:	1e03      	subs	r3, r0, #0
 8002a78:	d051      	beq.n	8002b1e <read_calibration_data+0xf6>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3308      	adds	r3, #8
 8002a7e:	001a      	movs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2190      	movs	r1, #144	@ 0x90
 8002a84:	0018      	movs	r0, r3
 8002a86:	f7ff ff63 	bl	8002950 <read_register16>
 8002a8a:	1e03      	subs	r3, r0, #0
 8002a8c:	d047      	beq.n	8002b1e <read_calibration_data+0xf6>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	330a      	adds	r3, #10
 8002a92:	001a      	movs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2192      	movs	r1, #146	@ 0x92
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f7ff ff59 	bl	8002950 <read_register16>
 8002a9e:	1e03      	subs	r3, r0, #0
 8002aa0:	d03d      	beq.n	8002b1e <read_calibration_data+0xf6>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	330c      	adds	r3, #12
 8002aa6:	001a      	movs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2194      	movs	r1, #148	@ 0x94
 8002aac:	0018      	movs	r0, r3
 8002aae:	f7ff ff4f 	bl	8002950 <read_register16>
 8002ab2:	1e03      	subs	r3, r0, #0
 8002ab4:	d033      	beq.n	8002b1e <read_calibration_data+0xf6>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	330e      	adds	r3, #14
 8002aba:	001a      	movs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2196      	movs	r1, #150	@ 0x96
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f7ff ff45 	bl	8002950 <read_register16>
 8002ac6:	1e03      	subs	r3, r0, #0
 8002ac8:	d029      	beq.n	8002b1e <read_calibration_data+0xf6>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3310      	adds	r3, #16
 8002ace:	001a      	movs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2198      	movs	r1, #152	@ 0x98
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f7ff ff3b 	bl	8002950 <read_register16>
 8002ada:	1e03      	subs	r3, r0, #0
 8002adc:	d01f      	beq.n	8002b1e <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3312      	adds	r3, #18
 8002ae2:	001a      	movs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	219a      	movs	r1, #154	@ 0x9a
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f7ff ff31 	bl	8002950 <read_register16>
 8002aee:	1e03      	subs	r3, r0, #0
 8002af0:	d015      	beq.n	8002b1e <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3314      	adds	r3, #20
 8002af6:	001a      	movs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	219c      	movs	r1, #156	@ 0x9c
 8002afc:	0018      	movs	r0, r3
 8002afe:	f7ff ff27 	bl	8002950 <read_register16>
 8002b02:	1e03      	subs	r3, r0, #0
 8002b04:	d00b      	beq.n	8002b1e <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3316      	adds	r3, #22
 8002b0a:	001a      	movs	r2, r3
			&& read_register16(dev, 0x9e,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	219e      	movs	r1, #158	@ 0x9e
 8002b10:	0018      	movs	r0, r3
 8002b12:	f7ff ff1d 	bl	8002950 <read_register16>
 8002b16:	1e03      	subs	r3, r0, #0
 8002b18:	d001      	beq.n	8002b1e <read_calibration_data+0xf6>

		return true;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <read_calibration_data+0xf8>
	}

	return false;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b002      	add	sp, #8
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8002b28:	b5b0      	push	{r4, r5, r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3318      	adds	r3, #24
 8002b34:	001a      	movs	r2, r3
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	2301      	movs	r3, #1
 8002b3a:	21a1      	movs	r1, #161	@ 0xa1
 8002b3c:	f7ff ff40 	bl	80029c0 <read_data>
 8002b40:	1e03      	subs	r3, r0, #0
 8002b42:	d14b      	bne.n	8002bdc <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	331a      	adds	r3, #26
 8002b48:	001a      	movs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	21e1      	movs	r1, #225	@ 0xe1
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f7ff fefe 	bl	8002950 <read_register16>
 8002b54:	1e03      	subs	r3, r0, #0
 8002b56:	d041      	beq.n	8002bdc <read_hum_calibration_data+0xb4>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	331c      	adds	r3, #28
 8002b5c:	001a      	movs	r2, r3
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	2301      	movs	r3, #1
 8002b62:	21e3      	movs	r1, #227	@ 0xe3
 8002b64:	f7ff ff2c 	bl	80029c0 <read_data>
 8002b68:	1e03      	subs	r3, r0, #0
 8002b6a:	d137      	bne.n	8002bdc <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe4, &h4)
 8002b6c:	240e      	movs	r4, #14
 8002b6e:	193a      	adds	r2, r7, r4
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	21e4      	movs	r1, #228	@ 0xe4
 8002b74:	0018      	movs	r0, r3
 8002b76:	f7ff feeb 	bl	8002950 <read_register16>
 8002b7a:	1e03      	subs	r3, r0, #0
 8002b7c:	d02e      	beq.n	8002bdc <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe5, &h5)
 8002b7e:	250c      	movs	r5, #12
 8002b80:	197a      	adds	r2, r7, r5
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	21e5      	movs	r1, #229	@ 0xe5
 8002b86:	0018      	movs	r0, r3
 8002b88:	f7ff fee2 	bl	8002950 <read_register16>
 8002b8c:	1e03      	subs	r3, r0, #0
 8002b8e:	d025      	beq.n	8002bdc <read_hum_calibration_data+0xb4>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3322      	adds	r3, #34	@ 0x22
 8002b94:	001a      	movs	r2, r3
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	2301      	movs	r3, #1
 8002b9a:	21e7      	movs	r1, #231	@ 0xe7
 8002b9c:	f7ff ff10 	bl	80029c0 <read_data>
 8002ba0:	1e03      	subs	r3, r0, #0
 8002ba2:	d11b      	bne.n	8002bdc <read_hum_calibration_data+0xb4>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8002ba4:	193b      	adds	r3, r7, r4
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	b21a      	sxth	r2, r3
 8002bac:	23ff      	movs	r3, #255	@ 0xff
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	b21a      	sxth	r2, r3
 8002bb4:	193b      	adds	r3, r7, r4
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	121b      	asrs	r3, r3, #8
 8002bba:	b21b      	sxth	r3, r3
 8002bbc:	210f      	movs	r1, #15
 8002bbe:	400b      	ands	r3, r1
 8002bc0:	b21b      	sxth	r3, r3
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	b21a      	sxth	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8002bca:	197b      	adds	r3, r7, r5
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	091b      	lsrs	r3, r3, #4
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	b21a      	sxth	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	841a      	strh	r2, [r3, #32]

		return true;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e000      	b.n	8002bde <read_hum_calibration_data+0xb6>
	}

	return false;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	0018      	movs	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	b004      	add	sp, #16
 8002be4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002be8 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af04      	add	r7, sp, #16
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	0008      	movs	r0, r1
 8002bf2:	0011      	movs	r1, r2
 8002bf4:	1cfb      	adds	r3, r7, #3
 8002bf6:	1c02      	adds	r2, r0, #0
 8002bf8:	701a      	strb	r2, [r3, #0]
 8002bfa:	1cbb      	adds	r3, r7, #2
 8002bfc:	1c0a      	adds	r2, r1, #0
 8002bfe:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002c04:	210e      	movs	r1, #14
 8002c06:	187a      	adds	r2, r7, r1
 8002c08:	18db      	adds	r3, r3, r3
 8002c0a:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002c10:	1cfb      	adds	r3, r7, #3
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	187b      	adds	r3, r7, r1
 8002c18:	8819      	ldrh	r1, [r3, #0]
 8002c1a:	4b09      	ldr	r3, [pc, #36]	@ (8002c40 <write_register8+0x58>)
 8002c1c:	9302      	str	r3, [sp, #8]
 8002c1e:	2301      	movs	r3, #1
 8002c20:	9301      	str	r3, [sp, #4]
 8002c22:	1cbb      	adds	r3, r7, #2
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	2301      	movs	r3, #1
 8002c28:	f003 f904 	bl	8005e34 <HAL_I2C_Mem_Write>
 8002c2c:	1e03      	subs	r3, r0, #0
 8002c2e:	d101      	bne.n	8002c34 <write_register8+0x4c>
		return false;
 8002c30:	2300      	movs	r3, #0
 8002c32:	e000      	b.n	8002c36 <write_register8+0x4e>
	else
		return true;
 8002c34:	2301      	movs	r3, #1
}
 8002c36:	0018      	movs	r0, r3
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	b004      	add	sp, #16
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	46c0      	nop			@ (mov r8, r8)
 8002c40:	00002710 	.word	0x00002710

08002c44 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8002c44:	b590      	push	{r4, r7, lr}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002c52:	2b76      	cmp	r3, #118	@ 0x76
 8002c54:	d005      	beq.n	8002c62 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002c5a:	2b77      	cmp	r3, #119	@ 0x77
 8002c5c:	d001      	beq.n	8002c62 <bmp280_init+0x1e>

		return false;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	e0a3      	b.n	8002daa <bmp280_init+0x166>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3332      	adds	r3, #50	@ 0x32
 8002c66:	001a      	movs	r2, r3
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	21d0      	movs	r1, #208	@ 0xd0
 8002c6e:	f7ff fea7 	bl	80029c0 <read_data>
 8002c72:	1e03      	subs	r3, r0, #0
 8002c74:	d001      	beq.n	8002c7a <bmp280_init+0x36>
		return false;
 8002c76:	2300      	movs	r3, #0
 8002c78:	e097      	b.n	8002daa <bmp280_init+0x166>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2232      	movs	r2, #50	@ 0x32
 8002c7e:	5c9b      	ldrb	r3, [r3, r2]
 8002c80:	2b58      	cmp	r3, #88	@ 0x58
 8002c82:	d006      	beq.n	8002c92 <bmp280_init+0x4e>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2232      	movs	r2, #50	@ 0x32
 8002c88:	5c9b      	ldrb	r3, [r3, r2]
 8002c8a:	2b60      	cmp	r3, #96	@ 0x60
 8002c8c:	d001      	beq.n	8002c92 <bmp280_init+0x4e>

		return false;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	e08b      	b.n	8002daa <bmp280_init+0x166>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	22b6      	movs	r2, #182	@ 0xb6
 8002c96:	21e0      	movs	r1, #224	@ 0xe0
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f7ff ffa5 	bl	8002be8 <write_register8>
 8002c9e:	1e03      	subs	r3, r0, #0
 8002ca0:	d001      	beq.n	8002ca6 <bmp280_init+0x62>
		return false;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	e081      	b.n	8002daa <bmp280_init+0x166>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8002ca6:	240c      	movs	r4, #12
 8002ca8:	193a      	adds	r2, r7, r4
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	2301      	movs	r3, #1
 8002cae:	21f3      	movs	r1, #243	@ 0xf3
 8002cb0:	f7ff fe86 	bl	80029c0 <read_data>
 8002cb4:	1e03      	subs	r3, r0, #0
 8002cb6:	d1f6      	bne.n	8002ca6 <bmp280_init+0x62>
				&& (status & 1) == 0)
 8002cb8:	193b      	adds	r3, r7, r4
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	001a      	movs	r2, r3
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	d1f0      	bne.n	8002ca6 <bmp280_init+0x62>
			break;
	}

	if (!read_calibration_data(dev)) {
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f7ff feae 	bl	8002a28 <read_calibration_data>
 8002ccc:	0003      	movs	r3, r0
 8002cce:	001a      	movs	r2, r3
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	4053      	eors	r3, r2
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d100      	bne.n	8002cdc <bmp280_init+0x98>
 8002cda:	e001      	b.n	8002ce0 <bmp280_init+0x9c>
		return false;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	e064      	b.n	8002daa <bmp280_init+0x166>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2232      	movs	r2, #50	@ 0x32
 8002ce4:	5c9b      	ldrb	r3, [r3, r2]
 8002ce6:	2b60      	cmp	r3, #96	@ 0x60
 8002ce8:	d10c      	bne.n	8002d04 <bmp280_init+0xc0>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	0018      	movs	r0, r3
 8002cee:	f7ff ff1b 	bl	8002b28 <read_hum_calibration_data>
 8002cf2:	0003      	movs	r3, r0
 8002cf4:	001a      	movs	r2, r3
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	4053      	eors	r3, r2
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <bmp280_init+0xc0>
		return false;
 8002d00:	2300      	movs	r3, #0
 8002d02:	e052      	b.n	8002daa <bmp280_init+0x166>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	795b      	ldrb	r3, [r3, #5]
 8002d08:	015b      	lsls	r3, r3, #5
 8002d0a:	b25a      	sxtb	r2, r3
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	785b      	ldrb	r3, [r3, #1]
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	b25b      	sxtb	r3, r3
 8002d14:	4313      	orrs	r3, r2
 8002d16:	b25a      	sxtb	r2, r3
 8002d18:	210f      	movs	r1, #15
 8002d1a:	187b      	adds	r3, r7, r1
 8002d1c:	701a      	strb	r2, [r3, #0]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8002d1e:	187b      	adds	r3, r7, r1
 8002d20:	781a      	ldrb	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	21f5      	movs	r1, #245	@ 0xf5
 8002d26:	0018      	movs	r0, r3
 8002d28:	f7ff ff5e 	bl	8002be8 <write_register8>
 8002d2c:	1e03      	subs	r3, r0, #0
 8002d2e:	d001      	beq.n	8002d34 <bmp280_init+0xf0>
		return false;
 8002d30:	2300      	movs	r3, #0
 8002d32:	e03a      	b.n	8002daa <bmp280_init+0x166>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d102      	bne.n	8002d42 <bmp280_init+0xfe>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	78db      	ldrb	r3, [r3, #3]
 8002d46:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8002d48:	b25a      	sxtb	r2, r3
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	789b      	ldrb	r3, [r3, #2]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	b25b      	sxtb	r3, r3
 8002d52:	4313      	orrs	r3, r2
 8002d54:	b25a      	sxtb	r2, r3
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	b25b      	sxtb	r3, r3
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	b25a      	sxtb	r2, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8002d60:	230e      	movs	r3, #14
 8002d62:	18fb      	adds	r3, r7, r3
 8002d64:	701a      	strb	r2, [r3, #0]

	if (dev->id == BME280_CHIP_ID) {
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2232      	movs	r2, #50	@ 0x32
 8002d6a:	5c9b      	ldrb	r3, [r3, r2]
 8002d6c:	2b60      	cmp	r3, #96	@ 0x60
 8002d6e:	d10f      	bne.n	8002d90 <bmp280_init+0x14c>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8002d70:	210d      	movs	r1, #13
 8002d72:	187b      	adds	r3, r7, r1
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	7912      	ldrb	r2, [r2, #4]
 8002d78:	701a      	strb	r2, [r3, #0]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8002d7a:	187b      	adds	r3, r7, r1
 8002d7c:	781a      	ldrb	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	21f2      	movs	r1, #242	@ 0xf2
 8002d82:	0018      	movs	r0, r3
 8002d84:	f7ff ff30 	bl	8002be8 <write_register8>
 8002d88:	1e03      	subs	r3, r0, #0
 8002d8a:	d001      	beq.n	8002d90 <bmp280_init+0x14c>
			return false;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	e00c      	b.n	8002daa <bmp280_init+0x166>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8002d90:	230e      	movs	r3, #14
 8002d92:	18fb      	adds	r3, r7, r3
 8002d94:	781a      	ldrb	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	21f4      	movs	r1, #244	@ 0xf4
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f7ff ff24 	bl	8002be8 <write_register8>
 8002da0:	1e03      	subs	r3, r0, #0
 8002da2:	d001      	beq.n	8002da8 <bmp280_init+0x164>
		return false;
 8002da4:	2300      	movs	r3, #0
 8002da6:	e000      	b.n	8002daa <bmp280_init+0x166>
	}

	return true;
 8002da8:	2301      	movs	r3, #1
}
 8002daa:	0018      	movs	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b005      	add	sp, #20
 8002db0:	bd90      	pop	{r4, r7, pc}

08002db2 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b086      	sub	sp, #24
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	10da      	asrs	r2, r3, #3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	2102      	movs	r1, #2
 8002dce:	5e52      	ldrsh	r2, [r2, r1]
 8002dd0:	4353      	muls	r3, r2
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8002dd2:	12db      	asrs	r3, r3, #11
 8002dd4:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	111b      	asrs	r3, r3, #4
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	8812      	ldrh	r2, [r2, #0]
 8002dde:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	1112      	asrs	r2, r2, #4
 8002de4:	68f9      	ldr	r1, [r7, #12]
 8002de6:	8809      	ldrh	r1, [r1, #0]
 8002de8:	1a52      	subs	r2, r2, r1
 8002dea:	4353      	muls	r3, r2
 8002dec:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	2104      	movs	r1, #4
 8002df2:	5e52      	ldrsh	r2, [r2, r1]
 8002df4:	4353      	muls	r3, r2
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8002df6:	139b      	asrs	r3, r3, #14
 8002df8:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	18d2      	adds	r2, r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	0013      	movs	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	189b      	adds	r3, r3, r2
 8002e0e:	3380      	adds	r3, #128	@ 0x80
 8002e10:	121b      	asrs	r3, r3, #8
}
 8002e12:	0018      	movs	r0, r3
 8002e14:	46bd      	mov	sp, r7
 8002e16:	b006      	add	sp, #24
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8002e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e1e:	b0af      	sub	sp, #188	@ 0xbc
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	239c      	movs	r3, #156	@ 0x9c
 8002e24:	18fe      	adds	r6, r7, r3
 8002e26:	6030      	str	r0, [r6, #0]
 8002e28:	2098      	movs	r0, #152	@ 0x98
 8002e2a:	1838      	adds	r0, r7, r0
 8002e2c:	6001      	str	r1, [r0, #0]
 8002e2e:	2194      	movs	r1, #148	@ 0x94
 8002e30:	1878      	adds	r0, r7, r1
 8002e32:	6002      	str	r2, [r0, #0]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8002e34:	187a      	adds	r2, r7, r1
 8002e36:	6813      	ldr	r3, [r2, #0]
 8002e38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002e3a:	17db      	asrs	r3, r3, #31
 8002e3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e3e:	4ace      	ldr	r2, [pc, #824]	@ (8003178 <compensate_pressure+0x35c>)
 8002e40:	2301      	movs	r3, #1
 8002e42:	425b      	negs	r3, r3
 8002e44:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002e46:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002e48:	1880      	adds	r0, r0, r2
 8002e4a:	4159      	adcs	r1, r3
 8002e4c:	0002      	movs	r2, r0
 8002e4e:	000b      	movs	r3, r1
 8002e50:	26b0      	movs	r6, #176	@ 0xb0
 8002e52:	19b9      	adds	r1, r7, r6
 8002e54:	600a      	str	r2, [r1, #0]
 8002e56:	604b      	str	r3, [r1, #4]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8002e58:	19ba      	adds	r2, r7, r6
 8002e5a:	6853      	ldr	r3, [r2, #4]
 8002e5c:	6812      	ldr	r2, [r2, #0]
 8002e5e:	19b9      	adds	r1, r7, r6
 8002e60:	6808      	ldr	r0, [r1, #0]
 8002e62:	6849      	ldr	r1, [r1, #4]
 8002e64:	f7fd fb40 	bl	80004e8 <__aeabi_lmul>
 8002e68:	0002      	movs	r2, r0
 8002e6a:	000b      	movs	r3, r1
 8002e6c:	0010      	movs	r0, r2
 8002e6e:	0019      	movs	r1, r3
 8002e70:	239c      	movs	r3, #156	@ 0x9c
 8002e72:	18fa      	adds	r2, r7, r3
 8002e74:	6813      	ldr	r3, [r2, #0]
 8002e76:	2210      	movs	r2, #16
 8002e78:	5e9b      	ldrsh	r3, [r3, r2]
 8002e7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e7c:	17db      	asrs	r3, r3, #31
 8002e7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e80:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e84:	f7fd fb30 	bl	80004e8 <__aeabi_lmul>
 8002e88:	0002      	movs	r2, r0
 8002e8a:	000b      	movs	r3, r1
 8002e8c:	21a8      	movs	r1, #168	@ 0xa8
 8002e8e:	1878      	adds	r0, r7, r1
 8002e90:	6002      	str	r2, [r0, #0]
 8002e92:	6043      	str	r3, [r0, #4]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8002e94:	239c      	movs	r3, #156	@ 0x9c
 8002e96:	18fa      	adds	r2, r7, r3
 8002e98:	6813      	ldr	r3, [r2, #0]
 8002e9a:	220e      	movs	r2, #14
 8002e9c:	5e9b      	ldrsh	r3, [r3, r2]
 8002e9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ea0:	17db      	asrs	r3, r3, #31
 8002ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ea4:	19ba      	adds	r2, r7, r6
 8002ea6:	6853      	ldr	r3, [r2, #4]
 8002ea8:	6812      	ldr	r2, [r2, #0]
 8002eaa:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002eac:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002eae:	f7fd fb1b 	bl	80004e8 <__aeabi_lmul>
 8002eb2:	0002      	movs	r2, r0
 8002eb4:	000b      	movs	r3, r1
 8002eb6:	0bd1      	lsrs	r1, r2, #15
 8002eb8:	045d      	lsls	r5, r3, #17
 8002eba:	430d      	orrs	r5, r1
 8002ebc:	0454      	lsls	r4, r2, #17
 8002ebe:	21a8      	movs	r1, #168	@ 0xa8
 8002ec0:	187a      	adds	r2, r7, r1
 8002ec2:	6853      	ldr	r3, [r2, #4]
 8002ec4:	6812      	ldr	r2, [r2, #0]
 8002ec6:	1912      	adds	r2, r2, r4
 8002ec8:	416b      	adcs	r3, r5
 8002eca:	1878      	adds	r0, r7, r1
 8002ecc:	6002      	str	r2, [r0, #0]
 8002ece:	6043      	str	r3, [r0, #4]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8002ed0:	259c      	movs	r5, #156	@ 0x9c
 8002ed2:	197b      	adds	r3, r7, r5
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	220c      	movs	r2, #12
 8002ed8:	5e9b      	ldrsh	r3, [r3, r2]
 8002eda:	643b      	str	r3, [r7, #64]	@ 0x40
 8002edc:	17db      	asrs	r3, r3, #31
 8002ede:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ee0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002eea:	000c      	movs	r4, r1
 8002eec:	187b      	adds	r3, r7, r1
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002ef4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ef6:	1812      	adds	r2, r2, r0
 8002ef8:	414b      	adcs	r3, r1
 8002efa:	1939      	adds	r1, r7, r4
 8002efc:	600a      	str	r2, [r1, #0]
 8002efe:	604b      	str	r3, [r1, #4]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8002f00:	0034      	movs	r4, r6
 8002f02:	193b      	adds	r3, r7, r4
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	1939      	adds	r1, r7, r4
 8002f0a:	6808      	ldr	r0, [r1, #0]
 8002f0c:	6849      	ldr	r1, [r1, #4]
 8002f0e:	f7fd faeb 	bl	80004e8 <__aeabi_lmul>
 8002f12:	0002      	movs	r2, r0
 8002f14:	000b      	movs	r3, r1
 8002f16:	0010      	movs	r0, r2
 8002f18:	0019      	movs	r1, r3
 8002f1a:	197b      	adds	r3, r7, r5
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	220a      	movs	r2, #10
 8002f20:	5e9b      	ldrsh	r3, [r3, r2]
 8002f22:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f24:	17db      	asrs	r3, r3, #31
 8002f26:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f2c:	f7fd fadc 	bl	80004e8 <__aeabi_lmul>
 8002f30:	0002      	movs	r2, r0
 8002f32:	000b      	movs	r3, r1
 8002f34:	0619      	lsls	r1, r3, #24
 8002f36:	468c      	mov	ip, r1
 8002f38:	0a10      	lsrs	r0, r2, #8
 8002f3a:	2688      	movs	r6, #136	@ 0x88
 8002f3c:	19b9      	adds	r1, r7, r6
 8002f3e:	6008      	str	r0, [r1, #0]
 8002f40:	19b8      	adds	r0, r7, r6
 8002f42:	6800      	ldr	r0, [r0, #0]
 8002f44:	4661      	mov	r1, ip
 8002f46:	4308      	orrs	r0, r1
 8002f48:	19b9      	adds	r1, r7, r6
 8002f4a:	6008      	str	r0, [r1, #0]
 8002f4c:	121b      	asrs	r3, r3, #8
 8002f4e:	228c      	movs	r2, #140	@ 0x8c
 8002f50:	18ba      	adds	r2, r7, r2
 8002f52:	6013      	str	r3, [r2, #0]
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8002f54:	197b      	adds	r3, r7, r5
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2208      	movs	r2, #8
 8002f5a:	5e9b      	ldrsh	r3, [r3, r2]
 8002f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f5e:	17db      	asrs	r3, r3, #31
 8002f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f62:	193b      	adds	r3, r7, r4
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f6c:	f7fd fabc 	bl	80004e8 <__aeabi_lmul>
 8002f70:	0002      	movs	r2, r0
 8002f72:	000b      	movs	r3, r1
 8002f74:	0d11      	lsrs	r1, r2, #20
 8002f76:	468c      	mov	ip, r1
 8002f78:	0318      	lsls	r0, r3, #12
 8002f7a:	2184      	movs	r1, #132	@ 0x84
 8002f7c:	1879      	adds	r1, r7, r1
 8002f7e:	6008      	str	r0, [r1, #0]
 8002f80:	2084      	movs	r0, #132	@ 0x84
 8002f82:	1839      	adds	r1, r7, r0
 8002f84:	6808      	ldr	r0, [r1, #0]
 8002f86:	4661      	mov	r1, ip
 8002f88:	4308      	orrs	r0, r1
 8002f8a:	2184      	movs	r1, #132	@ 0x84
 8002f8c:	1879      	adds	r1, r7, r1
 8002f8e:	6008      	str	r0, [r1, #0]
 8002f90:	0313      	lsls	r3, r2, #12
 8002f92:	2180      	movs	r1, #128	@ 0x80
 8002f94:	187a      	adds	r2, r7, r1
 8002f96:	6013      	str	r3, [r2, #0]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8002f98:	19bb      	adds	r3, r7, r6
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	1879      	adds	r1, r7, r1
 8002fa0:	6808      	ldr	r0, [r1, #0]
 8002fa2:	6849      	ldr	r1, [r1, #4]
 8002fa4:	1812      	adds	r2, r2, r0
 8002fa6:	414b      	adcs	r3, r1
 8002fa8:	1939      	adds	r1, r7, r4
 8002faa:	600a      	str	r2, [r1, #0]
 8002fac:	604b      	str	r3, [r1, #4]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8002fae:	193b      	adds	r3, r7, r4
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	6859      	ldr	r1, [r3, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2380      	movs	r3, #128	@ 0x80
 8002fb8:	021b      	lsls	r3, r3, #8
 8002fba:	1880      	adds	r0, r0, r2
 8002fbc:	4159      	adcs	r1, r3
 8002fbe:	197b      	adds	r3, r7, r5
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	88db      	ldrh	r3, [r3, #6]
 8002fc4:	623b      	str	r3, [r7, #32]
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fca:	6a3a      	ldr	r2, [r7, #32]
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fce:	f7fd fa8b 	bl	80004e8 <__aeabi_lmul>
 8002fd2:	0002      	movs	r2, r0
 8002fd4:	000b      	movs	r3, r1
 8002fd6:	1059      	asrs	r1, r3, #1
 8002fd8:	1938      	adds	r0, r7, r4
 8002fda:	6001      	str	r1, [r0, #0]
 8002fdc:	17db      	asrs	r3, r3, #31
 8002fde:	21b4      	movs	r1, #180	@ 0xb4
 8002fe0:	187a      	adds	r2, r7, r1
 8002fe2:	6013      	str	r3, [r2, #0]

	if (var1 == 0) {
 8002fe4:	193b      	adds	r3, r7, r4
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	187b      	adds	r3, r7, r1
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	431a      	orrs	r2, r3
 8002fee:	d101      	bne.n	8002ff4 <compensate_pressure+0x1d8>
		return 0;  // avoid exception caused by division by zero
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	e0bc      	b.n	800316e <compensate_pressure+0x352>
	}

	p = 1048576 - adc_press;
 8002ff4:	2398      	movs	r3, #152	@ 0x98
 8002ff6:	18fb      	adds	r3, r7, r3
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	2380      	movs	r3, #128	@ 0x80
 8002ffc:	035b      	lsls	r3, r3, #13
 8002ffe:	1a9b      	subs	r3, r3, r2
 8003000:	24a0      	movs	r4, #160	@ 0xa0
 8003002:	193a      	adds	r2, r7, r4
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	17db      	asrs	r3, r3, #31
 8003008:	25a4      	movs	r5, #164	@ 0xa4
 800300a:	197a      	adds	r2, r7, r5
 800300c:	6013      	str	r3, [r2, #0]
	p = (((p << 31) - var2) * 3125) / var1;
 800300e:	193b      	adds	r3, r7, r4
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	105b      	asrs	r3, r3, #1
 8003014:	61fb      	str	r3, [r7, #28]
 8003016:	193b      	adds	r3, r7, r4
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	07db      	lsls	r3, r3, #31
 800301c:	61bb      	str	r3, [r7, #24]
 800301e:	20a8      	movs	r0, #168	@ 0xa8
 8003020:	183a      	adds	r2, r7, r0
 8003022:	6853      	ldr	r3, [r2, #4]
 8003024:	6812      	ldr	r2, [r2, #0]
 8003026:	69b8      	ldr	r0, [r7, #24]
 8003028:	69f9      	ldr	r1, [r7, #28]
 800302a:	1a80      	subs	r0, r0, r2
 800302c:	4199      	sbcs	r1, r3
 800302e:	4a53      	ldr	r2, [pc, #332]	@ (800317c <compensate_pressure+0x360>)
 8003030:	2300      	movs	r3, #0
 8003032:	f7fd fa59 	bl	80004e8 <__aeabi_lmul>
 8003036:	0002      	movs	r2, r0
 8003038:	000b      	movs	r3, r1
 800303a:	0010      	movs	r0, r2
 800303c:	0019      	movs	r1, r3
 800303e:	23b0      	movs	r3, #176	@ 0xb0
 8003040:	18fa      	adds	r2, r7, r3
 8003042:	6853      	ldr	r3, [r2, #4]
 8003044:	6812      	ldr	r2, [r2, #0]
 8003046:	f7fd fa2b 	bl	80004a0 <__aeabi_ldivmod>
 800304a:	0002      	movs	r2, r0
 800304c:	000b      	movs	r3, r1
 800304e:	1939      	adds	r1, r7, r4
 8003050:	600a      	str	r2, [r1, #0]
 8003052:	604b      	str	r3, [r1, #4]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8003054:	269c      	movs	r6, #156	@ 0x9c
 8003056:	19ba      	adds	r2, r7, r6
 8003058:	6813      	ldr	r3, [r2, #0]
 800305a:	2216      	movs	r2, #22
 800305c:	5e9b      	ldrsh	r3, [r3, r2]
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	17db      	asrs	r3, r3, #31
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	197a      	adds	r2, r7, r5
 8003066:	6813      	ldr	r3, [r2, #0]
 8003068:	04da      	lsls	r2, r3, #19
 800306a:	1939      	adds	r1, r7, r4
 800306c:	680b      	ldr	r3, [r1, #0]
 800306e:	0b5b      	lsrs	r3, r3, #13
 8003070:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003072:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003074:	4313      	orrs	r3, r2
 8003076:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003078:	197a      	adds	r2, r7, r5
 800307a:	6813      	ldr	r3, [r2, #0]
 800307c:	135b      	asrs	r3, r3, #13
 800307e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003080:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003082:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003084:	6938      	ldr	r0, [r7, #16]
 8003086:	6979      	ldr	r1, [r7, #20]
 8003088:	f7fd fa2e 	bl	80004e8 <__aeabi_lmul>
 800308c:	0002      	movs	r2, r0
 800308e:	000b      	movs	r3, r1
 8003090:	0010      	movs	r0, r2
 8003092:	0019      	movs	r1, r3
 8003094:	197a      	adds	r2, r7, r5
 8003096:	6813      	ldr	r3, [r2, #0]
 8003098:	04da      	lsls	r2, r3, #19
 800309a:	193b      	adds	r3, r7, r4
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	0b5b      	lsrs	r3, r3, #13
 80030a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80030a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030a4:	4313      	orrs	r3, r2
 80030a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80030a8:	197a      	adds	r2, r7, r5
 80030aa:	6813      	ldr	r3, [r2, #0]
 80030ac:	135b      	asrs	r3, r3, #13
 80030ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80030b0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80030b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030b4:	f7fd fa18 	bl	80004e8 <__aeabi_lmul>
 80030b8:	0002      	movs	r2, r0
 80030ba:	000b      	movs	r3, r1
 80030bc:	01d9      	lsls	r1, r3, #7
 80030be:	0e50      	lsrs	r0, r2, #25
 80030c0:	4301      	orrs	r1, r0
 80030c2:	25b0      	movs	r5, #176	@ 0xb0
 80030c4:	1978      	adds	r0, r7, r5
 80030c6:	6001      	str	r1, [r0, #0]
 80030c8:	165b      	asrs	r3, r3, #25
 80030ca:	22b4      	movs	r2, #180	@ 0xb4
 80030cc:	18ba      	adds	r2, r7, r2
 80030ce:	6013      	str	r3, [r2, #0]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80030d0:	19ba      	adds	r2, r7, r6
 80030d2:	6813      	ldr	r3, [r2, #0]
 80030d4:	2214      	movs	r2, #20
 80030d6:	5e9b      	ldrsh	r3, [r3, r2]
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	17db      	asrs	r3, r3, #31
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	193a      	adds	r2, r7, r4
 80030e0:	6853      	ldr	r3, [r2, #4]
 80030e2:	6812      	ldr	r2, [r2, #0]
 80030e4:	68b8      	ldr	r0, [r7, #8]
 80030e6:	68f9      	ldr	r1, [r7, #12]
 80030e8:	f7fd f9fe 	bl	80004e8 <__aeabi_lmul>
 80030ec:	0002      	movs	r2, r0
 80030ee:	000b      	movs	r3, r1
 80030f0:	0359      	lsls	r1, r3, #13
 80030f2:	0cd0      	lsrs	r0, r2, #19
 80030f4:	4301      	orrs	r1, r0
 80030f6:	20a8      	movs	r0, #168	@ 0xa8
 80030f8:	1838      	adds	r0, r7, r0
 80030fa:	6001      	str	r1, [r0, #0]
 80030fc:	14db      	asrs	r3, r3, #19
 80030fe:	22ac      	movs	r2, #172	@ 0xac
 8003100:	18ba      	adds	r2, r7, r2
 8003102:	6013      	str	r3, [r2, #0]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8003104:	193a      	adds	r2, r7, r4
 8003106:	6810      	ldr	r0, [r2, #0]
 8003108:	6851      	ldr	r1, [r2, #4]
 800310a:	197a      	adds	r2, r7, r5
 800310c:	6853      	ldr	r3, [r2, #4]
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	1880      	adds	r0, r0, r2
 8003112:	4159      	adcs	r1, r3
 8003114:	23a8      	movs	r3, #168	@ 0xa8
 8003116:	18fb      	adds	r3, r7, r3
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	1812      	adds	r2, r2, r0
 800311e:	414b      	adcs	r3, r1
 8003120:	0619      	lsls	r1, r3, #24
 8003122:	0a10      	lsrs	r0, r2, #8
 8003124:	66b8      	str	r0, [r7, #104]	@ 0x68
 8003126:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003128:	4308      	orrs	r0, r1
 800312a:	66b8      	str	r0, [r7, #104]	@ 0x68
 800312c:	121b      	asrs	r3, r3, #8
 800312e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003130:	19bb      	adds	r3, r7, r6
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2212      	movs	r2, #18
 8003136:	5e9b      	ldrsh	r3, [r3, r2]
 8003138:	603b      	str	r3, [r7, #0]
 800313a:	17db      	asrs	r3, r3, #31
 800313c:	607b      	str	r3, [r7, #4]
 800313e:	6839      	ldr	r1, [r7, #0]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	000b      	movs	r3, r1
 8003144:	0f1b      	lsrs	r3, r3, #28
 8003146:	0010      	movs	r0, r2
 8003148:	0100      	lsls	r0, r0, #4
 800314a:	6678      	str	r0, [r7, #100]	@ 0x64
 800314c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800314e:	4318      	orrs	r0, r3
 8003150:	6678      	str	r0, [r7, #100]	@ 0x64
 8003152:	000b      	movs	r3, r1
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	663b      	str	r3, [r7, #96]	@ 0x60
 8003158:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800315a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800315c:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800315e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003160:	1812      	adds	r2, r2, r0
 8003162:	414b      	adcs	r3, r1
 8003164:	1939      	adds	r1, r7, r4
 8003166:	600a      	str	r2, [r1, #0]
 8003168:	604b      	str	r3, [r1, #4]
	return p;
 800316a:	193b      	adds	r3, r7, r4
 800316c:	681b      	ldr	r3, [r3, #0]
}
 800316e:	0018      	movs	r0, r3
 8003170:	46bd      	mov	sp, r7
 8003172:	b02f      	add	sp, #188	@ 0xbc
 8003174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003176:	46c0      	nop			@ (mov r8, r8)
 8003178:	fffe0c00 	.word	0xfffe0c00
 800317c:	00000c35 	.word	0x00000c35

08003180 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a2c      	ldr	r2, [pc, #176]	@ (8003240 <compensate_humidity+0xc0>)
 8003190:	4694      	mov	ip, r2
 8003192:	4463      	add	r3, ip
 8003194:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	039a      	lsls	r2, r3, #14
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	211e      	movs	r1, #30
 800319e:	5e5b      	ldrsh	r3, [r3, r1]
 80031a0:	051b      	lsls	r3, r3, #20
 80031a2:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2120      	movs	r1, #32
 80031a8:	5e5b      	ldrsh	r3, [r3, r1]
 80031aa:	0019      	movs	r1, r3
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	434b      	muls	r3, r1
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2280      	movs	r2, #128	@ 0x80
 80031b4:	01d2      	lsls	r2, r2, #7
 80031b6:	4694      	mov	ip, r2
 80031b8:	4463      	add	r3, ip
 80031ba:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	2122      	movs	r1, #34	@ 0x22
 80031c0:	5652      	ldrsb	r2, [r2, r1]
 80031c2:	0011      	movs	r1, r2
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	434a      	muls	r2, r1
 80031c8:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80031ca:	68f9      	ldr	r1, [r7, #12]
 80031cc:	7f09      	ldrb	r1, [r1, #28]
 80031ce:	0008      	movs	r0, r1
 80031d0:	6979      	ldr	r1, [r7, #20]
 80031d2:	4341      	muls	r1, r0
 80031d4:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80031d6:	2080      	movs	r0, #128	@ 0x80
 80031d8:	0200      	lsls	r0, r0, #8
 80031da:	4684      	mov	ip, r0
 80031dc:	4461      	add	r1, ip
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80031de:	434a      	muls	r2, r1
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80031e0:	1292      	asrs	r2, r2, #10
 80031e2:	2180      	movs	r1, #128	@ 0x80
 80031e4:	0389      	lsls	r1, r1, #14
 80031e6:	468c      	mov	ip, r1
 80031e8:	4462      	add	r2, ip
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 80031ea:	68f9      	ldr	r1, [r7, #12]
 80031ec:	201a      	movs	r0, #26
 80031ee:	5e09      	ldrsh	r1, [r1, r0]
 80031f0:	434a      	muls	r2, r1
 80031f2:	2180      	movs	r1, #128	@ 0x80
 80031f4:	0189      	lsls	r1, r1, #6
 80031f6:	468c      	mov	ip, r1
 80031f8:	4462      	add	r2, ip
 80031fa:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80031fc:	4353      	muls	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	13db      	asrs	r3, r3, #15
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	13d2      	asrs	r2, r2, #15
 8003208:	4353      	muls	r3, r2
 800320a:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	7e12      	ldrb	r2, [r2, #24]
 8003210:	4353      	muls	r3, r2
 8003212:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2b00      	cmp	r3, #0
 800321e:	da00      	bge.n	8003222 <compensate_humidity+0xa2>
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	22c8      	movs	r2, #200	@ 0xc8
 8003228:	0552      	lsls	r2, r2, #21
 800322a:	4293      	cmp	r3, r2
 800322c:	dd01      	ble.n	8003232 <compensate_humidity+0xb2>
 800322e:	23c8      	movs	r3, #200	@ 0xc8
 8003230:	055b      	lsls	r3, r3, #21
 8003232:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	131b      	asrs	r3, r3, #12
}
 8003238:	0018      	movs	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	b006      	add	sp, #24
 800323e:	bd80      	pop	{r7, pc}
 8003240:	fffed400 	.word	0xfffed400

08003244 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8003244:	b590      	push	{r4, r7, lr}
 8003246:	b08d      	sub	sp, #52	@ 0x34
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
 8003250:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2232      	movs	r2, #50	@ 0x32
 8003256:	5c9b      	ldrb	r3, [r3, r2]
 8003258:	2b60      	cmp	r3, #96	@ 0x60
 800325a:	d007      	beq.n	800326c <bmp280_read_fixed+0x28>
		if (humidity)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d002      	beq.n	8003268 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8003268:	2300      	movs	r3, #0
 800326a:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <bmp280_read_fixed+0x32>
 8003272:	2308      	movs	r3, #8
 8003274:	e000      	b.n	8003278 <bmp280_read_fixed+0x34>
 8003276:	2306      	movs	r3, #6
 8003278:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 800327a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2218      	movs	r2, #24
 8003280:	18ba      	adds	r2, r7, r2
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	21f7      	movs	r1, #247	@ 0xf7
 8003286:	f7ff fb9b 	bl	80029c0 <read_data>
 800328a:	1e03      	subs	r3, r0, #0
 800328c:	d001      	beq.n	8003292 <bmp280_read_fixed+0x4e>
		return false;
 800328e:	2300      	movs	r3, #0
 8003290:	e041      	b.n	8003316 <bmp280_read_fixed+0xd2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8003292:	2418      	movs	r4, #24
 8003294:	193b      	adds	r3, r7, r4
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	031a      	lsls	r2, r3, #12
 800329a:	193b      	adds	r3, r7, r4
 800329c:	785b      	ldrb	r3, [r3, #1]
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	4313      	orrs	r3, r2
 80032a2:	193a      	adds	r2, r7, r4
 80032a4:	7892      	ldrb	r2, [r2, #2]
 80032a6:	0912      	lsrs	r2, r2, #4
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	4313      	orrs	r3, r2
 80032ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80032ae:	193b      	adds	r3, r7, r4
 80032b0:	78db      	ldrb	r3, [r3, #3]
 80032b2:	031a      	lsls	r2, r3, #12
 80032b4:	193b      	adds	r3, r7, r4
 80032b6:	791b      	ldrb	r3, [r3, #4]
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	4313      	orrs	r3, r2
 80032bc:	193a      	adds	r2, r7, r4
 80032be:	7952      	ldrb	r2, [r2, #5]
 80032c0:	0912      	lsrs	r2, r2, #4
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	4313      	orrs	r3, r2
 80032c6:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 80032c8:	2314      	movs	r3, #20
 80032ca:	18fa      	adds	r2, r7, r3
 80032cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	0018      	movs	r0, r3
 80032d2:	f7ff fd6e 	bl	8002db2 <compensate_temperature>
 80032d6:	0002      	movs	r2, r0
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	0018      	movs	r0, r3
 80032e4:	f7ff fd9a 	bl	8002e1c <compensate_pressure>
 80032e8:	0002      	movs	r2, r0
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	601a      	str	r2, [r3, #0]

	if (humidity) {
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00f      	beq.n	8003314 <bmp280_read_fixed+0xd0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 80032f4:	193b      	adds	r3, r7, r4
 80032f6:	799b      	ldrb	r3, [r3, #6]
 80032f8:	021b      	lsls	r3, r3, #8
 80032fa:	193a      	adds	r2, r7, r4
 80032fc:	79d2      	ldrb	r2, [r2, #7]
 80032fe:	4313      	orrs	r3, r2
 8003300:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	6a39      	ldr	r1, [r7, #32]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	0018      	movs	r0, r3
 800330a:	f7ff ff39 	bl	8003180 <compensate_humidity>
 800330e:	0002      	movs	r2, r0
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	601a      	str	r2, [r3, #0]
	}

	return true;
 8003314:	2301      	movs	r3, #1
}
 8003316:	0018      	movs	r0, r3
 8003318:	46bd      	mov	sp, r7
 800331a:	b00d      	add	sp, #52	@ 0x34
 800331c:	bd90      	pop	{r4, r7, pc}
	...

08003320 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <bmp280_read_float+0x1a>
 8003334:	2314      	movs	r3, #20
 8003336:	18fb      	adds	r3, r7, r3
 8003338:	e000      	b.n	800333c <bmp280_read_float+0x1c>
 800333a:	2300      	movs	r3, #0
 800333c:	2218      	movs	r2, #24
 800333e:	18ba      	adds	r2, r7, r2
 8003340:	211c      	movs	r1, #28
 8003342:	1879      	adds	r1, r7, r1
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f7ff ff7d 	bl	8003244 <bmp280_read_fixed>
 800334a:	1e03      	subs	r3, r0, #0
 800334c:	d02d      	beq.n	80033aa <bmp280_read_float+0x8a>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	0018      	movs	r0, r3
 8003352:	f7fd fa35 	bl	80007c0 <__aeabi_i2f>
 8003356:	1c03      	adds	r3, r0, #0
 8003358:	4916      	ldr	r1, [pc, #88]	@ (80033b4 <bmp280_read_float+0x94>)
 800335a:	1c18      	adds	r0, r3, #0
 800335c:	f7fd f910 	bl	8000580 <__aeabi_fdiv>
 8003360:	1c03      	adds	r3, r0, #0
 8003362:	1c1a      	adds	r2, r3, #0
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	0018      	movs	r0, r3
 800336c:	f7fd fa74 	bl	8000858 <__aeabi_ui2f>
 8003370:	1c03      	adds	r3, r0, #0
 8003372:	2187      	movs	r1, #135	@ 0x87
 8003374:	05c9      	lsls	r1, r1, #23
 8003376:	1c18      	adds	r0, r3, #0
 8003378:	f7fd f902 	bl	8000580 <__aeabi_fdiv>
 800337c:	1c03      	adds	r3, r0, #0
 800337e:	1c1a      	adds	r2, r3, #0
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	601a      	str	r2, [r3, #0]
		if (humidity)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00d      	beq.n	80033a6 <bmp280_read_float+0x86>
			*humidity = (float) fixed_humidity / 1024;
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	0018      	movs	r0, r3
 800338e:	f7fd fa63 	bl	8000858 <__aeabi_ui2f>
 8003392:	1c03      	adds	r3, r0, #0
 8003394:	2189      	movs	r1, #137	@ 0x89
 8003396:	05c9      	lsls	r1, r1, #23
 8003398:	1c18      	adds	r0, r3, #0
 800339a:	f7fd f8f1 	bl	8000580 <__aeabi_fdiv>
 800339e:	1c03      	adds	r3, r0, #0
 80033a0:	1c1a      	adds	r2, r3, #0
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	601a      	str	r2, [r3, #0]
		return true;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <bmp280_read_float+0x8c>
	}

	return false;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	0018      	movs	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b008      	add	sp, #32
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	42c80000 	.word	0x42c80000

080033b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ba:	b08b      	sub	sp, #44	@ 0x2c
 80033bc:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033be:	f000 fea1 	bl	8004104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033c2:	f000 f90b 	bl	80035dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033c6:	f000 fb43 	bl	8003a50 <MX_GPIO_Init>
  MX_DMA_Init();
 80033ca:	f000 fb23 	bl	8003a14 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80033ce:	f000 fad3 	bl	8003978 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80033d2:	f000 f9c5 	bl	8003760 <MX_I2C1_Init>
  MX_ADC1_Init();
 80033d6:	f000 f95b 	bl	8003690 <MX_ADC1_Init>
  MX_TIM1_Init();
 80033da:	f000 fa01 	bl	80037e0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  // Calibration de l'ADC
  HAL_ADCEx_Calibration_Start(&hadc1);
 80033de:	4b69      	ldr	r3, [pc, #420]	@ (8003584 <main+0x1cc>)
 80033e0:	0018      	movs	r0, r3
 80033e2:	f001 feb9 	bl	8005158 <HAL_ADCEx_Calibration_Start>
  // Lancement de la 1ere conversion
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)pot, ADC_BUF_LEN);
 80033e6:	4968      	ldr	r1, [pc, #416]	@ (8003588 <main+0x1d0>)
 80033e8:	4b66      	ldr	r3, [pc, #408]	@ (8003584 <main+0x1cc>)
 80033ea:	2201      	movs	r2, #1
 80033ec:	0018      	movs	r0, r3
 80033ee:	f001 fa33 	bl	8004858 <HAL_ADC_Start_DMA>
  // Initialisation du Timer 1 pour la MLI
  arrValue = (HAL_RCC_GetPCLK1Freq()) / (2 * FMLI * (TIM1->PSC + 1));
 80033f2:	f004 f805 	bl	8007400 <HAL_RCC_GetPCLK1Freq>
 80033f6:	4b65      	ldr	r3, [pc, #404]	@ (800358c <main+0x1d4>)
 80033f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fa:	3301      	adds	r3, #1
 80033fc:	4a64      	ldr	r2, [pc, #400]	@ (8003590 <main+0x1d8>)
 80033fe:	4353      	muls	r3, r2
 8003400:	0019      	movs	r1, r3
 8003402:	f7fc fe99 	bl	8000138 <__udivsi3>
 8003406:	0003      	movs	r3, r0
 8003408:	001a      	movs	r2, r3
 800340a:	4b62      	ldr	r3, [pc, #392]	@ (8003594 <main+0x1dc>)
 800340c:	601a      	str	r2, [r3, #0]
  TIM1->ARR = arrValue - 1;
 800340e:	4b61      	ldr	r3, [pc, #388]	@ (8003594 <main+0x1dc>)
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	4b5e      	ldr	r3, [pc, #376]	@ (800358c <main+0x1d4>)
 8003414:	3a01      	subs	r2, #1
 8003416:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003418:	4b5f      	ldr	r3, [pc, #380]	@ (8003598 <main+0x1e0>)
 800341a:	2100      	movs	r1, #0
 800341c:	0018      	movs	r0, r3
 800341e:	f004 f9f1 	bl	8007804 <HAL_TIM_PWM_Start>


  // Gestion du capteur I2C
	bmp280_init_default_params(&bmp280.params);
 8003422:	4b5e      	ldr	r3, [pc, #376]	@ (800359c <main+0x1e4>)
 8003424:	0018      	movs	r0, r3
 8003426:	f7ff fa79 	bl	800291c <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 800342a:	4b5d      	ldr	r3, [pc, #372]	@ (80035a0 <main+0x1e8>)
 800342c:	2276      	movs	r2, #118	@ 0x76
 800342e:	849a      	strh	r2, [r3, #36]	@ 0x24
	bmp280.i2c = &hi2c1;
 8003430:	4b5b      	ldr	r3, [pc, #364]	@ (80035a0 <main+0x1e8>)
 8003432:	4a5c      	ldr	r2, [pc, #368]	@ (80035a4 <main+0x1ec>)
 8003434:	629a      	str	r2, [r3, #40]	@ 0x28

	while (!bmp280_init(&bmp280, &bmp280.params)) {
 8003436:	e016      	b.n	8003466 <main+0xae>
		size = sprintf((char *)Data, "BMP280 initialization failed\n");
 8003438:	4a5b      	ldr	r2, [pc, #364]	@ (80035a8 <main+0x1f0>)
 800343a:	4b5c      	ldr	r3, [pc, #368]	@ (80035ac <main+0x1f4>)
 800343c:	0011      	movs	r1, r2
 800343e:	0018      	movs	r0, r3
 8003440:	f006 fbf4 	bl	8009c2c <siprintf>
 8003444:	0003      	movs	r3, r0
 8003446:	b29a      	uxth	r2, r3
 8003448:	4b59      	ldr	r3, [pc, #356]	@ (80035b0 <main+0x1f8>)
 800344a:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, Data, size, 1000);
 800344c:	4b58      	ldr	r3, [pc, #352]	@ (80035b0 <main+0x1f8>)
 800344e:	881a      	ldrh	r2, [r3, #0]
 8003450:	23fa      	movs	r3, #250	@ 0xfa
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4955      	ldr	r1, [pc, #340]	@ (80035ac <main+0x1f4>)
 8003456:	4857      	ldr	r0, [pc, #348]	@ (80035b4 <main+0x1fc>)
 8003458:	f005 f9f0 	bl	800883c <HAL_UART_Transmit>
		HAL_Delay(2000);
 800345c:	23fa      	movs	r3, #250	@ 0xfa
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	0018      	movs	r0, r3
 8003462:	f000 fed5 	bl	8004210 <HAL_Delay>
	while (!bmp280_init(&bmp280, &bmp280.params)) {
 8003466:	4a4d      	ldr	r2, [pc, #308]	@ (800359c <main+0x1e4>)
 8003468:	4b4d      	ldr	r3, [pc, #308]	@ (80035a0 <main+0x1e8>)
 800346a:	0011      	movs	r1, r2
 800346c:	0018      	movs	r0, r3
 800346e:	f7ff fbe9 	bl	8002c44 <bmp280_init>
 8003472:	0003      	movs	r3, r0
 8003474:	001a      	movs	r2, r3
 8003476:	2301      	movs	r3, #1
 8003478:	4053      	eors	r3, r2
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1db      	bne.n	8003438 <main+0x80>
	}
	bool bme280p = bmp280.id == BME280_CHIP_ID;
 8003480:	4b47      	ldr	r3, [pc, #284]	@ (80035a0 <main+0x1e8>)
 8003482:	2232      	movs	r2, #50	@ 0x32
 8003484:	5c9a      	ldrb	r2, [r3, r2]
 8003486:	200f      	movs	r0, #15
 8003488:	183b      	adds	r3, r7, r0
 800348a:	3a60      	subs	r2, #96	@ 0x60
 800348c:	4251      	negs	r1, r2
 800348e:	414a      	adcs	r2, r1
 8003490:	701a      	strb	r2, [r3, #0]
	size = sprintf((char *)Data, "BMP280: found %s\n", bme280p ? "BME280" : "BMP280");
 8003492:	183b      	adds	r3, r7, r0
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <main+0xe6>
 800349a:	4b47      	ldr	r3, [pc, #284]	@ (80035b8 <main+0x200>)
 800349c:	e000      	b.n	80034a0 <main+0xe8>
 800349e:	4b47      	ldr	r3, [pc, #284]	@ (80035bc <main+0x204>)
 80034a0:	4947      	ldr	r1, [pc, #284]	@ (80035c0 <main+0x208>)
 80034a2:	4842      	ldr	r0, [pc, #264]	@ (80035ac <main+0x1f4>)
 80034a4:	001a      	movs	r2, r3
 80034a6:	f006 fbc1 	bl	8009c2c <siprintf>
 80034aa:	0003      	movs	r3, r0
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	4b40      	ldr	r3, [pc, #256]	@ (80035b0 <main+0x1f8>)
 80034b0:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, Data, size, 1000);
 80034b2:	4b3f      	ldr	r3, [pc, #252]	@ (80035b0 <main+0x1f8>)
 80034b4:	881a      	ldrh	r2, [r3, #0]
 80034b6:	23fa      	movs	r3, #250	@ 0xfa
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	493c      	ldr	r1, [pc, #240]	@ (80035ac <main+0x1f4>)
 80034bc:	483d      	ldr	r0, [pc, #244]	@ (80035b4 <main+0x1fc>)
 80034be:	f005 f9bd 	bl	800883c <HAL_UART_Transmit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // BME280

		while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 80034c2:	e016      	b.n	80034f2 <main+0x13a>
				size = sprintf((char *)Data,
 80034c4:	4a3f      	ldr	r2, [pc, #252]	@ (80035c4 <main+0x20c>)
 80034c6:	4b39      	ldr	r3, [pc, #228]	@ (80035ac <main+0x1f4>)
 80034c8:	0011      	movs	r1, r2
 80034ca:	0018      	movs	r0, r3
 80034cc:	f006 fbae 	bl	8009c2c <siprintf>
 80034d0:	0003      	movs	r3, r0
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	4b36      	ldr	r3, [pc, #216]	@ (80035b0 <main+0x1f8>)
 80034d6:	801a      	strh	r2, [r3, #0]
						"Temperature/pressure reading failed\n");
				HAL_UART_Transmit(&huart2, Data, size, 1000);
 80034d8:	4b35      	ldr	r3, [pc, #212]	@ (80035b0 <main+0x1f8>)
 80034da:	881a      	ldrh	r2, [r3, #0]
 80034dc:	23fa      	movs	r3, #250	@ 0xfa
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4932      	ldr	r1, [pc, #200]	@ (80035ac <main+0x1f4>)
 80034e2:	4834      	ldr	r0, [pc, #208]	@ (80035b4 <main+0x1fc>)
 80034e4:	f005 f9aa 	bl	800883c <HAL_UART_Transmit>
				HAL_Delay(2000);
 80034e8:	23fa      	movs	r3, #250	@ 0xfa
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	0018      	movs	r0, r3
 80034ee:	f000 fe8f 	bl	8004210 <HAL_Delay>
		while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 80034f2:	4b35      	ldr	r3, [pc, #212]	@ (80035c8 <main+0x210>)
 80034f4:	4a35      	ldr	r2, [pc, #212]	@ (80035cc <main+0x214>)
 80034f6:	4936      	ldr	r1, [pc, #216]	@ (80035d0 <main+0x218>)
 80034f8:	4829      	ldr	r0, [pc, #164]	@ (80035a0 <main+0x1e8>)
 80034fa:	f7ff ff11 	bl	8003320 <bmp280_read_float>
 80034fe:	0003      	movs	r3, r0
 8003500:	001a      	movs	r2, r3
 8003502:	2301      	movs	r3, #1
 8003504:	4053      	eors	r3, r2
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1db      	bne.n	80034c4 <main+0x10c>
			}

			size = sprintf((char *)Data,"Pressure: %.2f Pa, Temperature: %.2f C, Humidity: %.2f, Pot: %lu\n", pressure, temperature, humidity, potVal);
 800350c:	4b2f      	ldr	r3, [pc, #188]	@ (80035cc <main+0x214>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	1c18      	adds	r0, r3, #0
 8003512:	f7ff f89f 	bl	8002654 <__aeabi_f2d>
 8003516:	6038      	str	r0, [r7, #0]
 8003518:	6079      	str	r1, [r7, #4]
 800351a:	4b2d      	ldr	r3, [pc, #180]	@ (80035d0 <main+0x218>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	1c18      	adds	r0, r3, #0
 8003520:	f7ff f898 	bl	8002654 <__aeabi_f2d>
 8003524:	0004      	movs	r4, r0
 8003526:	000d      	movs	r5, r1
 8003528:	4b27      	ldr	r3, [pc, #156]	@ (80035c8 <main+0x210>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	1c18      	adds	r0, r3, #0
 800352e:	f7ff f891 	bl	8002654 <__aeabi_f2d>
 8003532:	0002      	movs	r2, r0
 8003534:	000b      	movs	r3, r1
 8003536:	4927      	ldr	r1, [pc, #156]	@ (80035d4 <main+0x21c>)
 8003538:	6809      	ldr	r1, [r1, #0]
 800353a:	4e27      	ldr	r6, [pc, #156]	@ (80035d8 <main+0x220>)
 800353c:	481b      	ldr	r0, [pc, #108]	@ (80035ac <main+0x1f4>)
 800353e:	9104      	str	r1, [sp, #16]
 8003540:	9202      	str	r2, [sp, #8]
 8003542:	9303      	str	r3, [sp, #12]
 8003544:	9400      	str	r4, [sp, #0]
 8003546:	9501      	str	r5, [sp, #4]
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	0031      	movs	r1, r6
 800354e:	f006 fb6d 	bl	8009c2c <siprintf>
 8003552:	0003      	movs	r3, r0
 8003554:	b29a      	uxth	r2, r3
 8003556:	4b16      	ldr	r3, [pc, #88]	@ (80035b0 <main+0x1f8>)
 8003558:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, Data, size, 1000);
 800355a:	4b15      	ldr	r3, [pc, #84]	@ (80035b0 <main+0x1f8>)
 800355c:	881a      	ldrh	r2, [r3, #0]
 800355e:	23fa      	movs	r3, #250	@ 0xfa
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4912      	ldr	r1, [pc, #72]	@ (80035ac <main+0x1f4>)
 8003564:	4813      	ldr	r0, [pc, #76]	@ (80035b4 <main+0x1fc>)
 8003566:	f005 f969 	bl	800883c <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800356a:	23a0      	movs	r3, #160	@ 0xa0
 800356c:	05db      	lsls	r3, r3, #23
 800356e:	2120      	movs	r1, #32
 8003570:	0018      	movs	r0, r3
 8003572:	f002 fb9e 	bl	8005cb2 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8003576:	23fa      	movs	r3, #250	@ 0xfa
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	0018      	movs	r0, r3
 800357c:	f000 fe48 	bl	8004210 <HAL_Delay>
		while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8003580:	e7b7      	b.n	80034f2 <main+0x13a>
 8003582:	46c0      	nop			@ (mov r8, r8)
 8003584:	200001f0 	.word	0x200001f0
 8003588:	200003e4 	.word	0x200003e4
 800358c:	40012c00 	.word	0x40012c00
 8003590:	00004e20 	.word	0x00004e20
 8003594:	200003ec 	.word	0x200003ec
 8003598:	20000304 	.word	0x20000304
 800359c:	2000041c 	.word	0x2000041c
 80035a0:	200003f0 	.word	0x200003f0
 80035a4:	200002b0 	.word	0x200002b0
 80035a8:	0800c190 	.word	0x0800c190
 80035ac:	20000430 	.word	0x20000430
 80035b0:	20000530 	.word	0x20000530
 80035b4:	20000350 	.word	0x20000350
 80035b8:	0800c1b0 	.word	0x0800c1b0
 80035bc:	0800c1b8 	.word	0x0800c1b8
 80035c0:	0800c1c0 	.word	0x0800c1c0
 80035c4:	0800c1d4 	.word	0x0800c1d4
 80035c8:	2000042c 	.word	0x2000042c
 80035cc:	20000424 	.word	0x20000424
 80035d0:	20000428 	.word	0x20000428
 80035d4:	200003e8 	.word	0x200003e8
 80035d8:	0800c1fc 	.word	0x0800c1fc

080035dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035dc:	b590      	push	{r4, r7, lr}
 80035de:	b093      	sub	sp, #76	@ 0x4c
 80035e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035e2:	2414      	movs	r4, #20
 80035e4:	193b      	adds	r3, r7, r4
 80035e6:	0018      	movs	r0, r3
 80035e8:	2334      	movs	r3, #52	@ 0x34
 80035ea:	001a      	movs	r2, r3
 80035ec:	2100      	movs	r1, #0
 80035ee:	f006 fc01 	bl	8009df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035f2:	1d3b      	adds	r3, r7, #4
 80035f4:	0018      	movs	r0, r3
 80035f6:	2310      	movs	r3, #16
 80035f8:	001a      	movs	r2, r3
 80035fa:	2100      	movs	r1, #0
 80035fc:	f006 fbfa 	bl	8009df4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003600:	2380      	movs	r3, #128	@ 0x80
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	0018      	movs	r0, r3
 8003606:	f003 fa0b 	bl	8006a20 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800360a:	193b      	adds	r3, r7, r4
 800360c:	2202      	movs	r2, #2
 800360e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003610:	193b      	adds	r3, r7, r4
 8003612:	2280      	movs	r2, #128	@ 0x80
 8003614:	0052      	lsls	r2, r2, #1
 8003616:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003618:	0021      	movs	r1, r4
 800361a:	187b      	adds	r3, r7, r1
 800361c:	2200      	movs	r2, #0
 800361e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003620:	187b      	adds	r3, r7, r1
 8003622:	2240      	movs	r2, #64	@ 0x40
 8003624:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003626:	187b      	adds	r3, r7, r1
 8003628:	2202      	movs	r2, #2
 800362a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800362c:	187b      	adds	r3, r7, r1
 800362e:	2202      	movs	r2, #2
 8003630:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003632:	187b      	adds	r3, r7, r1
 8003634:	2200      	movs	r2, #0
 8003636:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003638:	187b      	adds	r3, r7, r1
 800363a:	2208      	movs	r2, #8
 800363c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800363e:	187b      	adds	r3, r7, r1
 8003640:	22c0      	movs	r2, #192	@ 0xc0
 8003642:	02d2      	lsls	r2, r2, #11
 8003644:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003646:	187b      	adds	r3, r7, r1
 8003648:	2280      	movs	r2, #128	@ 0x80
 800364a:	0592      	lsls	r2, r2, #22
 800364c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800364e:	187b      	adds	r3, r7, r1
 8003650:	0018      	movs	r0, r3
 8003652:	f003 fa31 	bl	8006ab8 <HAL_RCC_OscConfig>
 8003656:	1e03      	subs	r3, r0, #0
 8003658:	d001      	beq.n	800365e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800365a:	f000 fa69 	bl	8003b30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800365e:	1d3b      	adds	r3, r7, #4
 8003660:	2207      	movs	r2, #7
 8003662:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003664:	1d3b      	adds	r3, r7, #4
 8003666:	2202      	movs	r2, #2
 8003668:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800366a:	1d3b      	adds	r3, r7, #4
 800366c:	2200      	movs	r2, #0
 800366e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003670:	1d3b      	adds	r3, r7, #4
 8003672:	2200      	movs	r2, #0
 8003674:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003676:	1d3b      	adds	r3, r7, #4
 8003678:	2102      	movs	r1, #2
 800367a:	0018      	movs	r0, r3
 800367c:	f003 fd2c 	bl	80070d8 <HAL_RCC_ClockConfig>
 8003680:	1e03      	subs	r3, r0, #0
 8003682:	d001      	beq.n	8003688 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003684:	f000 fa54 	bl	8003b30 <Error_Handler>
  }
}
 8003688:	46c0      	nop			@ (mov r8, r8)
 800368a:	46bd      	mov	sp, r7
 800368c:	b013      	add	sp, #76	@ 0x4c
 800368e:	bd90      	pop	{r4, r7, pc}

08003690 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003696:	1d3b      	adds	r3, r7, #4
 8003698:	0018      	movs	r0, r3
 800369a:	230c      	movs	r3, #12
 800369c:	001a      	movs	r2, r3
 800369e:	2100      	movs	r1, #0
 80036a0:	f006 fba8 	bl	8009df4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80036a4:	4b2c      	ldr	r3, [pc, #176]	@ (8003758 <MX_ADC1_Init+0xc8>)
 80036a6:	4a2d      	ldr	r2, [pc, #180]	@ (800375c <MX_ADC1_Init+0xcc>)
 80036a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 80036aa:	4b2b      	ldr	r3, [pc, #172]	@ (8003758 <MX_ADC1_Init+0xc8>)
 80036ac:	2280      	movs	r2, #128	@ 0x80
 80036ae:	0392      	lsls	r2, r2, #14
 80036b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80036b2:	4b29      	ldr	r3, [pc, #164]	@ (8003758 <MX_ADC1_Init+0xc8>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036b8:	4b27      	ldr	r3, [pc, #156]	@ (8003758 <MX_ADC1_Init+0xc8>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80036be:	4b26      	ldr	r3, [pc, #152]	@ (8003758 <MX_ADC1_Init+0xc8>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80036c4:	4b24      	ldr	r3, [pc, #144]	@ (8003758 <MX_ADC1_Init+0xc8>)
 80036c6:	2208      	movs	r2, #8
 80036c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80036ca:	4b23      	ldr	r3, [pc, #140]	@ (8003758 <MX_ADC1_Init+0xc8>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80036d0:	4b21      	ldr	r3, [pc, #132]	@ (8003758 <MX_ADC1_Init+0xc8>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80036d6:	4b20      	ldr	r3, [pc, #128]	@ (8003758 <MX_ADC1_Init+0xc8>)
 80036d8:	2201      	movs	r2, #1
 80036da:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80036dc:	4b1e      	ldr	r3, [pc, #120]	@ (8003758 <MX_ADC1_Init+0xc8>)
 80036de:	2201      	movs	r2, #1
 80036e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80036e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003758 <MX_ADC1_Init+0xc8>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80036e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003758 <MX_ADC1_Init+0xc8>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80036ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003758 <MX_ADC1_Init+0xc8>)
 80036f0:	222c      	movs	r2, #44	@ 0x2c
 80036f2:	2101      	movs	r1, #1
 80036f4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80036f6:	4b18      	ldr	r3, [pc, #96]	@ (8003758 <MX_ADC1_Init+0xc8>)
 80036f8:	2280      	movs	r2, #128	@ 0x80
 80036fa:	0152      	lsls	r2, r2, #5
 80036fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_12CYCLES_5;
 80036fe:	4b16      	ldr	r3, [pc, #88]	@ (8003758 <MX_ADC1_Init+0xc8>)
 8003700:	2203      	movs	r2, #3
 8003702:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8003704:	4b14      	ldr	r3, [pc, #80]	@ (8003758 <MX_ADC1_Init+0xc8>)
 8003706:	2200      	movs	r2, #0
 8003708:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800370a:	4b13      	ldr	r3, [pc, #76]	@ (8003758 <MX_ADC1_Init+0xc8>)
 800370c:	223c      	movs	r2, #60	@ 0x3c
 800370e:	2100      	movs	r1, #0
 8003710:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003712:	4b11      	ldr	r3, [pc, #68]	@ (8003758 <MX_ADC1_Init+0xc8>)
 8003714:	2200      	movs	r2, #0
 8003716:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003718:	4b0f      	ldr	r3, [pc, #60]	@ (8003758 <MX_ADC1_Init+0xc8>)
 800371a:	0018      	movs	r0, r3
 800371c:	f000 fef4 	bl	8004508 <HAL_ADC_Init>
 8003720:	1e03      	subs	r3, r0, #0
 8003722:	d001      	beq.n	8003728 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8003724:	f000 fa04 	bl	8003b30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003728:	1d3b      	adds	r3, r7, #4
 800372a:	2201      	movs	r2, #1
 800372c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800372e:	1d3b      	adds	r3, r7, #4
 8003730:	2200      	movs	r2, #0
 8003732:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003734:	1d3b      	adds	r3, r7, #4
 8003736:	2200      	movs	r2, #0
 8003738:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800373a:	1d3a      	adds	r2, r7, #4
 800373c:	4b06      	ldr	r3, [pc, #24]	@ (8003758 <MX_ADC1_Init+0xc8>)
 800373e:	0011      	movs	r1, r2
 8003740:	0018      	movs	r0, r3
 8003742:	f001 f927 	bl	8004994 <HAL_ADC_ConfigChannel>
 8003746:	1e03      	subs	r3, r0, #0
 8003748:	d001      	beq.n	800374e <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 800374a:	f000 f9f1 	bl	8003b30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800374e:	46c0      	nop			@ (mov r8, r8)
 8003750:	46bd      	mov	sp, r7
 8003752:	b004      	add	sp, #16
 8003754:	bd80      	pop	{r7, pc}
 8003756:	46c0      	nop			@ (mov r8, r8)
 8003758:	200001f0 	.word	0x200001f0
 800375c:	40012400 	.word	0x40012400

08003760 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003764:	4b1b      	ldr	r3, [pc, #108]	@ (80037d4 <MX_I2C1_Init+0x74>)
 8003766:	4a1c      	ldr	r2, [pc, #112]	@ (80037d8 <MX_I2C1_Init+0x78>)
 8003768:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 800376a:	4b1a      	ldr	r3, [pc, #104]	@ (80037d4 <MX_I2C1_Init+0x74>)
 800376c:	4a1b      	ldr	r2, [pc, #108]	@ (80037dc <MX_I2C1_Init+0x7c>)
 800376e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003770:	4b18      	ldr	r3, [pc, #96]	@ (80037d4 <MX_I2C1_Init+0x74>)
 8003772:	2200      	movs	r2, #0
 8003774:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003776:	4b17      	ldr	r3, [pc, #92]	@ (80037d4 <MX_I2C1_Init+0x74>)
 8003778:	2201      	movs	r2, #1
 800377a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800377c:	4b15      	ldr	r3, [pc, #84]	@ (80037d4 <MX_I2C1_Init+0x74>)
 800377e:	2200      	movs	r2, #0
 8003780:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003782:	4b14      	ldr	r3, [pc, #80]	@ (80037d4 <MX_I2C1_Init+0x74>)
 8003784:	2200      	movs	r2, #0
 8003786:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003788:	4b12      	ldr	r3, [pc, #72]	@ (80037d4 <MX_I2C1_Init+0x74>)
 800378a:	2200      	movs	r2, #0
 800378c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800378e:	4b11      	ldr	r3, [pc, #68]	@ (80037d4 <MX_I2C1_Init+0x74>)
 8003790:	2200      	movs	r2, #0
 8003792:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003794:	4b0f      	ldr	r3, [pc, #60]	@ (80037d4 <MX_I2C1_Init+0x74>)
 8003796:	2200      	movs	r2, #0
 8003798:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800379a:	4b0e      	ldr	r3, [pc, #56]	@ (80037d4 <MX_I2C1_Init+0x74>)
 800379c:	0018      	movs	r0, r3
 800379e:	f002 faa3 	bl	8005ce8 <HAL_I2C_Init>
 80037a2:	1e03      	subs	r3, r0, #0
 80037a4:	d001      	beq.n	80037aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80037a6:	f000 f9c3 	bl	8003b30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80037aa:	4b0a      	ldr	r3, [pc, #40]	@ (80037d4 <MX_I2C1_Init+0x74>)
 80037ac:	2100      	movs	r1, #0
 80037ae:	0018      	movs	r0, r3
 80037b0:	f003 f89e 	bl	80068f0 <HAL_I2CEx_ConfigAnalogFilter>
 80037b4:	1e03      	subs	r3, r0, #0
 80037b6:	d001      	beq.n	80037bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80037b8:	f000 f9ba 	bl	8003b30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80037bc:	4b05      	ldr	r3, [pc, #20]	@ (80037d4 <MX_I2C1_Init+0x74>)
 80037be:	2100      	movs	r1, #0
 80037c0:	0018      	movs	r0, r3
 80037c2:	f003 f8e1 	bl	8006988 <HAL_I2CEx_ConfigDigitalFilter>
 80037c6:	1e03      	subs	r3, r0, #0
 80037c8:	d001      	beq.n	80037ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80037ca:	f000 f9b1 	bl	8003b30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	200002b0 	.word	0x200002b0
 80037d8:	40005400 	.word	0x40005400
 80037dc:	10b17db5 	.word	0x10b17db5

080037e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b09c      	sub	sp, #112	@ 0x70
 80037e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037e6:	2360      	movs	r3, #96	@ 0x60
 80037e8:	18fb      	adds	r3, r7, r3
 80037ea:	0018      	movs	r0, r3
 80037ec:	2310      	movs	r3, #16
 80037ee:	001a      	movs	r2, r3
 80037f0:	2100      	movs	r1, #0
 80037f2:	f006 faff 	bl	8009df4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037f6:	2354      	movs	r3, #84	@ 0x54
 80037f8:	18fb      	adds	r3, r7, r3
 80037fa:	0018      	movs	r0, r3
 80037fc:	230c      	movs	r3, #12
 80037fe:	001a      	movs	r2, r3
 8003800:	2100      	movs	r1, #0
 8003802:	f006 faf7 	bl	8009df4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003806:	2338      	movs	r3, #56	@ 0x38
 8003808:	18fb      	adds	r3, r7, r3
 800380a:	0018      	movs	r0, r3
 800380c:	231c      	movs	r3, #28
 800380e:	001a      	movs	r2, r3
 8003810:	2100      	movs	r1, #0
 8003812:	f006 faef 	bl	8009df4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003816:	1d3b      	adds	r3, r7, #4
 8003818:	0018      	movs	r0, r3
 800381a:	2334      	movs	r3, #52	@ 0x34
 800381c:	001a      	movs	r2, r3
 800381e:	2100      	movs	r1, #0
 8003820:	f006 fae8 	bl	8009df4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003824:	4b51      	ldr	r3, [pc, #324]	@ (800396c <MX_TIM1_Init+0x18c>)
 8003826:	4a52      	ldr	r2, [pc, #328]	@ (8003970 <MX_TIM1_Init+0x190>)
 8003828:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800382a:	4b50      	ldr	r3, [pc, #320]	@ (800396c <MX_TIM1_Init+0x18c>)
 800382c:	2200      	movs	r2, #0
 800382e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003830:	4b4e      	ldr	r3, [pc, #312]	@ (800396c <MX_TIM1_Init+0x18c>)
 8003832:	2220      	movs	r2, #32
 8003834:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003836:	4b4d      	ldr	r3, [pc, #308]	@ (800396c <MX_TIM1_Init+0x18c>)
 8003838:	4a4e      	ldr	r2, [pc, #312]	@ (8003974 <MX_TIM1_Init+0x194>)
 800383a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800383c:	4b4b      	ldr	r3, [pc, #300]	@ (800396c <MX_TIM1_Init+0x18c>)
 800383e:	2200      	movs	r2, #0
 8003840:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003842:	4b4a      	ldr	r3, [pc, #296]	@ (800396c <MX_TIM1_Init+0x18c>)
 8003844:	2200      	movs	r2, #0
 8003846:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003848:	4b48      	ldr	r3, [pc, #288]	@ (800396c <MX_TIM1_Init+0x18c>)
 800384a:	2200      	movs	r2, #0
 800384c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800384e:	4b47      	ldr	r3, [pc, #284]	@ (800396c <MX_TIM1_Init+0x18c>)
 8003850:	0018      	movs	r0, r3
 8003852:	f003 ff1f 	bl	8007694 <HAL_TIM_Base_Init>
 8003856:	1e03      	subs	r3, r0, #0
 8003858:	d001      	beq.n	800385e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800385a:	f000 f969 	bl	8003b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800385e:	2160      	movs	r1, #96	@ 0x60
 8003860:	187b      	adds	r3, r7, r1
 8003862:	2280      	movs	r2, #128	@ 0x80
 8003864:	0152      	lsls	r2, r2, #5
 8003866:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003868:	187a      	adds	r2, r7, r1
 800386a:	4b40      	ldr	r3, [pc, #256]	@ (800396c <MX_TIM1_Init+0x18c>)
 800386c:	0011      	movs	r1, r2
 800386e:	0018      	movs	r0, r3
 8003870:	f004 f9ac 	bl	8007bcc <HAL_TIM_ConfigClockSource>
 8003874:	1e03      	subs	r3, r0, #0
 8003876:	d001      	beq.n	800387c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8003878:	f000 f95a 	bl	8003b30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800387c:	4b3b      	ldr	r3, [pc, #236]	@ (800396c <MX_TIM1_Init+0x18c>)
 800387e:	0018      	movs	r0, r3
 8003880:	f003 ff60 	bl	8007744 <HAL_TIM_PWM_Init>
 8003884:	1e03      	subs	r3, r0, #0
 8003886:	d001      	beq.n	800388c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8003888:	f000 f952 	bl	8003b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800388c:	2154      	movs	r1, #84	@ 0x54
 800388e:	187b      	adds	r3, r7, r1
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003894:	187b      	adds	r3, r7, r1
 8003896:	2200      	movs	r2, #0
 8003898:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800389a:	187b      	adds	r3, r7, r1
 800389c:	2200      	movs	r2, #0
 800389e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80038a0:	187a      	adds	r2, r7, r1
 80038a2:	4b32      	ldr	r3, [pc, #200]	@ (800396c <MX_TIM1_Init+0x18c>)
 80038a4:	0011      	movs	r1, r2
 80038a6:	0018      	movs	r0, r3
 80038a8:	f004 fe6e 	bl	8008588 <HAL_TIMEx_MasterConfigSynchronization>
 80038ac:	1e03      	subs	r3, r0, #0
 80038ae:	d001      	beq.n	80038b4 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80038b0:	f000 f93e 	bl	8003b30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80038b4:	2138      	movs	r1, #56	@ 0x38
 80038b6:	187b      	adds	r3, r7, r1
 80038b8:	2270      	movs	r2, #112	@ 0x70
 80038ba:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80038bc:	187b      	adds	r3, r7, r1
 80038be:	2200      	movs	r2, #0
 80038c0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038c2:	187b      	adds	r3, r7, r1
 80038c4:	2200      	movs	r2, #0
 80038c6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80038c8:	187b      	adds	r3, r7, r1
 80038ca:	2200      	movs	r2, #0
 80038cc:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038ce:	187b      	adds	r3, r7, r1
 80038d0:	2200      	movs	r2, #0
 80038d2:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80038d4:	187b      	adds	r3, r7, r1
 80038d6:	2200      	movs	r2, #0
 80038d8:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80038da:	187b      	adds	r3, r7, r1
 80038dc:	2200      	movs	r2, #0
 80038de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038e0:	1879      	adds	r1, r7, r1
 80038e2:	4b22      	ldr	r3, [pc, #136]	@ (800396c <MX_TIM1_Init+0x18c>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	0018      	movs	r0, r3
 80038e8:	f004 f870 	bl	80079cc <HAL_TIM_PWM_ConfigChannel>
 80038ec:	1e03      	subs	r3, r0, #0
 80038ee:	d001      	beq.n	80038f4 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80038f0:	f000 f91e 	bl	8003b30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80038f4:	1d3b      	adds	r3, r7, #4
 80038f6:	2200      	movs	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80038fa:	1d3b      	adds	r3, r7, #4
 80038fc:	2200      	movs	r2, #0
 80038fe:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003900:	1d3b      	adds	r3, r7, #4
 8003902:	2200      	movs	r2, #0
 8003904:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003906:	1d3b      	adds	r3, r7, #4
 8003908:	2200      	movs	r2, #0
 800390a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800390c:	1d3b      	adds	r3, r7, #4
 800390e:	2200      	movs	r2, #0
 8003910:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003912:	1d3b      	adds	r3, r7, #4
 8003914:	2280      	movs	r2, #128	@ 0x80
 8003916:	0192      	lsls	r2, r2, #6
 8003918:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800391a:	1d3b      	adds	r3, r7, #4
 800391c:	2200      	movs	r2, #0
 800391e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003920:	1d3b      	adds	r3, r7, #4
 8003922:	2200      	movs	r2, #0
 8003924:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003926:	1d3b      	adds	r3, r7, #4
 8003928:	2200      	movs	r2, #0
 800392a:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800392c:	1d3b      	adds	r3, r7, #4
 800392e:	2280      	movs	r2, #128	@ 0x80
 8003930:	0492      	lsls	r2, r2, #18
 8003932:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003934:	1d3b      	adds	r3, r7, #4
 8003936:	2200      	movs	r2, #0
 8003938:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800393a:	1d3b      	adds	r3, r7, #4
 800393c:	2200      	movs	r2, #0
 800393e:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003940:	1d3b      	adds	r3, r7, #4
 8003942:	2200      	movs	r2, #0
 8003944:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003946:	1d3a      	adds	r2, r7, #4
 8003948:	4b08      	ldr	r3, [pc, #32]	@ (800396c <MX_TIM1_Init+0x18c>)
 800394a:	0011      	movs	r1, r2
 800394c:	0018      	movs	r0, r3
 800394e:	f004 fe83 	bl	8008658 <HAL_TIMEx_ConfigBreakDeadTime>
 8003952:	1e03      	subs	r3, r0, #0
 8003954:	d001      	beq.n	800395a <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8003956:	f000 f8eb 	bl	8003b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800395a:	4b04      	ldr	r3, [pc, #16]	@ (800396c <MX_TIM1_Init+0x18c>)
 800395c:	0018      	movs	r0, r3
 800395e:	f000 fa1f 	bl	8003da0 <HAL_TIM_MspPostInit>

}
 8003962:	46c0      	nop			@ (mov r8, r8)
 8003964:	46bd      	mov	sp, r7
 8003966:	b01c      	add	sp, #112	@ 0x70
 8003968:	bd80      	pop	{r7, pc}
 800396a:	46c0      	nop			@ (mov r8, r8)
 800396c:	20000304 	.word	0x20000304
 8003970:	40012c00 	.word	0x40012c00
 8003974:	0000ffff 	.word	0x0000ffff

08003978 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800397c:	4b23      	ldr	r3, [pc, #140]	@ (8003a0c <MX_USART2_UART_Init+0x94>)
 800397e:	4a24      	ldr	r2, [pc, #144]	@ (8003a10 <MX_USART2_UART_Init+0x98>)
 8003980:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003982:	4b22      	ldr	r3, [pc, #136]	@ (8003a0c <MX_USART2_UART_Init+0x94>)
 8003984:	22e1      	movs	r2, #225	@ 0xe1
 8003986:	0252      	lsls	r2, r2, #9
 8003988:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800398a:	4b20      	ldr	r3, [pc, #128]	@ (8003a0c <MX_USART2_UART_Init+0x94>)
 800398c:	2200      	movs	r2, #0
 800398e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003990:	4b1e      	ldr	r3, [pc, #120]	@ (8003a0c <MX_USART2_UART_Init+0x94>)
 8003992:	2200      	movs	r2, #0
 8003994:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003996:	4b1d      	ldr	r3, [pc, #116]	@ (8003a0c <MX_USART2_UART_Init+0x94>)
 8003998:	2200      	movs	r2, #0
 800399a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800399c:	4b1b      	ldr	r3, [pc, #108]	@ (8003a0c <MX_USART2_UART_Init+0x94>)
 800399e:	220c      	movs	r2, #12
 80039a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039a2:	4b1a      	ldr	r3, [pc, #104]	@ (8003a0c <MX_USART2_UART_Init+0x94>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039a8:	4b18      	ldr	r3, [pc, #96]	@ (8003a0c <MX_USART2_UART_Init+0x94>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039ae:	4b17      	ldr	r3, [pc, #92]	@ (8003a0c <MX_USART2_UART_Init+0x94>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80039b4:	4b15      	ldr	r3, [pc, #84]	@ (8003a0c <MX_USART2_UART_Init+0x94>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039ba:	4b14      	ldr	r3, [pc, #80]	@ (8003a0c <MX_USART2_UART_Init+0x94>)
 80039bc:	2200      	movs	r2, #0
 80039be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80039c0:	4b12      	ldr	r3, [pc, #72]	@ (8003a0c <MX_USART2_UART_Init+0x94>)
 80039c2:	0018      	movs	r0, r3
 80039c4:	f004 fee4 	bl	8008790 <HAL_UART_Init>
 80039c8:	1e03      	subs	r3, r0, #0
 80039ca:	d001      	beq.n	80039d0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80039cc:	f000 f8b0 	bl	8003b30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80039d0:	4b0e      	ldr	r3, [pc, #56]	@ (8003a0c <MX_USART2_UART_Init+0x94>)
 80039d2:	2100      	movs	r1, #0
 80039d4:	0018      	movs	r0, r3
 80039d6:	f005 fbe7 	bl	80091a8 <HAL_UARTEx_SetTxFifoThreshold>
 80039da:	1e03      	subs	r3, r0, #0
 80039dc:	d001      	beq.n	80039e2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80039de:	f000 f8a7 	bl	8003b30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80039e2:	4b0a      	ldr	r3, [pc, #40]	@ (8003a0c <MX_USART2_UART_Init+0x94>)
 80039e4:	2100      	movs	r1, #0
 80039e6:	0018      	movs	r0, r3
 80039e8:	f005 fc1e 	bl	8009228 <HAL_UARTEx_SetRxFifoThreshold>
 80039ec:	1e03      	subs	r3, r0, #0
 80039ee:	d001      	beq.n	80039f4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80039f0:	f000 f89e 	bl	8003b30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80039f4:	4b05      	ldr	r3, [pc, #20]	@ (8003a0c <MX_USART2_UART_Init+0x94>)
 80039f6:	0018      	movs	r0, r3
 80039f8:	f005 fb9c 	bl	8009134 <HAL_UARTEx_DisableFifoMode>
 80039fc:	1e03      	subs	r3, r0, #0
 80039fe:	d001      	beq.n	8003a04 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003a00:	f000 f896 	bl	8003b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003a04:	46c0      	nop			@ (mov r8, r8)
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	46c0      	nop			@ (mov r8, r8)
 8003a0c:	20000350 	.word	0x20000350
 8003a10:	40004400 	.word	0x40004400

08003a14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8003a4c <MX_DMA_Init+0x38>)
 8003a1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a4c <MX_DMA_Init+0x38>)
 8003a20:	2101      	movs	r1, #1
 8003a22:	430a      	orrs	r2, r1
 8003a24:	639a      	str	r2, [r3, #56]	@ 0x38
 8003a26:	4b09      	ldr	r3, [pc, #36]	@ (8003a4c <MX_DMA_Init+0x38>)
 8003a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	607b      	str	r3, [r7, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003a32:	2200      	movs	r2, #0
 8003a34:	2100      	movs	r1, #0
 8003a36:	2009      	movs	r0, #9
 8003a38:	f001 fd36 	bl	80054a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003a3c:	2009      	movs	r0, #9
 8003a3e:	f001 fd48 	bl	80054d2 <HAL_NVIC_EnableIRQ>

}
 8003a42:	46c0      	nop			@ (mov r8, r8)
 8003a44:	46bd      	mov	sp, r7
 8003a46:	b002      	add	sp, #8
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	46c0      	nop			@ (mov r8, r8)
 8003a4c:	40021000 	.word	0x40021000

08003a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a50:	b590      	push	{r4, r7, lr}
 8003a52:	b089      	sub	sp, #36	@ 0x24
 8003a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a56:	240c      	movs	r4, #12
 8003a58:	193b      	adds	r3, r7, r4
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	2314      	movs	r3, #20
 8003a5e:	001a      	movs	r2, r3
 8003a60:	2100      	movs	r1, #0
 8003a62:	f006 f9c7 	bl	8009df4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a66:	4b21      	ldr	r3, [pc, #132]	@ (8003aec <MX_GPIO_Init+0x9c>)
 8003a68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a6a:	4b20      	ldr	r3, [pc, #128]	@ (8003aec <MX_GPIO_Init+0x9c>)
 8003a6c:	2104      	movs	r1, #4
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a72:	4b1e      	ldr	r3, [pc, #120]	@ (8003aec <MX_GPIO_Init+0x9c>)
 8003a74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a76:	2204      	movs	r2, #4
 8003a78:	4013      	ands	r3, r2
 8003a7a:	60bb      	str	r3, [r7, #8]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8003aec <MX_GPIO_Init+0x9c>)
 8003a80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a82:	4b1a      	ldr	r3, [pc, #104]	@ (8003aec <MX_GPIO_Init+0x9c>)
 8003a84:	2120      	movs	r1, #32
 8003a86:	430a      	orrs	r2, r1
 8003a88:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a8a:	4b18      	ldr	r3, [pc, #96]	@ (8003aec <MX_GPIO_Init+0x9c>)
 8003a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a8e:	2220      	movs	r2, #32
 8003a90:	4013      	ands	r3, r2
 8003a92:	607b      	str	r3, [r7, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a96:	4b15      	ldr	r3, [pc, #84]	@ (8003aec <MX_GPIO_Init+0x9c>)
 8003a98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a9a:	4b14      	ldr	r3, [pc, #80]	@ (8003aec <MX_GPIO_Init+0x9c>)
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003aa2:	4b12      	ldr	r3, [pc, #72]	@ (8003aec <MX_GPIO_Init+0x9c>)
 8003aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8003aae:	23a0      	movs	r3, #160	@ 0xa0
 8003ab0:	05db      	lsls	r3, r3, #23
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	2120      	movs	r1, #32
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f002 f8de 	bl	8005c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8003abc:	0021      	movs	r1, r4
 8003abe:	187b      	adds	r3, r7, r1
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ac4:	187b      	adds	r3, r7, r1
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aca:	187b      	adds	r3, r7, r1
 8003acc:	2200      	movs	r2, #0
 8003ace:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ad0:	187b      	adds	r3, r7, r1
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8003ad6:	187a      	adds	r2, r7, r1
 8003ad8:	23a0      	movs	r3, #160	@ 0xa0
 8003ada:	05db      	lsls	r3, r3, #23
 8003adc:	0011      	movs	r1, r2
 8003ade:	0018      	movs	r0, r3
 8003ae0:	f001 ff66 	bl	80059b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003ae4:	46c0      	nop			@ (mov r8, r8)
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	b009      	add	sp, #36	@ 0x24
 8003aea:	bd90      	pop	{r4, r7, pc}
 8003aec:	40021000 	.word	0x40021000

08003af0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8003af0:	b590      	push	{r4, r7, lr}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
	potVal = pot[0];
 8003af8:	4b09      	ldr	r3, [pc, #36]	@ (8003b20 <HAL_ADC_ConvCpltCallback+0x30>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	4b09      	ldr	r3, [pc, #36]	@ (8003b24 <HAL_ADC_ConvCpltCallback+0x34>)
 8003afe:	601a      	str	r2, [r3, #0]
	TIM1->CCR1=(potVal * TIM1->ARR) / ADC_MAX;
 8003b00:	4b09      	ldr	r3, [pc, #36]	@ (8003b28 <HAL_ADC_ConvCpltCallback+0x38>)
 8003b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b04:	4b07      	ldr	r3, [pc, #28]	@ (8003b24 <HAL_ADC_ConvCpltCallback+0x34>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4353      	muls	r3, r2
 8003b0a:	4c07      	ldr	r4, [pc, #28]	@ (8003b28 <HAL_ADC_ConvCpltCallback+0x38>)
 8003b0c:	4907      	ldr	r1, [pc, #28]	@ (8003b2c <HAL_ADC_ConvCpltCallback+0x3c>)
 8003b0e:	0018      	movs	r0, r3
 8003b10:	f7fc fb12 	bl	8000138 <__udivsi3>
 8003b14:	0003      	movs	r3, r0
 8003b16:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8003b18:	46c0      	nop			@ (mov r8, r8)
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	b003      	add	sp, #12
 8003b1e:	bd90      	pop	{r4, r7, pc}
 8003b20:	200003e4 	.word	0x200003e4
 8003b24:	200003e8 	.word	0x200003e8
 8003b28:	40012c00 	.word	0x40012c00
 8003b2c:	00000fff 	.word	0x00000fff

08003b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b34:	b672      	cpsid	i
}
 8003b36:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b38:	46c0      	nop			@ (mov r8, r8)
 8003b3a:	e7fd      	b.n	8003b38 <Error_Handler+0x8>

08003b3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b42:	4b0f      	ldr	r3, [pc, #60]	@ (8003b80 <HAL_MspInit+0x44>)
 8003b44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b46:	4b0e      	ldr	r3, [pc, #56]	@ (8003b80 <HAL_MspInit+0x44>)
 8003b48:	2101      	movs	r1, #1
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8003b80 <HAL_MspInit+0x44>)
 8003b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b52:	2201      	movs	r2, #1
 8003b54:	4013      	ands	r3, r2
 8003b56:	607b      	str	r3, [r7, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b5a:	4b09      	ldr	r3, [pc, #36]	@ (8003b80 <HAL_MspInit+0x44>)
 8003b5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b5e:	4b08      	ldr	r3, [pc, #32]	@ (8003b80 <HAL_MspInit+0x44>)
 8003b60:	2180      	movs	r1, #128	@ 0x80
 8003b62:	0549      	lsls	r1, r1, #21
 8003b64:	430a      	orrs	r2, r1
 8003b66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003b68:	4b05      	ldr	r3, [pc, #20]	@ (8003b80 <HAL_MspInit+0x44>)
 8003b6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b6c:	2380      	movs	r3, #128	@ 0x80
 8003b6e:	055b      	lsls	r3, r3, #21
 8003b70:	4013      	ands	r3, r2
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b76:	46c0      	nop			@ (mov r8, r8)
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b002      	add	sp, #8
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	46c0      	nop			@ (mov r8, r8)
 8003b80:	40021000 	.word	0x40021000

08003b84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b84:	b590      	push	{r4, r7, lr}
 8003b86:	b091      	sub	sp, #68	@ 0x44
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b8c:	232c      	movs	r3, #44	@ 0x2c
 8003b8e:	18fb      	adds	r3, r7, r3
 8003b90:	0018      	movs	r0, r3
 8003b92:	2314      	movs	r3, #20
 8003b94:	001a      	movs	r2, r3
 8003b96:	2100      	movs	r1, #0
 8003b98:	f006 f92c 	bl	8009df4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b9c:	2410      	movs	r4, #16
 8003b9e:	193b      	adds	r3, r7, r4
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	231c      	movs	r3, #28
 8003ba4:	001a      	movs	r2, r3
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	f006 f924 	bl	8009df4 <memset>
  if(hadc->Instance==ADC1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a36      	ldr	r2, [pc, #216]	@ (8003c8c <HAL_ADC_MspInit+0x108>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d165      	bne.n	8003c82 <HAL_ADC_MspInit+0xfe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003bb6:	193b      	adds	r3, r7, r4
 8003bb8:	2280      	movs	r2, #128	@ 0x80
 8003bba:	01d2      	lsls	r2, r2, #7
 8003bbc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8003bbe:	193b      	adds	r3, r7, r4
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bc4:	193b      	adds	r3, r7, r4
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	f003 fc30 	bl	800742c <HAL_RCCEx_PeriphCLKConfig>
 8003bcc:	1e03      	subs	r3, r0, #0
 8003bce:	d001      	beq.n	8003bd4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003bd0:	f7ff ffae 	bl	8003b30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8003c90 <HAL_ADC_MspInit+0x10c>)
 8003bd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bd8:	4b2d      	ldr	r3, [pc, #180]	@ (8003c90 <HAL_ADC_MspInit+0x10c>)
 8003bda:	2180      	movs	r1, #128	@ 0x80
 8003bdc:	0349      	lsls	r1, r1, #13
 8003bde:	430a      	orrs	r2, r1
 8003be0:	641a      	str	r2, [r3, #64]	@ 0x40
 8003be2:	4b2b      	ldr	r3, [pc, #172]	@ (8003c90 <HAL_ADC_MspInit+0x10c>)
 8003be4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003be6:	2380      	movs	r3, #128	@ 0x80
 8003be8:	035b      	lsls	r3, r3, #13
 8003bea:	4013      	ands	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bf0:	4b27      	ldr	r3, [pc, #156]	@ (8003c90 <HAL_ADC_MspInit+0x10c>)
 8003bf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bf4:	4b26      	ldr	r3, [pc, #152]	@ (8003c90 <HAL_ADC_MspInit+0x10c>)
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	635a      	str	r2, [r3, #52]	@ 0x34
 8003bfc:	4b24      	ldr	r3, [pc, #144]	@ (8003c90 <HAL_ADC_MspInit+0x10c>)
 8003bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c00:	2201      	movs	r2, #1
 8003c02:	4013      	ands	r3, r2
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = Pot_Pin;
 8003c08:	212c      	movs	r1, #44	@ 0x2c
 8003c0a:	187b      	adds	r3, r7, r1
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c10:	187b      	adds	r3, r7, r1
 8003c12:	2203      	movs	r2, #3
 8003c14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c16:	187b      	adds	r3, r7, r1
 8003c18:	2200      	movs	r2, #0
 8003c1a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Pot_GPIO_Port, &GPIO_InitStruct);
 8003c1c:	187a      	adds	r2, r7, r1
 8003c1e:	23a0      	movs	r3, #160	@ 0xa0
 8003c20:	05db      	lsls	r3, r3, #23
 8003c22:	0011      	movs	r1, r2
 8003c24:	0018      	movs	r0, r3
 8003c26:	f001 fec3 	bl	80059b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003c2a:	4b1a      	ldr	r3, [pc, #104]	@ (8003c94 <HAL_ADC_MspInit+0x110>)
 8003c2c:	4a1a      	ldr	r2, [pc, #104]	@ (8003c98 <HAL_ADC_MspInit+0x114>)
 8003c2e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003c30:	4b18      	ldr	r3, [pc, #96]	@ (8003c94 <HAL_ADC_MspInit+0x110>)
 8003c32:	2205      	movs	r2, #5
 8003c34:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c36:	4b17      	ldr	r3, [pc, #92]	@ (8003c94 <HAL_ADC_MspInit+0x110>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c3c:	4b15      	ldr	r3, [pc, #84]	@ (8003c94 <HAL_ADC_MspInit+0x110>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003c42:	4b14      	ldr	r3, [pc, #80]	@ (8003c94 <HAL_ADC_MspInit+0x110>)
 8003c44:	2280      	movs	r2, #128	@ 0x80
 8003c46:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003c48:	4b12      	ldr	r3, [pc, #72]	@ (8003c94 <HAL_ADC_MspInit+0x110>)
 8003c4a:	2280      	movs	r2, #128	@ 0x80
 8003c4c:	0092      	lsls	r2, r2, #2
 8003c4e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003c50:	4b10      	ldr	r3, [pc, #64]	@ (8003c94 <HAL_ADC_MspInit+0x110>)
 8003c52:	2280      	movs	r2, #128	@ 0x80
 8003c54:	0112      	lsls	r2, r2, #4
 8003c56:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003c58:	4b0e      	ldr	r3, [pc, #56]	@ (8003c94 <HAL_ADC_MspInit+0x110>)
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c94 <HAL_ADC_MspInit+0x110>)
 8003c60:	2280      	movs	r2, #128	@ 0x80
 8003c62:	0152      	lsls	r2, r2, #5
 8003c64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003c66:	4b0b      	ldr	r3, [pc, #44]	@ (8003c94 <HAL_ADC_MspInit+0x110>)
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f001 fc4f 	bl	800550c <HAL_DMA_Init>
 8003c6e:	1e03      	subs	r3, r0, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 8003c72:	f7ff ff5d 	bl	8003b30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a06      	ldr	r2, [pc, #24]	@ (8003c94 <HAL_ADC_MspInit+0x110>)
 8003c7a:	651a      	str	r2, [r3, #80]	@ 0x50
 8003c7c:	4b05      	ldr	r3, [pc, #20]	@ (8003c94 <HAL_ADC_MspInit+0x110>)
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003c82:	46c0      	nop			@ (mov r8, r8)
 8003c84:	46bd      	mov	sp, r7
 8003c86:	b011      	add	sp, #68	@ 0x44
 8003c88:	bd90      	pop	{r4, r7, pc}
 8003c8a:	46c0      	nop			@ (mov r8, r8)
 8003c8c:	40012400 	.word	0x40012400
 8003c90:	40021000 	.word	0x40021000
 8003c94:	20000254 	.word	0x20000254
 8003c98:	40020008 	.word	0x40020008

08003c9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c9c:	b590      	push	{r4, r7, lr}
 8003c9e:	b091      	sub	sp, #68	@ 0x44
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca4:	232c      	movs	r3, #44	@ 0x2c
 8003ca6:	18fb      	adds	r3, r7, r3
 8003ca8:	0018      	movs	r0, r3
 8003caa:	2314      	movs	r3, #20
 8003cac:	001a      	movs	r2, r3
 8003cae:	2100      	movs	r1, #0
 8003cb0:	f006 f8a0 	bl	8009df4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003cb4:	2410      	movs	r4, #16
 8003cb6:	193b      	adds	r3, r7, r4
 8003cb8:	0018      	movs	r0, r3
 8003cba:	231c      	movs	r3, #28
 8003cbc:	001a      	movs	r2, r3
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	f006 f898 	bl	8009df4 <memset>
  if(hi2c->Instance==I2C1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a23      	ldr	r2, [pc, #140]	@ (8003d58 <HAL_I2C_MspInit+0xbc>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d13f      	bne.n	8003d4e <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003cce:	193b      	adds	r3, r7, r4
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003cd4:	193b      	adds	r3, r7, r4
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cda:	193b      	adds	r3, r7, r4
 8003cdc:	0018      	movs	r0, r3
 8003cde:	f003 fba5 	bl	800742c <HAL_RCCEx_PeriphCLKConfig>
 8003ce2:	1e03      	subs	r3, r0, #0
 8003ce4:	d001      	beq.n	8003cea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003ce6:	f7ff ff23 	bl	8003b30 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cea:	4b1c      	ldr	r3, [pc, #112]	@ (8003d5c <HAL_I2C_MspInit+0xc0>)
 8003cec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cee:	4b1b      	ldr	r3, [pc, #108]	@ (8003d5c <HAL_I2C_MspInit+0xc0>)
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003cf6:	4b19      	ldr	r3, [pc, #100]	@ (8003d5c <HAL_I2C_MspInit+0xc0>)
 8003cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003d02:	212c      	movs	r1, #44	@ 0x2c
 8003d04:	187b      	adds	r3, r7, r1
 8003d06:	22c0      	movs	r2, #192	@ 0xc0
 8003d08:	00d2      	lsls	r2, r2, #3
 8003d0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d0c:	187b      	adds	r3, r7, r1
 8003d0e:	2212      	movs	r2, #18
 8003d10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d12:	187b      	adds	r3, r7, r1
 8003d14:	2201      	movs	r2, #1
 8003d16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d18:	187b      	adds	r3, r7, r1
 8003d1a:	2203      	movs	r2, #3
 8003d1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003d1e:	187b      	adds	r3, r7, r1
 8003d20:	2206      	movs	r2, #6
 8003d22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d24:	187a      	adds	r2, r7, r1
 8003d26:	23a0      	movs	r3, #160	@ 0xa0
 8003d28:	05db      	lsls	r3, r3, #23
 8003d2a:	0011      	movs	r1, r2
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f001 fe3f 	bl	80059b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d32:	4b0a      	ldr	r3, [pc, #40]	@ (8003d5c <HAL_I2C_MspInit+0xc0>)
 8003d34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d36:	4b09      	ldr	r3, [pc, #36]	@ (8003d5c <HAL_I2C_MspInit+0xc0>)
 8003d38:	2180      	movs	r1, #128	@ 0x80
 8003d3a:	0389      	lsls	r1, r1, #14
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003d40:	4b06      	ldr	r3, [pc, #24]	@ (8003d5c <HAL_I2C_MspInit+0xc0>)
 8003d42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d44:	2380      	movs	r3, #128	@ 0x80
 8003d46:	039b      	lsls	r3, r3, #14
 8003d48:	4013      	ands	r3, r2
 8003d4a:	60bb      	str	r3, [r7, #8]
 8003d4c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003d4e:	46c0      	nop			@ (mov r8, r8)
 8003d50:	46bd      	mov	sp, r7
 8003d52:	b011      	add	sp, #68	@ 0x44
 8003d54:	bd90      	pop	{r4, r7, pc}
 8003d56:	46c0      	nop			@ (mov r8, r8)
 8003d58:	40005400 	.word	0x40005400
 8003d5c:	40021000 	.word	0x40021000

08003d60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8003d98 <HAL_TIM_Base_MspInit+0x38>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d10d      	bne.n	8003d8e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d72:	4b0a      	ldr	r3, [pc, #40]	@ (8003d9c <HAL_TIM_Base_MspInit+0x3c>)
 8003d74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d76:	4b09      	ldr	r3, [pc, #36]	@ (8003d9c <HAL_TIM_Base_MspInit+0x3c>)
 8003d78:	2180      	movs	r1, #128	@ 0x80
 8003d7a:	0109      	lsls	r1, r1, #4
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d80:	4b06      	ldr	r3, [pc, #24]	@ (8003d9c <HAL_TIM_Base_MspInit+0x3c>)
 8003d82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d84:	2380      	movs	r3, #128	@ 0x80
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	4013      	ands	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8003d8e:	46c0      	nop			@ (mov r8, r8)
 8003d90:	46bd      	mov	sp, r7
 8003d92:	b004      	add	sp, #16
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	46c0      	nop			@ (mov r8, r8)
 8003d98:	40012c00 	.word	0x40012c00
 8003d9c:	40021000 	.word	0x40021000

08003da0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003da0:	b590      	push	{r4, r7, lr}
 8003da2:	b089      	sub	sp, #36	@ 0x24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da8:	240c      	movs	r4, #12
 8003daa:	193b      	adds	r3, r7, r4
 8003dac:	0018      	movs	r0, r3
 8003dae:	2314      	movs	r3, #20
 8003db0:	001a      	movs	r2, r3
 8003db2:	2100      	movs	r1, #0
 8003db4:	f006 f81e 	bl	8009df4 <memset>
  if(htim->Instance==TIM1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a15      	ldr	r2, [pc, #84]	@ (8003e14 <HAL_TIM_MspPostInit+0x74>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d123      	bne.n	8003e0a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dc2:	4b15      	ldr	r3, [pc, #84]	@ (8003e18 <HAL_TIM_MspPostInit+0x78>)
 8003dc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dc6:	4b14      	ldr	r3, [pc, #80]	@ (8003e18 <HAL_TIM_MspPostInit+0x78>)
 8003dc8:	2101      	movs	r1, #1
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	635a      	str	r2, [r3, #52]	@ 0x34
 8003dce:	4b12      	ldr	r3, [pc, #72]	@ (8003e18 <HAL_TIM_MspPostInit+0x78>)
 8003dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	60bb      	str	r3, [r7, #8]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003dda:	193b      	adds	r3, r7, r4
 8003ddc:	2280      	movs	r2, #128	@ 0x80
 8003dde:	0052      	lsls	r2, r2, #1
 8003de0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003de2:	0021      	movs	r1, r4
 8003de4:	187b      	adds	r3, r7, r1
 8003de6:	2212      	movs	r2, #18
 8003de8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dea:	187b      	adds	r3, r7, r1
 8003dec:	2200      	movs	r2, #0
 8003dee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003df0:	187b      	adds	r3, r7, r1
 8003df2:	2202      	movs	r2, #2
 8003df4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003df6:	187b      	adds	r3, r7, r1
 8003df8:	2202      	movs	r2, #2
 8003dfa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dfc:	187a      	adds	r2, r7, r1
 8003dfe:	23a0      	movs	r3, #160	@ 0xa0
 8003e00:	05db      	lsls	r3, r3, #23
 8003e02:	0011      	movs	r1, r2
 8003e04:	0018      	movs	r0, r3
 8003e06:	f001 fdd3 	bl	80059b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003e0a:	46c0      	nop			@ (mov r8, r8)
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	b009      	add	sp, #36	@ 0x24
 8003e10:	bd90      	pop	{r4, r7, pc}
 8003e12:	46c0      	nop			@ (mov r8, r8)
 8003e14:	40012c00 	.word	0x40012c00
 8003e18:	40021000 	.word	0x40021000

08003e1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e1c:	b590      	push	{r4, r7, lr}
 8003e1e:	b091      	sub	sp, #68	@ 0x44
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e24:	232c      	movs	r3, #44	@ 0x2c
 8003e26:	18fb      	adds	r3, r7, r3
 8003e28:	0018      	movs	r0, r3
 8003e2a:	2314      	movs	r3, #20
 8003e2c:	001a      	movs	r2, r3
 8003e2e:	2100      	movs	r1, #0
 8003e30:	f005 ffe0 	bl	8009df4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e34:	2410      	movs	r4, #16
 8003e36:	193b      	adds	r3, r7, r4
 8003e38:	0018      	movs	r0, r3
 8003e3a:	231c      	movs	r3, #28
 8003e3c:	001a      	movs	r2, r3
 8003e3e:	2100      	movs	r1, #0
 8003e40:	f005 ffd8 	bl	8009df4 <memset>
  if(huart->Instance==USART2)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a22      	ldr	r2, [pc, #136]	@ (8003ed4 <HAL_UART_MspInit+0xb8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d13e      	bne.n	8003ecc <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003e4e:	193b      	adds	r3, r7, r4
 8003e50:	2202      	movs	r2, #2
 8003e52:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003e54:	193b      	adds	r3, r7, r4
 8003e56:	2200      	movs	r2, #0
 8003e58:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e5a:	193b      	adds	r3, r7, r4
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	f003 fae5 	bl	800742c <HAL_RCCEx_PeriphCLKConfig>
 8003e62:	1e03      	subs	r3, r0, #0
 8003e64:	d001      	beq.n	8003e6a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003e66:	f7ff fe63 	bl	8003b30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ed8 <HAL_UART_MspInit+0xbc>)
 8003e6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ed8 <HAL_UART_MspInit+0xbc>)
 8003e70:	2180      	movs	r1, #128	@ 0x80
 8003e72:	0289      	lsls	r1, r1, #10
 8003e74:	430a      	orrs	r2, r1
 8003e76:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003e78:	4b17      	ldr	r3, [pc, #92]	@ (8003ed8 <HAL_UART_MspInit+0xbc>)
 8003e7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e7c:	2380      	movs	r3, #128	@ 0x80
 8003e7e:	029b      	lsls	r3, r3, #10
 8003e80:	4013      	ands	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e86:	4b14      	ldr	r3, [pc, #80]	@ (8003ed8 <HAL_UART_MspInit+0xbc>)
 8003e88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e8a:	4b13      	ldr	r3, [pc, #76]	@ (8003ed8 <HAL_UART_MspInit+0xbc>)
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e92:	4b11      	ldr	r3, [pc, #68]	@ (8003ed8 <HAL_UART_MspInit+0xbc>)
 8003e94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e96:	2201      	movs	r2, #1
 8003e98:	4013      	ands	r3, r2
 8003e9a:	60bb      	str	r3, [r7, #8]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003e9e:	212c      	movs	r1, #44	@ 0x2c
 8003ea0:	187b      	adds	r3, r7, r1
 8003ea2:	220c      	movs	r2, #12
 8003ea4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea6:	187b      	adds	r3, r7, r1
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003eac:	187b      	adds	r3, r7, r1
 8003eae:	2201      	movs	r2, #1
 8003eb0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003eb2:	187b      	adds	r3, r7, r1
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003eb8:	187b      	adds	r3, r7, r1
 8003eba:	2201      	movs	r2, #1
 8003ebc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ebe:	187a      	adds	r2, r7, r1
 8003ec0:	23a0      	movs	r3, #160	@ 0xa0
 8003ec2:	05db      	lsls	r3, r3, #23
 8003ec4:	0011      	movs	r1, r2
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	f001 fd72 	bl	80059b0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003ecc:	46c0      	nop			@ (mov r8, r8)
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	b011      	add	sp, #68	@ 0x44
 8003ed2:	bd90      	pop	{r4, r7, pc}
 8003ed4:	40004400 	.word	0x40004400
 8003ed8:	40021000 	.word	0x40021000

08003edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003ee0:	46c0      	nop			@ (mov r8, r8)
 8003ee2:	e7fd      	b.n	8003ee0 <NMI_Handler+0x4>

08003ee4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ee8:	46c0      	nop			@ (mov r8, r8)
 8003eea:	e7fd      	b.n	8003ee8 <HardFault_Handler+0x4>

08003eec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003ef0:	46c0      	nop			@ (mov r8, r8)
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003efa:	46c0      	nop			@ (mov r8, r8)
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f04:	f000 f968 	bl	80041d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f08:	46c0      	nop			@ (mov r8, r8)
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003f14:	4b03      	ldr	r3, [pc, #12]	@ (8003f24 <DMA1_Channel1_IRQHandler+0x14>)
 8003f16:	0018      	movs	r0, r3
 8003f18:	f001 fc08 	bl	800572c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003f1c:	46c0      	nop			@ (mov r8, r8)
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	46c0      	nop			@ (mov r8, r8)
 8003f24:	20000254 	.word	0x20000254

08003f28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  return 1;
 8003f2c:	2301      	movs	r3, #1
}
 8003f2e:	0018      	movs	r0, r3
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <_kill>:

int _kill(int pid, int sig)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f3e:	f005 ff65 	bl	8009e0c <__errno>
 8003f42:	0003      	movs	r3, r0
 8003f44:	2216      	movs	r2, #22
 8003f46:	601a      	str	r2, [r3, #0]
  return -1;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	425b      	negs	r3, r3
}
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b002      	add	sp, #8
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <_exit>:

void _exit (int status)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	425a      	negs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	0011      	movs	r1, r2
 8003f64:	0018      	movs	r0, r3
 8003f66:	f7ff ffe5 	bl	8003f34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003f6a:	46c0      	nop			@ (mov r8, r8)
 8003f6c:	e7fd      	b.n	8003f6a <_exit+0x16>

08003f6e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b086      	sub	sp, #24
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	60f8      	str	r0, [r7, #12]
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]
 8003f7e:	e00a      	b.n	8003f96 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003f80:	e000      	b.n	8003f84 <_read+0x16>
 8003f82:	bf00      	nop
 8003f84:	0001      	movs	r1, r0
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	60ba      	str	r2, [r7, #8]
 8003f8c:	b2ca      	uxtb	r2, r1
 8003f8e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	3301      	adds	r3, #1
 8003f94:	617b      	str	r3, [r7, #20]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	dbf0      	blt.n	8003f80 <_read+0x12>
  }

  return len;
 8003f9e:	687b      	ldr	r3, [r7, #4]
}
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	b006      	add	sp, #24
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	e009      	b.n	8003fce <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	60ba      	str	r2, [r7, #8]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	e000      	b.n	8003fc8 <_write+0x20>
 8003fc6:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	617b      	str	r3, [r7, #20]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	dbf1      	blt.n	8003fba <_write+0x12>
  }
  return len;
 8003fd6:	687b      	ldr	r3, [r7, #4]
}
 8003fd8:	0018      	movs	r0, r3
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	b006      	add	sp, #24
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <_close>:

int _close(int file)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	425b      	negs	r3, r3
}
 8003fec:	0018      	movs	r0, r3
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	b002      	add	sp, #8
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2280      	movs	r2, #128	@ 0x80
 8004002:	0192      	lsls	r2, r2, #6
 8004004:	605a      	str	r2, [r3, #4]
  return 0;
 8004006:	2300      	movs	r3, #0
}
 8004008:	0018      	movs	r0, r3
 800400a:	46bd      	mov	sp, r7
 800400c:	b002      	add	sp, #8
 800400e:	bd80      	pop	{r7, pc}

08004010 <_isatty>:

int _isatty(int file)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004018:	2301      	movs	r3, #1
}
 800401a:	0018      	movs	r0, r3
 800401c:	46bd      	mov	sp, r7
 800401e:	b002      	add	sp, #8
 8004020:	bd80      	pop	{r7, pc}

08004022 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b084      	sub	sp, #16
 8004026:	af00      	add	r7, sp, #0
 8004028:	60f8      	str	r0, [r7, #12]
 800402a:	60b9      	str	r1, [r7, #8]
 800402c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800402e:	2300      	movs	r3, #0
}
 8004030:	0018      	movs	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	b004      	add	sp, #16
 8004036:	bd80      	pop	{r7, pc}

08004038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004040:	4a14      	ldr	r2, [pc, #80]	@ (8004094 <_sbrk+0x5c>)
 8004042:	4b15      	ldr	r3, [pc, #84]	@ (8004098 <_sbrk+0x60>)
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800404c:	4b13      	ldr	r3, [pc, #76]	@ (800409c <_sbrk+0x64>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d102      	bne.n	800405a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004054:	4b11      	ldr	r3, [pc, #68]	@ (800409c <_sbrk+0x64>)
 8004056:	4a12      	ldr	r2, [pc, #72]	@ (80040a0 <_sbrk+0x68>)
 8004058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800405a:	4b10      	ldr	r3, [pc, #64]	@ (800409c <_sbrk+0x64>)
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	18d3      	adds	r3, r2, r3
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	429a      	cmp	r2, r3
 8004066:	d207      	bcs.n	8004078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004068:	f005 fed0 	bl	8009e0c <__errno>
 800406c:	0003      	movs	r3, r0
 800406e:	220c      	movs	r2, #12
 8004070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004072:	2301      	movs	r3, #1
 8004074:	425b      	negs	r3, r3
 8004076:	e009      	b.n	800408c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004078:	4b08      	ldr	r3, [pc, #32]	@ (800409c <_sbrk+0x64>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800407e:	4b07      	ldr	r3, [pc, #28]	@ (800409c <_sbrk+0x64>)
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	18d2      	adds	r2, r2, r3
 8004086:	4b05      	ldr	r3, [pc, #20]	@ (800409c <_sbrk+0x64>)
 8004088:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800408a:	68fb      	ldr	r3, [r7, #12]
}
 800408c:	0018      	movs	r0, r3
 800408e:	46bd      	mov	sp, r7
 8004090:	b006      	add	sp, #24
 8004092:	bd80      	pop	{r7, pc}
 8004094:	20009000 	.word	0x20009000
 8004098:	00000400 	.word	0x00000400
 800409c:	20000534 	.word	0x20000534
 80040a0:	20000688 	.word	0x20000688

080040a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040a8:	46c0      	nop			@ (mov r8, r8)
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
	...

080040b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80040b0:	480d      	ldr	r0, [pc, #52]	@ (80040e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80040b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80040b4:	f7ff fff6 	bl	80040a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040b8:	480c      	ldr	r0, [pc, #48]	@ (80040ec <LoopForever+0x6>)
  ldr r1, =_edata
 80040ba:	490d      	ldr	r1, [pc, #52]	@ (80040f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80040bc:	4a0d      	ldr	r2, [pc, #52]	@ (80040f4 <LoopForever+0xe>)
  movs r3, #0
 80040be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040c0:	e002      	b.n	80040c8 <LoopCopyDataInit>

080040c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040c6:	3304      	adds	r3, #4

080040c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040cc:	d3f9      	bcc.n	80040c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040ce:	4a0a      	ldr	r2, [pc, #40]	@ (80040f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80040d0:	4c0a      	ldr	r4, [pc, #40]	@ (80040fc <LoopForever+0x16>)
  movs r3, #0
 80040d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040d4:	e001      	b.n	80040da <LoopFillZerobss>

080040d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040d8:	3204      	adds	r2, #4

080040da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040dc:	d3fb      	bcc.n	80040d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80040de:	f005 fe9b 	bl	8009e18 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80040e2:	f7ff f969 	bl	80033b8 <main>

080040e6 <LoopForever>:

LoopForever:
  b LoopForever
 80040e6:	e7fe      	b.n	80040e6 <LoopForever>
  ldr   r0, =_estack
 80040e8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80040ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040f0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80040f4:	0800c758 	.word	0x0800c758
  ldr r2, =_sbss
 80040f8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80040fc:	20000688 	.word	0x20000688

08004100 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004100:	e7fe      	b.n	8004100 <ADC1_IRQHandler>
	...

08004104 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800410a:	1dfb      	adds	r3, r7, #7
 800410c:	2200      	movs	r2, #0
 800410e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004110:	4b0b      	ldr	r3, [pc, #44]	@ (8004140 <HAL_Init+0x3c>)
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	4b0a      	ldr	r3, [pc, #40]	@ (8004140 <HAL_Init+0x3c>)
 8004116:	2180      	movs	r1, #128	@ 0x80
 8004118:	0049      	lsls	r1, r1, #1
 800411a:	430a      	orrs	r2, r1
 800411c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800411e:	2000      	movs	r0, #0
 8004120:	f000 f810 	bl	8004144 <HAL_InitTick>
 8004124:	1e03      	subs	r3, r0, #0
 8004126:	d003      	beq.n	8004130 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004128:	1dfb      	adds	r3, r7, #7
 800412a:	2201      	movs	r2, #1
 800412c:	701a      	strb	r2, [r3, #0]
 800412e:	e001      	b.n	8004134 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004130:	f7ff fd04 	bl	8003b3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004134:	1dfb      	adds	r3, r7, #7
 8004136:	781b      	ldrb	r3, [r3, #0]
}
 8004138:	0018      	movs	r0, r3
 800413a:	46bd      	mov	sp, r7
 800413c:	b002      	add	sp, #8
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40022000 	.word	0x40022000

08004144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004144:	b590      	push	{r4, r7, lr}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800414c:	230f      	movs	r3, #15
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	2200      	movs	r2, #0
 8004152:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004154:	4b1d      	ldr	r3, [pc, #116]	@ (80041cc <HAL_InitTick+0x88>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d02b      	beq.n	80041b4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800415c:	4b1c      	ldr	r3, [pc, #112]	@ (80041d0 <HAL_InitTick+0x8c>)
 800415e:	681c      	ldr	r4, [r3, #0]
 8004160:	4b1a      	ldr	r3, [pc, #104]	@ (80041cc <HAL_InitTick+0x88>)
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	0019      	movs	r1, r3
 8004166:	23fa      	movs	r3, #250	@ 0xfa
 8004168:	0098      	lsls	r0, r3, #2
 800416a:	f7fb ffe5 	bl	8000138 <__udivsi3>
 800416e:	0003      	movs	r3, r0
 8004170:	0019      	movs	r1, r3
 8004172:	0020      	movs	r0, r4
 8004174:	f7fb ffe0 	bl	8000138 <__udivsi3>
 8004178:	0003      	movs	r3, r0
 800417a:	0018      	movs	r0, r3
 800417c:	f001 f9b9 	bl	80054f2 <HAL_SYSTICK_Config>
 8004180:	1e03      	subs	r3, r0, #0
 8004182:	d112      	bne.n	80041aa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b03      	cmp	r3, #3
 8004188:	d80a      	bhi.n	80041a0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	2301      	movs	r3, #1
 800418e:	425b      	negs	r3, r3
 8004190:	2200      	movs	r2, #0
 8004192:	0018      	movs	r0, r3
 8004194:	f001 f988 	bl	80054a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004198:	4b0e      	ldr	r3, [pc, #56]	@ (80041d4 <HAL_InitTick+0x90>)
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	e00d      	b.n	80041bc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80041a0:	230f      	movs	r3, #15
 80041a2:	18fb      	adds	r3, r7, r3
 80041a4:	2201      	movs	r2, #1
 80041a6:	701a      	strb	r2, [r3, #0]
 80041a8:	e008      	b.n	80041bc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80041aa:	230f      	movs	r3, #15
 80041ac:	18fb      	adds	r3, r7, r3
 80041ae:	2201      	movs	r2, #1
 80041b0:	701a      	strb	r2, [r3, #0]
 80041b2:	e003      	b.n	80041bc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80041b4:	230f      	movs	r3, #15
 80041b6:	18fb      	adds	r3, r7, r3
 80041b8:	2201      	movs	r2, #1
 80041ba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80041bc:	230f      	movs	r3, #15
 80041be:	18fb      	adds	r3, r7, r3
 80041c0:	781b      	ldrb	r3, [r3, #0]
}
 80041c2:	0018      	movs	r0, r3
 80041c4:	46bd      	mov	sp, r7
 80041c6:	b005      	add	sp, #20
 80041c8:	bd90      	pop	{r4, r7, pc}
 80041ca:	46c0      	nop			@ (mov r8, r8)
 80041cc:	20000008 	.word	0x20000008
 80041d0:	20000000 	.word	0x20000000
 80041d4:	20000004 	.word	0x20000004

080041d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80041dc:	4b05      	ldr	r3, [pc, #20]	@ (80041f4 <HAL_IncTick+0x1c>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	001a      	movs	r2, r3
 80041e2:	4b05      	ldr	r3, [pc, #20]	@ (80041f8 <HAL_IncTick+0x20>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	18d2      	adds	r2, r2, r3
 80041e8:	4b03      	ldr	r3, [pc, #12]	@ (80041f8 <HAL_IncTick+0x20>)
 80041ea:	601a      	str	r2, [r3, #0]
}
 80041ec:	46c0      	nop			@ (mov r8, r8)
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	46c0      	nop			@ (mov r8, r8)
 80041f4:	20000008 	.word	0x20000008
 80041f8:	20000538 	.word	0x20000538

080041fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  return uwTick;
 8004200:	4b02      	ldr	r3, [pc, #8]	@ (800420c <HAL_GetTick+0x10>)
 8004202:	681b      	ldr	r3, [r3, #0]
}
 8004204:	0018      	movs	r0, r3
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	46c0      	nop			@ (mov r8, r8)
 800420c:	20000538 	.word	0x20000538

08004210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004218:	f7ff fff0 	bl	80041fc <HAL_GetTick>
 800421c:	0003      	movs	r3, r0
 800421e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3301      	adds	r3, #1
 8004228:	d005      	beq.n	8004236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800422a:	4b0a      	ldr	r3, [pc, #40]	@ (8004254 <HAL_Delay+0x44>)
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	001a      	movs	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	189b      	adds	r3, r3, r2
 8004234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004236:	46c0      	nop			@ (mov r8, r8)
 8004238:	f7ff ffe0 	bl	80041fc <HAL_GetTick>
 800423c:	0002      	movs	r2, r0
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	429a      	cmp	r2, r3
 8004246:	d8f7      	bhi.n	8004238 <HAL_Delay+0x28>
  {
  }
}
 8004248:	46c0      	nop			@ (mov r8, r8)
 800424a:	46c0      	nop			@ (mov r8, r8)
 800424c:	46bd      	mov	sp, r7
 800424e:	b004      	add	sp, #16
 8004250:	bd80      	pop	{r7, pc}
 8004252:	46c0      	nop			@ (mov r8, r8)
 8004254:	20000008 	.word	0x20000008

08004258 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a05      	ldr	r2, [pc, #20]	@ (800427c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8004268:	401a      	ands	r2, r3
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	431a      	orrs	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	601a      	str	r2, [r3, #0]
}
 8004272:	46c0      	nop			@ (mov r8, r8)
 8004274:	46bd      	mov	sp, r7
 8004276:	b002      	add	sp, #8
 8004278:	bd80      	pop	{r7, pc}
 800427a:	46c0      	nop			@ (mov r8, r8)
 800427c:	fe3fffff 	.word	0xfe3fffff

08004280 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	23e0      	movs	r3, #224	@ 0xe0
 800428e:	045b      	lsls	r3, r3, #17
 8004290:	4013      	ands	r3, r2
}
 8004292:	0018      	movs	r0, r3
 8004294:	46bd      	mov	sp, r7
 8004296:	b002      	add	sp, #8
 8004298:	bd80      	pop	{r7, pc}

0800429a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b084      	sub	sp, #16
 800429e:	af00      	add	r7, sp, #0
 80042a0:	60f8      	str	r0, [r7, #12]
 80042a2:	60b9      	str	r1, [r7, #8]
 80042a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	2104      	movs	r1, #4
 80042ae:	400a      	ands	r2, r1
 80042b0:	2107      	movs	r1, #7
 80042b2:	4091      	lsls	r1, r2
 80042b4:	000a      	movs	r2, r1
 80042b6:	43d2      	mvns	r2, r2
 80042b8:	401a      	ands	r2, r3
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2104      	movs	r1, #4
 80042be:	400b      	ands	r3, r1
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	4099      	lsls	r1, r3
 80042c4:	000b      	movs	r3, r1
 80042c6:	431a      	orrs	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80042cc:	46c0      	nop			@ (mov r8, r8)
 80042ce:	46bd      	mov	sp, r7
 80042d0:	b004      	add	sp, #16
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	2104      	movs	r1, #4
 80042e6:	400a      	ands	r2, r1
 80042e8:	2107      	movs	r1, #7
 80042ea:	4091      	lsls	r1, r2
 80042ec:	000a      	movs	r2, r1
 80042ee:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	2104      	movs	r1, #4
 80042f4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80042f6:	40da      	lsrs	r2, r3
 80042f8:	0013      	movs	r3, r2
}
 80042fa:	0018      	movs	r0, r3
 80042fc:	46bd      	mov	sp, r7
 80042fe:	b002      	add	sp, #8
 8004300:	bd80      	pop	{r7, pc}

08004302 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b082      	sub	sp, #8
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	23c0      	movs	r3, #192	@ 0xc0
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	4013      	ands	r3, r2
 8004314:	d101      	bne.n	800431a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004316:	2301      	movs	r3, #1
 8004318:	e000      	b.n	800431c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800431a:	2300      	movs	r3, #0
}
 800431c:	0018      	movs	r0, r3
 800431e:	46bd      	mov	sp, r7
 8004320:	b002      	add	sp, #8
 8004322:	bd80      	pop	{r7, pc}

08004324 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	211f      	movs	r1, #31
 8004338:	400a      	ands	r2, r1
 800433a:	210f      	movs	r1, #15
 800433c:	4091      	lsls	r1, r2
 800433e:	000a      	movs	r2, r1
 8004340:	43d2      	mvns	r2, r2
 8004342:	401a      	ands	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	0e9b      	lsrs	r3, r3, #26
 8004348:	210f      	movs	r1, #15
 800434a:	4019      	ands	r1, r3
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	201f      	movs	r0, #31
 8004350:	4003      	ands	r3, r0
 8004352:	4099      	lsls	r1, r3
 8004354:	000b      	movs	r3, r1
 8004356:	431a      	orrs	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800435c:	46c0      	nop			@ (mov r8, r8)
 800435e:	46bd      	mov	sp, r7
 8004360:	b004      	add	sp, #16
 8004362:	bd80      	pop	{r7, pc}

08004364 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	035b      	lsls	r3, r3, #13
 8004376:	0b5b      	lsrs	r3, r3, #13
 8004378:	431a      	orrs	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800437e:	46c0      	nop			@ (mov r8, r8)
 8004380:	46bd      	mov	sp, r7
 8004382:	b002      	add	sp, #8
 8004384:	bd80      	pop	{r7, pc}

08004386 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b082      	sub	sp, #8
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
 800438e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	0352      	lsls	r2, r2, #13
 8004398:	0b52      	lsrs	r2, r2, #13
 800439a:	43d2      	mvns	r2, r2
 800439c:	401a      	ands	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80043a2:	46c0      	nop			@ (mov r8, r8)
 80043a4:	46bd      	mov	sp, r7
 80043a6:	b002      	add	sp, #8
 80043a8:	bd80      	pop	{r7, pc}
	...

080043ac <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	0212      	lsls	r2, r2, #8
 80043c0:	43d2      	mvns	r2, r2
 80043c2:	401a      	ands	r2, r3
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	021b      	lsls	r3, r3, #8
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	400b      	ands	r3, r1
 80043cc:	4904      	ldr	r1, [pc, #16]	@ (80043e0 <LL_ADC_SetChannelSamplingTime+0x34>)
 80043ce:	400b      	ands	r3, r1
 80043d0:	431a      	orrs	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80043d6:	46c0      	nop			@ (mov r8, r8)
 80043d8:	46bd      	mov	sp, r7
 80043da:	b004      	add	sp, #16
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	46c0      	nop			@ (mov r8, r8)
 80043e0:	07ffff00 	.word	0x07ffff00

080043e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	4a05      	ldr	r2, [pc, #20]	@ (8004408 <LL_ADC_EnableInternalRegulator+0x24>)
 80043f2:	4013      	ands	r3, r2
 80043f4:	2280      	movs	r2, #128	@ 0x80
 80043f6:	0552      	lsls	r2, r2, #21
 80043f8:	431a      	orrs	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80043fe:	46c0      	nop			@ (mov r8, r8)
 8004400:	46bd      	mov	sp, r7
 8004402:	b002      	add	sp, #8
 8004404:	bd80      	pop	{r7, pc}
 8004406:	46c0      	nop			@ (mov r8, r8)
 8004408:	6fffffe8 	.word	0x6fffffe8

0800440c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	2380      	movs	r3, #128	@ 0x80
 800441a:	055b      	lsls	r3, r3, #21
 800441c:	401a      	ands	r2, r3
 800441e:	2380      	movs	r3, #128	@ 0x80
 8004420:	055b      	lsls	r3, r3, #21
 8004422:	429a      	cmp	r2, r3
 8004424:	d101      	bne.n	800442a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800442a:	2300      	movs	r3, #0
}
 800442c:	0018      	movs	r0, r3
 800442e:	46bd      	mov	sp, r7
 8004430:	b002      	add	sp, #8
 8004432:	bd80      	pop	{r7, pc}

08004434 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	4a04      	ldr	r2, [pc, #16]	@ (8004454 <LL_ADC_Enable+0x20>)
 8004442:	4013      	ands	r3, r2
 8004444:	2201      	movs	r2, #1
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800444c:	46c0      	nop			@ (mov r8, r8)
 800444e:	46bd      	mov	sp, r7
 8004450:	b002      	add	sp, #8
 8004452:	bd80      	pop	{r7, pc}
 8004454:	7fffffe8 	.word	0x7fffffe8

08004458 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	4a04      	ldr	r2, [pc, #16]	@ (8004478 <LL_ADC_Disable+0x20>)
 8004466:	4013      	ands	r3, r2
 8004468:	2202      	movs	r2, #2
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004470:	46c0      	nop			@ (mov r8, r8)
 8004472:	46bd      	mov	sp, r7
 8004474:	b002      	add	sp, #8
 8004476:	bd80      	pop	{r7, pc}
 8004478:	7fffffe8 	.word	0x7fffffe8

0800447c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	2201      	movs	r2, #1
 800448a:	4013      	ands	r3, r2
 800448c:	2b01      	cmp	r3, #1
 800448e:	d101      	bne.n	8004494 <LL_ADC_IsEnabled+0x18>
 8004490:	2301      	movs	r3, #1
 8004492:	e000      	b.n	8004496 <LL_ADC_IsEnabled+0x1a>
 8004494:	2300      	movs	r3, #0
}
 8004496:	0018      	movs	r0, r3
 8004498:	46bd      	mov	sp, r7
 800449a:	b002      	add	sp, #8
 800449c:	bd80      	pop	{r7, pc}

0800449e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b082      	sub	sp, #8
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	2202      	movs	r2, #2
 80044ac:	4013      	ands	r3, r2
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d101      	bne.n	80044b6 <LL_ADC_IsDisableOngoing+0x18>
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <LL_ADC_IsDisableOngoing+0x1a>
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	0018      	movs	r0, r3
 80044ba:	46bd      	mov	sp, r7
 80044bc:	b002      	add	sp, #8
 80044be:	bd80      	pop	{r7, pc}

080044c0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	4a04      	ldr	r2, [pc, #16]	@ (80044e0 <LL_ADC_REG_StartConversion+0x20>)
 80044ce:	4013      	ands	r3, r2
 80044d0:	2204      	movs	r2, #4
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80044d8:	46c0      	nop			@ (mov r8, r8)
 80044da:	46bd      	mov	sp, r7
 80044dc:	b002      	add	sp, #8
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	7fffffe8 	.word	0x7fffffe8

080044e4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	2204      	movs	r2, #4
 80044f2:	4013      	ands	r3, r2
 80044f4:	2b04      	cmp	r3, #4
 80044f6:	d101      	bne.n	80044fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	0018      	movs	r0, r3
 8004500:	46bd      	mov	sp, r7
 8004502:	b002      	add	sp, #8
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b088      	sub	sp, #32
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004510:	231f      	movs	r3, #31
 8004512:	18fb      	adds	r3, r7, r3
 8004514:	2200      	movs	r2, #0
 8004516:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8004518:	2300      	movs	r3, #0
 800451a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800451c:	2300      	movs	r3, #0
 800451e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004520:	2300      	movs	r3, #0
 8004522:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e17f      	b.n	800482e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10a      	bne.n	800454c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	0018      	movs	r0, r3
 800453a:	f7ff fb23 	bl	8003b84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2254      	movs	r2, #84	@ 0x54
 8004548:	2100      	movs	r1, #0
 800454a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	0018      	movs	r0, r3
 8004552:	f7ff ff5b 	bl	800440c <LL_ADC_IsInternalRegulatorEnabled>
 8004556:	1e03      	subs	r3, r0, #0
 8004558:	d115      	bne.n	8004586 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	0018      	movs	r0, r3
 8004560:	f7ff ff40 	bl	80043e4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004564:	4bb4      	ldr	r3, [pc, #720]	@ (8004838 <HAL_ADC_Init+0x330>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	49b4      	ldr	r1, [pc, #720]	@ (800483c <HAL_ADC_Init+0x334>)
 800456a:	0018      	movs	r0, r3
 800456c:	f7fb fde4 	bl	8000138 <__udivsi3>
 8004570:	0003      	movs	r3, r0
 8004572:	3301      	adds	r3, #1
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004578:	e002      	b.n	8004580 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	3b01      	subs	r3, #1
 800457e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f9      	bne.n	800457a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	0018      	movs	r0, r3
 800458c:	f7ff ff3e 	bl	800440c <LL_ADC_IsInternalRegulatorEnabled>
 8004590:	1e03      	subs	r3, r0, #0
 8004592:	d10f      	bne.n	80045b4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004598:	2210      	movs	r2, #16
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045a4:	2201      	movs	r2, #1
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80045ac:	231f      	movs	r3, #31
 80045ae:	18fb      	adds	r3, r7, r3
 80045b0:	2201      	movs	r2, #1
 80045b2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	0018      	movs	r0, r3
 80045ba:	f7ff ff93 	bl	80044e4 <LL_ADC_REG_IsConversionOngoing>
 80045be:	0003      	movs	r3, r0
 80045c0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045c6:	2210      	movs	r2, #16
 80045c8:	4013      	ands	r3, r2
 80045ca:	d000      	beq.n	80045ce <HAL_ADC_Init+0xc6>
 80045cc:	e122      	b.n	8004814 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d000      	beq.n	80045d6 <HAL_ADC_Init+0xce>
 80045d4:	e11e      	b.n	8004814 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045da:	4a99      	ldr	r2, [pc, #612]	@ (8004840 <HAL_ADC_Init+0x338>)
 80045dc:	4013      	ands	r3, r2
 80045de:	2202      	movs	r2, #2
 80045e0:	431a      	orrs	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	0018      	movs	r0, r3
 80045ec:	f7ff ff46 	bl	800447c <LL_ADC_IsEnabled>
 80045f0:	1e03      	subs	r3, r0, #0
 80045f2:	d000      	beq.n	80045f6 <HAL_ADC_Init+0xee>
 80045f4:	e0ad      	b.n	8004752 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	7e1b      	ldrb	r3, [r3, #24]
 80045fe:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8004600:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	7e5b      	ldrb	r3, [r3, #25]
 8004606:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004608:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	7e9b      	ldrb	r3, [r3, #26]
 800460e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004610:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <HAL_ADC_Init+0x118>
 800461a:	2380      	movs	r3, #128	@ 0x80
 800461c:	015b      	lsls	r3, r3, #5
 800461e:	e000      	b.n	8004622 <HAL_ADC_Init+0x11a>
 8004620:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004622:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004628:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	da04      	bge.n	800463c <HAL_ADC_Init+0x134>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	085b      	lsrs	r3, r3, #1
 800463a:	e001      	b.n	8004640 <HAL_ADC_Init+0x138>
 800463c:	2380      	movs	r3, #128	@ 0x80
 800463e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8004640:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	212c      	movs	r1, #44	@ 0x2c
 8004646:	5c5b      	ldrb	r3, [r3, r1]
 8004648:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800464a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	4313      	orrs	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2220      	movs	r2, #32
 8004656:	5c9b      	ldrb	r3, [r3, r2]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d115      	bne.n	8004688 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	7e9b      	ldrb	r3, [r3, #26]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d105      	bne.n	8004670 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	2280      	movs	r2, #128	@ 0x80
 8004668:	0252      	lsls	r2, r2, #9
 800466a:	4313      	orrs	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	e00b      	b.n	8004688 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004674:	2220      	movs	r2, #32
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004680:	2201      	movs	r2, #1
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00a      	beq.n	80046a6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004694:	23e0      	movs	r3, #224	@ 0xe0
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800469e:	4313      	orrs	r3, r2
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	4a65      	ldr	r2, [pc, #404]	@ (8004844 <HAL_ADC_Init+0x33c>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	0019      	movs	r1, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	0f9b      	lsrs	r3, r3, #30
 80046c2:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80046c8:	4313      	orrs	r3, r2
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	223c      	movs	r2, #60	@ 0x3c
 80046d4:	5c9b      	ldrb	r3, [r3, r2]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d111      	bne.n	80046fe <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	0f9b      	lsrs	r3, r3, #30
 80046e0:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80046e6:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80046ec:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80046f2:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	2201      	movs	r2, #1
 80046fa:	4313      	orrs	r3, r2
 80046fc:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	4a50      	ldr	r2, [pc, #320]	@ (8004848 <HAL_ADC_Init+0x340>)
 8004706:	4013      	ands	r3, r2
 8004708:	0019      	movs	r1, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	430a      	orrs	r2, r1
 8004712:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	23c0      	movs	r3, #192	@ 0xc0
 800471a:	061b      	lsls	r3, r3, #24
 800471c:	429a      	cmp	r2, r3
 800471e:	d018      	beq.n	8004752 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004724:	2380      	movs	r3, #128	@ 0x80
 8004726:	05db      	lsls	r3, r3, #23
 8004728:	429a      	cmp	r2, r3
 800472a:	d012      	beq.n	8004752 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004730:	2380      	movs	r3, #128	@ 0x80
 8004732:	061b      	lsls	r3, r3, #24
 8004734:	429a      	cmp	r2, r3
 8004736:	d00c      	beq.n	8004752 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004738:	4b44      	ldr	r3, [pc, #272]	@ (800484c <HAL_ADC_Init+0x344>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a44      	ldr	r2, [pc, #272]	@ (8004850 <HAL_ADC_Init+0x348>)
 800473e:	4013      	ands	r3, r2
 8004740:	0019      	movs	r1, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	23f0      	movs	r3, #240	@ 0xf0
 8004748:	039b      	lsls	r3, r3, #14
 800474a:	401a      	ands	r2, r3
 800474c:	4b3f      	ldr	r3, [pc, #252]	@ (800484c <HAL_ADC_Init+0x344>)
 800474e:	430a      	orrs	r2, r1
 8004750:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800475a:	001a      	movs	r2, r3
 800475c:	2100      	movs	r1, #0
 800475e:	f7ff fd9c 	bl	800429a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6818      	ldr	r0, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800476a:	493a      	ldr	r1, [pc, #232]	@ (8004854 <HAL_ADC_Init+0x34c>)
 800476c:	001a      	movs	r2, r3
 800476e:	f7ff fd94 	bl	800429a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d109      	bne.n	800478e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2110      	movs	r1, #16
 8004786:	4249      	negs	r1, r1
 8004788:	430a      	orrs	r2, r1
 800478a:	629a      	str	r2, [r3, #40]	@ 0x28
 800478c:	e018      	b.n	80047c0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691a      	ldr	r2, [r3, #16]
 8004792:	2380      	movs	r3, #128	@ 0x80
 8004794:	039b      	lsls	r3, r3, #14
 8004796:	429a      	cmp	r2, r3
 8004798:	d112      	bne.n	80047c0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	3b01      	subs	r3, #1
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	221c      	movs	r2, #28
 80047aa:	4013      	ands	r3, r2
 80047ac:	2210      	movs	r2, #16
 80047ae:	4252      	negs	r2, r2
 80047b0:	409a      	lsls	r2, r3
 80047b2:	0011      	movs	r1, r2
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2100      	movs	r1, #0
 80047c6:	0018      	movs	r0, r3
 80047c8:	f7ff fd84 	bl	80042d4 <LL_ADC_GetSamplingTimeCommonChannels>
 80047cc:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d10b      	bne.n	80047ee <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e0:	2203      	movs	r2, #3
 80047e2:	4393      	bics	r3, r2
 80047e4:	2201      	movs	r2, #1
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80047ec:	e01c      	b.n	8004828 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f2:	2212      	movs	r2, #18
 80047f4:	4393      	bics	r3, r2
 80047f6:	2210      	movs	r2, #16
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004802:	2201      	movs	r2, #1
 8004804:	431a      	orrs	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800480a:	231f      	movs	r3, #31
 800480c:	18fb      	adds	r3, r7, r3
 800480e:	2201      	movs	r2, #1
 8004810:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004812:	e009      	b.n	8004828 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004818:	2210      	movs	r2, #16
 800481a:	431a      	orrs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004820:	231f      	movs	r3, #31
 8004822:	18fb      	adds	r3, r7, r3
 8004824:	2201      	movs	r2, #1
 8004826:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004828:	231f      	movs	r3, #31
 800482a:	18fb      	adds	r3, r7, r3
 800482c:	781b      	ldrb	r3, [r3, #0]
}
 800482e:	0018      	movs	r0, r3
 8004830:	46bd      	mov	sp, r7
 8004832:	b008      	add	sp, #32
 8004834:	bd80      	pop	{r7, pc}
 8004836:	46c0      	nop			@ (mov r8, r8)
 8004838:	20000000 	.word	0x20000000
 800483c:	00030d40 	.word	0x00030d40
 8004840:	fffffefd 	.word	0xfffffefd
 8004844:	ffde0201 	.word	0xffde0201
 8004848:	1ffffc02 	.word	0x1ffffc02
 800484c:	40012708 	.word	0x40012708
 8004850:	ffc3ffff 	.word	0xffc3ffff
 8004854:	07ffff04 	.word	0x07ffff04

08004858 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004858:	b5b0      	push	{r4, r5, r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	0018      	movs	r0, r3
 800486a:	f7ff fe3b 	bl	80044e4 <LL_ADC_REG_IsConversionOngoing>
 800486e:	1e03      	subs	r3, r0, #0
 8004870:	d16c      	bne.n	800494c <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2254      	movs	r2, #84	@ 0x54
 8004876:	5c9b      	ldrb	r3, [r3, r2]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <HAL_ADC_Start_DMA+0x28>
 800487c:	2302      	movs	r3, #2
 800487e:	e06c      	b.n	800495a <HAL_ADC_Start_DMA+0x102>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2254      	movs	r2, #84	@ 0x54
 8004884:	2101      	movs	r1, #1
 8004886:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	2201      	movs	r2, #1
 8004890:	4013      	ands	r3, r2
 8004892:	d113      	bne.n	80048bc <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	0018      	movs	r0, r3
 800489a:	f7ff fdef 	bl	800447c <LL_ADC_IsEnabled>
 800489e:	1e03      	subs	r3, r0, #0
 80048a0:	d004      	beq.n	80048ac <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	0018      	movs	r0, r3
 80048a8:	f7ff fdd6 	bl	8004458 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2101      	movs	r1, #1
 80048b8:	430a      	orrs	r2, r1
 80048ba:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80048bc:	2517      	movs	r5, #23
 80048be:	197c      	adds	r4, r7, r5
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	0018      	movs	r0, r3
 80048c4:	f000 fa3e 	bl	8004d44 <ADC_Enable>
 80048c8:	0003      	movs	r3, r0
 80048ca:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80048cc:	002c      	movs	r4, r5
 80048ce:	193b      	adds	r3, r7, r4
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d13e      	bne.n	8004954 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048da:	4a22      	ldr	r2, [pc, #136]	@ (8004964 <HAL_ADC_Start_DMA+0x10c>)
 80048dc:	4013      	ands	r3, r2
 80048de:	2280      	movs	r2, #128	@ 0x80
 80048e0:	0052      	lsls	r2, r2, #1
 80048e2:	431a      	orrs	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048f2:	4a1d      	ldr	r2, [pc, #116]	@ (8004968 <HAL_ADC_Start_DMA+0x110>)
 80048f4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048fa:	4a1c      	ldr	r2, [pc, #112]	@ (800496c <HAL_ADC_Start_DMA+0x114>)
 80048fc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004902:	4a1b      	ldr	r2, [pc, #108]	@ (8004970 <HAL_ADC_Start_DMA+0x118>)
 8004904:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	221c      	movs	r2, #28
 800490c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2254      	movs	r2, #84	@ 0x54
 8004912:	2100      	movs	r1, #0
 8004914:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2110      	movs	r1, #16
 8004922:	430a      	orrs	r2, r1
 8004924:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3340      	adds	r3, #64	@ 0x40
 8004930:	0019      	movs	r1, r3
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	193c      	adds	r4, r7, r4
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f000 fe72 	bl	8005620 <HAL_DMA_Start_IT>
 800493c:	0003      	movs	r3, r0
 800493e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	0018      	movs	r0, r3
 8004946:	f7ff fdbb 	bl	80044c0 <LL_ADC_REG_StartConversion>
 800494a:	e003      	b.n	8004954 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800494c:	2317      	movs	r3, #23
 800494e:	18fb      	adds	r3, r7, r3
 8004950:	2202      	movs	r2, #2
 8004952:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004954:	2317      	movs	r3, #23
 8004956:	18fb      	adds	r3, r7, r3
 8004958:	781b      	ldrb	r3, [r3, #0]
}
 800495a:	0018      	movs	r0, r3
 800495c:	46bd      	mov	sp, r7
 800495e:	b006      	add	sp, #24
 8004960:	bdb0      	pop	{r4, r5, r7, pc}
 8004962:	46c0      	nop			@ (mov r8, r8)
 8004964:	fffff0fe 	.word	0xfffff0fe
 8004968:	08004f0d 	.word	0x08004f0d
 800496c:	08004fd5 	.word	0x08004fd5
 8004970:	08004ff3 	.word	0x08004ff3

08004974 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800497c:	46c0      	nop			@ (mov r8, r8)
 800497e:	46bd      	mov	sp, r7
 8004980:	b002      	add	sp, #8
 8004982:	bd80      	pop	{r7, pc}

08004984 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800498c:	46c0      	nop			@ (mov r8, r8)
 800498e:	46bd      	mov	sp, r7
 8004990:	b002      	add	sp, #8
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800499e:	2317      	movs	r3, #23
 80049a0:	18fb      	adds	r3, r7, r3
 80049a2:	2200      	movs	r2, #0
 80049a4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80049a6:	2300      	movs	r3, #0
 80049a8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2254      	movs	r2, #84	@ 0x54
 80049ae:	5c9b      	ldrb	r3, [r3, r2]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d101      	bne.n	80049b8 <HAL_ADC_ConfigChannel+0x24>
 80049b4:	2302      	movs	r3, #2
 80049b6:	e1c0      	b.n	8004d3a <HAL_ADC_ConfigChannel+0x3a6>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2254      	movs	r2, #84	@ 0x54
 80049bc:	2101      	movs	r1, #1
 80049be:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	0018      	movs	r0, r3
 80049c6:	f7ff fd8d 	bl	80044e4 <LL_ADC_REG_IsConversionOngoing>
 80049ca:	1e03      	subs	r3, r0, #0
 80049cc:	d000      	beq.n	80049d0 <HAL_ADC_ConfigChannel+0x3c>
 80049ce:	e1a3      	b.n	8004d18 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d100      	bne.n	80049da <HAL_ADC_ConfigChannel+0x46>
 80049d8:	e143      	b.n	8004c62 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691a      	ldr	r2, [r3, #16]
 80049de:	2380      	movs	r3, #128	@ 0x80
 80049e0:	061b      	lsls	r3, r3, #24
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d004      	beq.n	80049f0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80049ea:	4ac1      	ldr	r2, [pc, #772]	@ (8004cf0 <HAL_ADC_ConfigChannel+0x35c>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d108      	bne.n	8004a02 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	0019      	movs	r1, r3
 80049fa:	0010      	movs	r0, r2
 80049fc:	f7ff fcb2 	bl	8004364 <LL_ADC_REG_SetSequencerChAdd>
 8004a00:	e0c9      	b.n	8004b96 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	211f      	movs	r1, #31
 8004a0c:	400b      	ands	r3, r1
 8004a0e:	210f      	movs	r1, #15
 8004a10:	4099      	lsls	r1, r3
 8004a12:	000b      	movs	r3, r1
 8004a14:	43db      	mvns	r3, r3
 8004a16:	4013      	ands	r3, r2
 8004a18:	0019      	movs	r1, r3
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	035b      	lsls	r3, r3, #13
 8004a20:	0b5b      	lsrs	r3, r3, #13
 8004a22:	d105      	bne.n	8004a30 <HAL_ADC_ConfigChannel+0x9c>
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	0e9b      	lsrs	r3, r3, #26
 8004a2a:	221f      	movs	r2, #31
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	e098      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x1ce>
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2201      	movs	r2, #1
 8004a36:	4013      	ands	r3, r2
 8004a38:	d000      	beq.n	8004a3c <HAL_ADC_ConfigChannel+0xa8>
 8004a3a:	e091      	b.n	8004b60 <HAL_ADC_ConfigChannel+0x1cc>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2202      	movs	r2, #2
 8004a42:	4013      	ands	r3, r2
 8004a44:	d000      	beq.n	8004a48 <HAL_ADC_ConfigChannel+0xb4>
 8004a46:	e089      	b.n	8004b5c <HAL_ADC_ConfigChannel+0x1c8>
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2204      	movs	r2, #4
 8004a4e:	4013      	ands	r3, r2
 8004a50:	d000      	beq.n	8004a54 <HAL_ADC_ConfigChannel+0xc0>
 8004a52:	e081      	b.n	8004b58 <HAL_ADC_ConfigChannel+0x1c4>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2208      	movs	r2, #8
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	d000      	beq.n	8004a60 <HAL_ADC_ConfigChannel+0xcc>
 8004a5e:	e079      	b.n	8004b54 <HAL_ADC_ConfigChannel+0x1c0>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2210      	movs	r2, #16
 8004a66:	4013      	ands	r3, r2
 8004a68:	d000      	beq.n	8004a6c <HAL_ADC_ConfigChannel+0xd8>
 8004a6a:	e071      	b.n	8004b50 <HAL_ADC_ConfigChannel+0x1bc>
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2220      	movs	r2, #32
 8004a72:	4013      	ands	r3, r2
 8004a74:	d000      	beq.n	8004a78 <HAL_ADC_ConfigChannel+0xe4>
 8004a76:	e069      	b.n	8004b4c <HAL_ADC_ConfigChannel+0x1b8>
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2240      	movs	r2, #64	@ 0x40
 8004a7e:	4013      	ands	r3, r2
 8004a80:	d000      	beq.n	8004a84 <HAL_ADC_ConfigChannel+0xf0>
 8004a82:	e061      	b.n	8004b48 <HAL_ADC_ConfigChannel+0x1b4>
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2280      	movs	r2, #128	@ 0x80
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	d000      	beq.n	8004a90 <HAL_ADC_ConfigChannel+0xfc>
 8004a8e:	e059      	b.n	8004b44 <HAL_ADC_ConfigChannel+0x1b0>
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	2380      	movs	r3, #128	@ 0x80
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	4013      	ands	r3, r2
 8004a9a:	d151      	bne.n	8004b40 <HAL_ADC_ConfigChannel+0x1ac>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	2380      	movs	r3, #128	@ 0x80
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	d149      	bne.n	8004b3c <HAL_ADC_ConfigChannel+0x1a8>
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	2380      	movs	r3, #128	@ 0x80
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	d141      	bne.n	8004b38 <HAL_ADC_ConfigChannel+0x1a4>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	2380      	movs	r3, #128	@ 0x80
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	4013      	ands	r3, r2
 8004abe:	d139      	bne.n	8004b34 <HAL_ADC_ConfigChannel+0x1a0>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	2380      	movs	r3, #128	@ 0x80
 8004ac6:	015b      	lsls	r3, r3, #5
 8004ac8:	4013      	ands	r3, r2
 8004aca:	d131      	bne.n	8004b30 <HAL_ADC_ConfigChannel+0x19c>
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	2380      	movs	r3, #128	@ 0x80
 8004ad2:	019b      	lsls	r3, r3, #6
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	d129      	bne.n	8004b2c <HAL_ADC_ConfigChannel+0x198>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	2380      	movs	r3, #128	@ 0x80
 8004ade:	01db      	lsls	r3, r3, #7
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	d121      	bne.n	8004b28 <HAL_ADC_ConfigChannel+0x194>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	2380      	movs	r3, #128	@ 0x80
 8004aea:	021b      	lsls	r3, r3, #8
 8004aec:	4013      	ands	r3, r2
 8004aee:	d119      	bne.n	8004b24 <HAL_ADC_ConfigChannel+0x190>
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	2380      	movs	r3, #128	@ 0x80
 8004af6:	025b      	lsls	r3, r3, #9
 8004af8:	4013      	ands	r3, r2
 8004afa:	d111      	bne.n	8004b20 <HAL_ADC_ConfigChannel+0x18c>
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	2380      	movs	r3, #128	@ 0x80
 8004b02:	029b      	lsls	r3, r3, #10
 8004b04:	4013      	ands	r3, r2
 8004b06:	d109      	bne.n	8004b1c <HAL_ADC_ConfigChannel+0x188>
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	2380      	movs	r3, #128	@ 0x80
 8004b0e:	02db      	lsls	r3, r3, #11
 8004b10:	4013      	ands	r3, r2
 8004b12:	d001      	beq.n	8004b18 <HAL_ADC_ConfigChannel+0x184>
 8004b14:	2312      	movs	r3, #18
 8004b16:	e024      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x1ce>
 8004b18:	2300      	movs	r3, #0
 8004b1a:	e022      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x1ce>
 8004b1c:	2311      	movs	r3, #17
 8004b1e:	e020      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x1ce>
 8004b20:	2310      	movs	r3, #16
 8004b22:	e01e      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x1ce>
 8004b24:	230f      	movs	r3, #15
 8004b26:	e01c      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x1ce>
 8004b28:	230e      	movs	r3, #14
 8004b2a:	e01a      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x1ce>
 8004b2c:	230d      	movs	r3, #13
 8004b2e:	e018      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x1ce>
 8004b30:	230c      	movs	r3, #12
 8004b32:	e016      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x1ce>
 8004b34:	230b      	movs	r3, #11
 8004b36:	e014      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x1ce>
 8004b38:	230a      	movs	r3, #10
 8004b3a:	e012      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x1ce>
 8004b3c:	2309      	movs	r3, #9
 8004b3e:	e010      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x1ce>
 8004b40:	2308      	movs	r3, #8
 8004b42:	e00e      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x1ce>
 8004b44:	2307      	movs	r3, #7
 8004b46:	e00c      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x1ce>
 8004b48:	2306      	movs	r3, #6
 8004b4a:	e00a      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x1ce>
 8004b4c:	2305      	movs	r3, #5
 8004b4e:	e008      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x1ce>
 8004b50:	2304      	movs	r3, #4
 8004b52:	e006      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x1ce>
 8004b54:	2303      	movs	r3, #3
 8004b56:	e004      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x1ce>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e002      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x1ce>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e000      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x1ce>
 8004b60:	2300      	movs	r3, #0
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	6852      	ldr	r2, [r2, #4]
 8004b66:	201f      	movs	r0, #31
 8004b68:	4002      	ands	r2, r0
 8004b6a:	4093      	lsls	r3, r2
 8004b6c:	000a      	movs	r2, r1
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	089b      	lsrs	r3, r3, #2
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d808      	bhi.n	8004b96 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6818      	ldr	r0, [r3, #0]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	6859      	ldr	r1, [r3, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	001a      	movs	r2, r3
 8004b92:	f7ff fbc7 	bl	8004324 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6818      	ldr	r0, [r3, #0]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	6819      	ldr	r1, [r3, #0]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	001a      	movs	r2, r3
 8004ba4:	f7ff fc02 	bl	80043ac <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	db00      	blt.n	8004bb2 <HAL_ADC_ConfigChannel+0x21e>
 8004bb0:	e0bc      	b.n	8004d2c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004bb2:	4b50      	ldr	r3, [pc, #320]	@ (8004cf4 <HAL_ADC_ConfigChannel+0x360>)
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	f7ff fb63 	bl	8004280 <LL_ADC_GetCommonPathInternalCh>
 8004bba:	0003      	movs	r3, r0
 8004bbc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a4d      	ldr	r2, [pc, #308]	@ (8004cf8 <HAL_ADC_ConfigChannel+0x364>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d122      	bne.n	8004c0e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	2380      	movs	r3, #128	@ 0x80
 8004bcc:	041b      	lsls	r3, r3, #16
 8004bce:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004bd0:	d11d      	bne.n	8004c0e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	2280      	movs	r2, #128	@ 0x80
 8004bd6:	0412      	lsls	r2, r2, #16
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	4a46      	ldr	r2, [pc, #280]	@ (8004cf4 <HAL_ADC_ConfigChannel+0x360>)
 8004bdc:	0019      	movs	r1, r3
 8004bde:	0010      	movs	r0, r2
 8004be0:	f7ff fb3a 	bl	8004258 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004be4:	4b45      	ldr	r3, [pc, #276]	@ (8004cfc <HAL_ADC_ConfigChannel+0x368>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4945      	ldr	r1, [pc, #276]	@ (8004d00 <HAL_ADC_ConfigChannel+0x36c>)
 8004bea:	0018      	movs	r0, r3
 8004bec:	f7fb faa4 	bl	8000138 <__udivsi3>
 8004bf0:	0003      	movs	r3, r0
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	0013      	movs	r3, r2
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	189b      	adds	r3, r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004bfe:	e002      	b.n	8004c06 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1f9      	bne.n	8004c00 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004c0c:	e08e      	b.n	8004d2c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a3c      	ldr	r2, [pc, #240]	@ (8004d04 <HAL_ADC_ConfigChannel+0x370>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d10e      	bne.n	8004c36 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	2380      	movs	r3, #128	@ 0x80
 8004c1c:	045b      	lsls	r3, r3, #17
 8004c1e:	4013      	ands	r3, r2
 8004c20:	d109      	bne.n	8004c36 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	2280      	movs	r2, #128	@ 0x80
 8004c26:	0452      	lsls	r2, r2, #17
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	4a32      	ldr	r2, [pc, #200]	@ (8004cf4 <HAL_ADC_ConfigChannel+0x360>)
 8004c2c:	0019      	movs	r1, r3
 8004c2e:	0010      	movs	r0, r2
 8004c30:	f7ff fb12 	bl	8004258 <LL_ADC_SetCommonPathInternalCh>
 8004c34:	e07a      	b.n	8004d2c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a33      	ldr	r2, [pc, #204]	@ (8004d08 <HAL_ADC_ConfigChannel+0x374>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d000      	beq.n	8004c42 <HAL_ADC_ConfigChannel+0x2ae>
 8004c40:	e074      	b.n	8004d2c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	2380      	movs	r3, #128	@ 0x80
 8004c46:	03db      	lsls	r3, r3, #15
 8004c48:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004c4a:	d000      	beq.n	8004c4e <HAL_ADC_ConfigChannel+0x2ba>
 8004c4c:	e06e      	b.n	8004d2c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	2280      	movs	r2, #128	@ 0x80
 8004c52:	03d2      	lsls	r2, r2, #15
 8004c54:	4313      	orrs	r3, r2
 8004c56:	4a27      	ldr	r2, [pc, #156]	@ (8004cf4 <HAL_ADC_ConfigChannel+0x360>)
 8004c58:	0019      	movs	r1, r3
 8004c5a:	0010      	movs	r0, r2
 8004c5c:	f7ff fafc 	bl	8004258 <LL_ADC_SetCommonPathInternalCh>
 8004c60:	e064      	b.n	8004d2c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691a      	ldr	r2, [r3, #16]
 8004c66:	2380      	movs	r3, #128	@ 0x80
 8004c68:	061b      	lsls	r3, r3, #24
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d004      	beq.n	8004c78 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004c72:	4a1f      	ldr	r2, [pc, #124]	@ (8004cf0 <HAL_ADC_ConfigChannel+0x35c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d107      	bne.n	8004c88 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	0019      	movs	r1, r3
 8004c82:	0010      	movs	r0, r2
 8004c84:	f7ff fb7f 	bl	8004386 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	da4d      	bge.n	8004d2c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c90:	4b18      	ldr	r3, [pc, #96]	@ (8004cf4 <HAL_ADC_ConfigChannel+0x360>)
 8004c92:	0018      	movs	r0, r3
 8004c94:	f7ff faf4 	bl	8004280 <LL_ADC_GetCommonPathInternalCh>
 8004c98:	0003      	movs	r3, r0
 8004c9a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a15      	ldr	r2, [pc, #84]	@ (8004cf8 <HAL_ADC_ConfigChannel+0x364>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d108      	bne.n	8004cb8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	4a18      	ldr	r2, [pc, #96]	@ (8004d0c <HAL_ADC_ConfigChannel+0x378>)
 8004caa:	4013      	ands	r3, r2
 8004cac:	4a11      	ldr	r2, [pc, #68]	@ (8004cf4 <HAL_ADC_ConfigChannel+0x360>)
 8004cae:	0019      	movs	r1, r3
 8004cb0:	0010      	movs	r0, r2
 8004cb2:	f7ff fad1 	bl	8004258 <LL_ADC_SetCommonPathInternalCh>
 8004cb6:	e039      	b.n	8004d2c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a11      	ldr	r2, [pc, #68]	@ (8004d04 <HAL_ADC_ConfigChannel+0x370>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d108      	bne.n	8004cd4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	4a12      	ldr	r2, [pc, #72]	@ (8004d10 <HAL_ADC_ConfigChannel+0x37c>)
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	4a0a      	ldr	r2, [pc, #40]	@ (8004cf4 <HAL_ADC_ConfigChannel+0x360>)
 8004cca:	0019      	movs	r1, r3
 8004ccc:	0010      	movs	r0, r2
 8004cce:	f7ff fac3 	bl	8004258 <LL_ADC_SetCommonPathInternalCh>
 8004cd2:	e02b      	b.n	8004d2c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a0b      	ldr	r2, [pc, #44]	@ (8004d08 <HAL_ADC_ConfigChannel+0x374>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d126      	bne.n	8004d2c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	4a0c      	ldr	r2, [pc, #48]	@ (8004d14 <HAL_ADC_ConfigChannel+0x380>)
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	4a03      	ldr	r2, [pc, #12]	@ (8004cf4 <HAL_ADC_ConfigChannel+0x360>)
 8004ce6:	0019      	movs	r1, r3
 8004ce8:	0010      	movs	r0, r2
 8004cea:	f7ff fab5 	bl	8004258 <LL_ADC_SetCommonPathInternalCh>
 8004cee:	e01d      	b.n	8004d2c <HAL_ADC_ConfigChannel+0x398>
 8004cf0:	80000004 	.word	0x80000004
 8004cf4:	40012708 	.word	0x40012708
 8004cf8:	b0001000 	.word	0xb0001000
 8004cfc:	20000000 	.word	0x20000000
 8004d00:	00030d40 	.word	0x00030d40
 8004d04:	b8004000 	.word	0xb8004000
 8004d08:	b4002000 	.word	0xb4002000
 8004d0c:	ff7fffff 	.word	0xff7fffff
 8004d10:	feffffff 	.word	0xfeffffff
 8004d14:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004d24:	2317      	movs	r3, #23
 8004d26:	18fb      	adds	r3, r7, r3
 8004d28:	2201      	movs	r2, #1
 8004d2a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2254      	movs	r2, #84	@ 0x54
 8004d30:	2100      	movs	r1, #0
 8004d32:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004d34:	2317      	movs	r3, #23
 8004d36:	18fb      	adds	r3, r7, r3
 8004d38:	781b      	ldrb	r3, [r3, #0]
}
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	b006      	add	sp, #24
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	46c0      	nop			@ (mov r8, r8)

08004d44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	0018      	movs	r0, r3
 8004d56:	f7ff fb91 	bl	800447c <LL_ADC_IsEnabled>
 8004d5a:	1e03      	subs	r3, r0, #0
 8004d5c:	d000      	beq.n	8004d60 <ADC_Enable+0x1c>
 8004d5e:	e069      	b.n	8004e34 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	4a36      	ldr	r2, [pc, #216]	@ (8004e40 <ADC_Enable+0xfc>)
 8004d68:	4013      	ands	r3, r2
 8004d6a:	d00d      	beq.n	8004d88 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d70:	2210      	movs	r2, #16
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e056      	b.n	8004e36 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	f7ff fb51 	bl	8004434 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8004d92:	4b2c      	ldr	r3, [pc, #176]	@ (8004e44 <ADC_Enable+0x100>)
 8004d94:	0018      	movs	r0, r3
 8004d96:	f7ff fa73 	bl	8004280 <LL_ADC_GetCommonPathInternalCh>
 8004d9a:	0002      	movs	r2, r0
 8004d9c:	2380      	movs	r3, #128	@ 0x80
 8004d9e:	041b      	lsls	r3, r3, #16
 8004da0:	4013      	ands	r3, r2
 8004da2:	d00f      	beq.n	8004dc4 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004da4:	4b28      	ldr	r3, [pc, #160]	@ (8004e48 <ADC_Enable+0x104>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4928      	ldr	r1, [pc, #160]	@ (8004e4c <ADC_Enable+0x108>)
 8004daa:	0018      	movs	r0, r3
 8004dac:	f7fb f9c4 	bl	8000138 <__udivsi3>
 8004db0:	0003      	movs	r3, r0
 8004db2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8004db4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004db6:	e002      	b.n	8004dbe <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1f9      	bne.n	8004db8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	7e5b      	ldrb	r3, [r3, #25]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d033      	beq.n	8004e34 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004dcc:	f7ff fa16 	bl	80041fc <HAL_GetTick>
 8004dd0:	0003      	movs	r3, r0
 8004dd2:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004dd4:	e027      	b.n	8004e26 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	0018      	movs	r0, r3
 8004ddc:	f7ff fb4e 	bl	800447c <LL_ADC_IsEnabled>
 8004de0:	1e03      	subs	r3, r0, #0
 8004de2:	d104      	bne.n	8004dee <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	0018      	movs	r0, r3
 8004dea:	f7ff fb23 	bl	8004434 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004dee:	f7ff fa05 	bl	80041fc <HAL_GetTick>
 8004df2:	0002      	movs	r2, r0
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d914      	bls.n	8004e26 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2201      	movs	r2, #1
 8004e04:	4013      	ands	r3, r2
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d00d      	beq.n	8004e26 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e0e:	2210      	movs	r2, #16
 8004e10:	431a      	orrs	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e007      	b.n	8004e36 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	4013      	ands	r3, r2
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d1d0      	bne.n	8004dd6 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	0018      	movs	r0, r3
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	b004      	add	sp, #16
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	46c0      	nop			@ (mov r8, r8)
 8004e40:	80000017 	.word	0x80000017
 8004e44:	40012708 	.word	0x40012708
 8004e48:	20000000 	.word	0x20000000
 8004e4c:	00030d40 	.word	0x00030d40

08004e50 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f7ff fb1e 	bl	800449e <LL_ADC_IsDisableOngoing>
 8004e62:	0003      	movs	r3, r0
 8004e64:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	0018      	movs	r0, r3
 8004e6c:	f7ff fb06 	bl	800447c <LL_ADC_IsEnabled>
 8004e70:	1e03      	subs	r3, r0, #0
 8004e72:	d046      	beq.n	8004f02 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d143      	bne.n	8004f02 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	2205      	movs	r2, #5
 8004e82:	4013      	ands	r3, r2
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d10d      	bne.n	8004ea4 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	f7ff fae3 	bl	8004458 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2203      	movs	r2, #3
 8004e98:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e9a:	f7ff f9af 	bl	80041fc <HAL_GetTick>
 8004e9e:	0003      	movs	r3, r0
 8004ea0:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ea2:	e028      	b.n	8004ef6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ea8:	2210      	movs	r2, #16
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e021      	b.n	8004f04 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004ec0:	f7ff f99c 	bl	80041fc <HAL_GetTick>
 8004ec4:	0002      	movs	r2, r0
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d913      	bls.n	8004ef6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	d00d      	beq.n	8004ef6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ede:	2210      	movs	r2, #16
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eea:	2201      	movs	r2, #1
 8004eec:	431a      	orrs	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e006      	b.n	8004f04 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	2201      	movs	r2, #1
 8004efe:	4013      	ands	r3, r2
 8004f00:	d1de      	bne.n	8004ec0 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	0018      	movs	r0, r3
 8004f06:	46bd      	mov	sp, r7
 8004f08:	b004      	add	sp, #16
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f18:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f1e:	2250      	movs	r2, #80	@ 0x50
 8004f20:	4013      	ands	r3, r2
 8004f22:	d141      	bne.n	8004fa8 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f28:	2280      	movs	r2, #128	@ 0x80
 8004f2a:	0092      	lsls	r2, r2, #2
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	0018      	movs	r0, r3
 8004f38:	f7ff f9e3 	bl	8004302 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f3c:	1e03      	subs	r3, r0, #0
 8004f3e:	d02e      	beq.n	8004f9e <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	7e9b      	ldrb	r3, [r3, #26]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d12a      	bne.n	8004f9e <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2208      	movs	r2, #8
 8004f50:	4013      	ands	r3, r2
 8004f52:	2b08      	cmp	r3, #8
 8004f54:	d123      	bne.n	8004f9e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	f7ff fac2 	bl	80044e4 <LL_ADC_REG_IsConversionOngoing>
 8004f60:	1e03      	subs	r3, r0, #0
 8004f62:	d110      	bne.n	8004f86 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	210c      	movs	r1, #12
 8004f70:	438a      	bics	r2, r1
 8004f72:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f78:	4a15      	ldr	r2, [pc, #84]	@ (8004fd0 <ADC_DMAConvCplt+0xc4>)
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	659a      	str	r2, [r3, #88]	@ 0x58
 8004f84:	e00b      	b.n	8004f9e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f96:	2201      	movs	r2, #1
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	0018      	movs	r0, r3
 8004fa2:	f7fe fda5 	bl	8003af0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004fa6:	e00f      	b.n	8004fc8 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fac:	2210      	movs	r2, #16
 8004fae:	4013      	ands	r3, r2
 8004fb0:	d004      	beq.n	8004fbc <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	f7ff fce5 	bl	8004984 <HAL_ADC_ErrorCallback>
}
 8004fba:	e005      	b.n	8004fc8 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	0010      	movs	r0, r2
 8004fc6:	4798      	blx	r3
}
 8004fc8:	46c0      	nop			@ (mov r8, r8)
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	b004      	add	sp, #16
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	fffffefe 	.word	0xfffffefe

08004fd4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	f7ff fcc5 	bl	8004974 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004fea:	46c0      	nop			@ (mov r8, r8)
 8004fec:	46bd      	mov	sp, r7
 8004fee:	b004      	add	sp, #16
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b084      	sub	sp, #16
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005004:	2240      	movs	r2, #64	@ 0x40
 8005006:	431a      	orrs	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005010:	2204      	movs	r2, #4
 8005012:	431a      	orrs	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	0018      	movs	r0, r3
 800501c:	f7ff fcb2 	bl	8004984 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005020:	46c0      	nop			@ (mov r8, r8)
 8005022:	46bd      	mov	sp, r7
 8005024:	b004      	add	sp, #16
 8005026:	bd80      	pop	{r7, pc}

08005028 <LL_ADC_GetCommonClock>:
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	23f0      	movs	r3, #240	@ 0xf0
 8005036:	039b      	lsls	r3, r3, #14
 8005038:	4013      	ands	r3, r2
}
 800503a:	0018      	movs	r0, r3
 800503c:	46bd      	mov	sp, r7
 800503e:	b002      	add	sp, #8
 8005040:	bd80      	pop	{r7, pc}

08005042 <LL_ADC_GetClock>:
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b082      	sub	sp, #8
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	0f9b      	lsrs	r3, r3, #30
 8005050:	079b      	lsls	r3, r3, #30
}
 8005052:	0018      	movs	r0, r3
 8005054:	46bd      	mov	sp, r7
 8005056:	b002      	add	sp, #8
 8005058:	bd80      	pop	{r7, pc}

0800505a <LL_ADC_SetCalibrationFactor>:
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b082      	sub	sp, #8
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	22b4      	movs	r2, #180	@ 0xb4
 8005068:	589b      	ldr	r3, [r3, r2]
 800506a:	227f      	movs	r2, #127	@ 0x7f
 800506c:	4393      	bics	r3, r2
 800506e:	001a      	movs	r2, r3
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	21b4      	movs	r1, #180	@ 0xb4
 8005078:	505a      	str	r2, [r3, r1]
}
 800507a:	46c0      	nop			@ (mov r8, r8)
 800507c:	46bd      	mov	sp, r7
 800507e:	b002      	add	sp, #8
 8005080:	bd80      	pop	{r7, pc}

08005082 <LL_ADC_GetCalibrationFactor>:
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b082      	sub	sp, #8
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	22b4      	movs	r2, #180	@ 0xb4
 800508e:	589b      	ldr	r3, [r3, r2]
 8005090:	227f      	movs	r2, #127	@ 0x7f
 8005092:	4013      	ands	r3, r2
}
 8005094:	0018      	movs	r0, r3
 8005096:	46bd      	mov	sp, r7
 8005098:	b002      	add	sp, #8
 800509a:	bd80      	pop	{r7, pc}

0800509c <LL_ADC_Enable>:
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	4a04      	ldr	r2, [pc, #16]	@ (80050bc <LL_ADC_Enable+0x20>)
 80050aa:	4013      	ands	r3, r2
 80050ac:	2201      	movs	r2, #1
 80050ae:	431a      	orrs	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	609a      	str	r2, [r3, #8]
}
 80050b4:	46c0      	nop			@ (mov r8, r8)
 80050b6:	46bd      	mov	sp, r7
 80050b8:	b002      	add	sp, #8
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	7fffffe8 	.word	0x7fffffe8

080050c0 <LL_ADC_Disable>:
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	4a04      	ldr	r2, [pc, #16]	@ (80050e0 <LL_ADC_Disable+0x20>)
 80050ce:	4013      	ands	r3, r2
 80050d0:	2202      	movs	r2, #2
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	609a      	str	r2, [r3, #8]
}
 80050d8:	46c0      	nop			@ (mov r8, r8)
 80050da:	46bd      	mov	sp, r7
 80050dc:	b002      	add	sp, #8
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	7fffffe8 	.word	0x7fffffe8

080050e4 <LL_ADC_IsEnabled>:
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	2201      	movs	r2, #1
 80050f2:	4013      	ands	r3, r2
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d101      	bne.n	80050fc <LL_ADC_IsEnabled+0x18>
 80050f8:	2301      	movs	r3, #1
 80050fa:	e000      	b.n	80050fe <LL_ADC_IsEnabled+0x1a>
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	0018      	movs	r0, r3
 8005100:	46bd      	mov	sp, r7
 8005102:	b002      	add	sp, #8
 8005104:	bd80      	pop	{r7, pc}
	...

08005108 <LL_ADC_StartCalibration>:
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	4a05      	ldr	r2, [pc, #20]	@ (800512c <LL_ADC_StartCalibration+0x24>)
 8005116:	4013      	ands	r3, r2
 8005118:	2280      	movs	r2, #128	@ 0x80
 800511a:	0612      	lsls	r2, r2, #24
 800511c:	431a      	orrs	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	609a      	str	r2, [r3, #8]
}
 8005122:	46c0      	nop			@ (mov r8, r8)
 8005124:	46bd      	mov	sp, r7
 8005126:	b002      	add	sp, #8
 8005128:	bd80      	pop	{r7, pc}
 800512a:	46c0      	nop			@ (mov r8, r8)
 800512c:	7fffffe8 	.word	0x7fffffe8

08005130 <LL_ADC_IsCalibrationOnGoing>:
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	0fdb      	lsrs	r3, r3, #31
 800513e:	07da      	lsls	r2, r3, #31
 8005140:	2380      	movs	r3, #128	@ 0x80
 8005142:	061b      	lsls	r3, r3, #24
 8005144:	429a      	cmp	r2, r3
 8005146:	d101      	bne.n	800514c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005148:	2301      	movs	r3, #1
 800514a:	e000      	b.n	800514e <LL_ADC_IsCalibrationOnGoing+0x1e>
 800514c:	2300      	movs	r3, #0
}
 800514e:	0018      	movs	r0, r3
 8005150:	46bd      	mov	sp, r7
 8005152:	b002      	add	sp, #8
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8005158:	b590      	push	{r4, r7, lr}
 800515a:	b08b      	sub	sp, #44	@ 0x2c
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005160:	2300      	movs	r3, #0
 8005162:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8005164:	2300      	movs	r3, #0
 8005166:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2254      	movs	r2, #84	@ 0x54
 800516c:	5c9b      	ldrb	r3, [r3, r2]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d101      	bne.n	8005176 <HAL_ADCEx_Calibration_Start+0x1e>
 8005172:	2302      	movs	r3, #2
 8005174:	e0dd      	b.n	8005332 <HAL_ADCEx_Calibration_Start+0x1da>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2254      	movs	r2, #84	@ 0x54
 800517a:	2101      	movs	r1, #1
 800517c:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800517e:	231f      	movs	r3, #31
 8005180:	18fc      	adds	r4, r7, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	0018      	movs	r0, r3
 8005186:	f7ff fe63 	bl	8004e50 <ADC_Disable>
 800518a:	0003      	movs	r3, r0
 800518c:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	0018      	movs	r0, r3
 8005194:	f7ff ffa6 	bl	80050e4 <LL_ADC_IsEnabled>
 8005198:	1e03      	subs	r3, r0, #0
 800519a:	d000      	beq.n	800519e <HAL_ADCEx_Calibration_Start+0x46>
 800519c:	e0bc      	b.n	8005318 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051a2:	4a66      	ldr	r2, [pc, #408]	@ (800533c <HAL_ADCEx_Calibration_Start+0x1e4>)
 80051a4:	4013      	ands	r3, r2
 80051a6:	2202      	movs	r2, #2
 80051a8:	431a      	orrs	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	4a62      	ldr	r2, [pc, #392]	@ (8005340 <HAL_ADCEx_Calibration_Start+0x1e8>)
 80051b6:	4013      	ands	r3, r2
 80051b8:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68da      	ldr	r2, [r3, #12]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	495f      	ldr	r1, [pc, #380]	@ (8005344 <HAL_ADCEx_Calibration_Start+0x1ec>)
 80051c6:	400a      	ands	r2, r1
 80051c8:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80051ca:	2300      	movs	r3, #0
 80051cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80051ce:	e02d      	b.n	800522c <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	0018      	movs	r0, r3
 80051d6:	f7ff ff97 	bl	8005108 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80051da:	e014      	b.n	8005206 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	3301      	adds	r3, #1
 80051e0:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4a58      	ldr	r2, [pc, #352]	@ (8005348 <HAL_ADCEx_Calibration_Start+0x1f0>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d90d      	bls.n	8005206 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ee:	2212      	movs	r2, #18
 80051f0:	4393      	bics	r3, r2
 80051f2:	2210      	movs	r2, #16
 80051f4:	431a      	orrs	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2254      	movs	r2, #84	@ 0x54
 80051fe:	2100      	movs	r1, #0
 8005200:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e095      	b.n	8005332 <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	0018      	movs	r0, r3
 800520c:	f7ff ff90 	bl	8005130 <LL_ADC_IsCalibrationOnGoing>
 8005210:	1e03      	subs	r3, r0, #0
 8005212:	d1e3      	bne.n	80051dc <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	0018      	movs	r0, r3
 800521a:	f7ff ff32 	bl	8005082 <LL_ADC_GetCalibrationFactor>
 800521e:	0002      	movs	r2, r0
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	189b      	adds	r3, r3, r2
 8005224:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8005226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005228:	3301      	adds	r3, #1
 800522a:	627b      	str	r3, [r7, #36]	@ 0x24
 800522c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522e:	2b07      	cmp	r3, #7
 8005230:	d9ce      	bls.n	80051d0 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8005232:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005234:	6a38      	ldr	r0, [r7, #32]
 8005236:	f7fa ff7f 	bl	8000138 <__udivsi3>
 800523a:	0003      	movs	r3, r0
 800523c:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	0018      	movs	r0, r3
 8005244:	f7ff ff2a 	bl	800509c <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	0018      	movs	r0, r3
 800524e:	f7ff fef8 	bl	8005042 <LL_ADC_GetClock>
 8005252:	1e03      	subs	r3, r0, #0
 8005254:	d11b      	bne.n	800528e <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005256:	4b3d      	ldr	r3, [pc, #244]	@ (800534c <HAL_ADCEx_Calibration_Start+0x1f4>)
 8005258:	0018      	movs	r0, r3
 800525a:	f7ff fee5 	bl	8005028 <LL_ADC_GetCommonClock>
 800525e:	0003      	movs	r3, r0
 8005260:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	23e0      	movs	r3, #224	@ 0xe0
 8005266:	035b      	lsls	r3, r3, #13
 8005268:	429a      	cmp	r2, r3
 800526a:	d310      	bcc.n	800528e <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	0c9b      	lsrs	r3, r3, #18
 8005270:	3b03      	subs	r3, #3
 8005272:	2201      	movs	r2, #1
 8005274:	409a      	lsls	r2, r3
 8005276:	0013      	movs	r3, r2
 8005278:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	085b      	lsrs	r3, r3, #1
 800527e:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8005280:	e002      	b.n	8005288 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	3b01      	subs	r3, #1
 8005286:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1f9      	bne.n	8005282 <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6a3a      	ldr	r2, [r7, #32]
 8005294:	0011      	movs	r1, r2
 8005296:	0018      	movs	r0, r3
 8005298:	f7ff fedf 	bl	800505a <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	0018      	movs	r0, r3
 80052a2:	f7ff ff0d 	bl	80050c0 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80052a6:	f7fe ffa9 	bl	80041fc <HAL_GetTick>
 80052aa:	0003      	movs	r3, r0
 80052ac:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80052ae:	e01b      	b.n	80052e8 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80052b0:	f7fe ffa4 	bl	80041fc <HAL_GetTick>
 80052b4:	0002      	movs	r2, r0
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d914      	bls.n	80052e8 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	0018      	movs	r0, r3
 80052c4:	f7ff ff0e 	bl	80050e4 <LL_ADC_IsEnabled>
 80052c8:	1e03      	subs	r3, r0, #0
 80052ca:	d00d      	beq.n	80052e8 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d0:	2210      	movs	r2, #16
 80052d2:	431a      	orrs	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052dc:	2201      	movs	r2, #1
 80052de:	431a      	orrs	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e024      	b.n	8005332 <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	0018      	movs	r0, r3
 80052ee:	f7ff fef9 	bl	80050e4 <LL_ADC_IsEnabled>
 80052f2:	1e03      	subs	r3, r0, #0
 80052f4:	d1dc      	bne.n	80052b0 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68d9      	ldr	r1, [r3, #12]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	430a      	orrs	r2, r1
 8005304:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800530a:	2203      	movs	r2, #3
 800530c:	4393      	bics	r3, r2
 800530e:	2201      	movs	r2, #1
 8005310:	431a      	orrs	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	659a      	str	r2, [r3, #88]	@ 0x58
 8005316:	e005      	b.n	8005324 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800531c:	2210      	movs	r2, #16
 800531e:	431a      	orrs	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2254      	movs	r2, #84	@ 0x54
 8005328:	2100      	movs	r1, #0
 800532a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800532c:	231f      	movs	r3, #31
 800532e:	18fb      	adds	r3, r7, r3
 8005330:	781b      	ldrb	r3, [r3, #0]
}
 8005332:	0018      	movs	r0, r3
 8005334:	46bd      	mov	sp, r7
 8005336:	b00b      	add	sp, #44	@ 0x2c
 8005338:	bd90      	pop	{r4, r7, pc}
 800533a:	46c0      	nop			@ (mov r8, r8)
 800533c:	fffffefd 	.word	0xfffffefd
 8005340:	00008003 	.word	0x00008003
 8005344:	ffff7ffc 	.word	0xffff7ffc
 8005348:	0002f1ff 	.word	0x0002f1ff
 800534c:	40012708 	.word	0x40012708

08005350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	0002      	movs	r2, r0
 8005358:	1dfb      	adds	r3, r7, #7
 800535a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800535c:	1dfb      	adds	r3, r7, #7
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2b7f      	cmp	r3, #127	@ 0x7f
 8005362:	d809      	bhi.n	8005378 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005364:	1dfb      	adds	r3, r7, #7
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	001a      	movs	r2, r3
 800536a:	231f      	movs	r3, #31
 800536c:	401a      	ands	r2, r3
 800536e:	4b04      	ldr	r3, [pc, #16]	@ (8005380 <__NVIC_EnableIRQ+0x30>)
 8005370:	2101      	movs	r1, #1
 8005372:	4091      	lsls	r1, r2
 8005374:	000a      	movs	r2, r1
 8005376:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8005378:	46c0      	nop			@ (mov r8, r8)
 800537a:	46bd      	mov	sp, r7
 800537c:	b002      	add	sp, #8
 800537e:	bd80      	pop	{r7, pc}
 8005380:	e000e100 	.word	0xe000e100

08005384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005384:	b590      	push	{r4, r7, lr}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	0002      	movs	r2, r0
 800538c:	6039      	str	r1, [r7, #0]
 800538e:	1dfb      	adds	r3, r7, #7
 8005390:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005392:	1dfb      	adds	r3, r7, #7
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	2b7f      	cmp	r3, #127	@ 0x7f
 8005398:	d828      	bhi.n	80053ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800539a:	4a2f      	ldr	r2, [pc, #188]	@ (8005458 <__NVIC_SetPriority+0xd4>)
 800539c:	1dfb      	adds	r3, r7, #7
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	b25b      	sxtb	r3, r3
 80053a2:	089b      	lsrs	r3, r3, #2
 80053a4:	33c0      	adds	r3, #192	@ 0xc0
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	589b      	ldr	r3, [r3, r2]
 80053aa:	1dfa      	adds	r2, r7, #7
 80053ac:	7812      	ldrb	r2, [r2, #0]
 80053ae:	0011      	movs	r1, r2
 80053b0:	2203      	movs	r2, #3
 80053b2:	400a      	ands	r2, r1
 80053b4:	00d2      	lsls	r2, r2, #3
 80053b6:	21ff      	movs	r1, #255	@ 0xff
 80053b8:	4091      	lsls	r1, r2
 80053ba:	000a      	movs	r2, r1
 80053bc:	43d2      	mvns	r2, r2
 80053be:	401a      	ands	r2, r3
 80053c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	019b      	lsls	r3, r3, #6
 80053c6:	22ff      	movs	r2, #255	@ 0xff
 80053c8:	401a      	ands	r2, r3
 80053ca:	1dfb      	adds	r3, r7, #7
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	0018      	movs	r0, r3
 80053d0:	2303      	movs	r3, #3
 80053d2:	4003      	ands	r3, r0
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80053d8:	481f      	ldr	r0, [pc, #124]	@ (8005458 <__NVIC_SetPriority+0xd4>)
 80053da:	1dfb      	adds	r3, r7, #7
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	b25b      	sxtb	r3, r3
 80053e0:	089b      	lsrs	r3, r3, #2
 80053e2:	430a      	orrs	r2, r1
 80053e4:	33c0      	adds	r3, #192	@ 0xc0
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80053ea:	e031      	b.n	8005450 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80053ec:	4a1b      	ldr	r2, [pc, #108]	@ (800545c <__NVIC_SetPriority+0xd8>)
 80053ee:	1dfb      	adds	r3, r7, #7
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	0019      	movs	r1, r3
 80053f4:	230f      	movs	r3, #15
 80053f6:	400b      	ands	r3, r1
 80053f8:	3b08      	subs	r3, #8
 80053fa:	089b      	lsrs	r3, r3, #2
 80053fc:	3306      	adds	r3, #6
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	18d3      	adds	r3, r2, r3
 8005402:	3304      	adds	r3, #4
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	1dfa      	adds	r2, r7, #7
 8005408:	7812      	ldrb	r2, [r2, #0]
 800540a:	0011      	movs	r1, r2
 800540c:	2203      	movs	r2, #3
 800540e:	400a      	ands	r2, r1
 8005410:	00d2      	lsls	r2, r2, #3
 8005412:	21ff      	movs	r1, #255	@ 0xff
 8005414:	4091      	lsls	r1, r2
 8005416:	000a      	movs	r2, r1
 8005418:	43d2      	mvns	r2, r2
 800541a:	401a      	ands	r2, r3
 800541c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	019b      	lsls	r3, r3, #6
 8005422:	22ff      	movs	r2, #255	@ 0xff
 8005424:	401a      	ands	r2, r3
 8005426:	1dfb      	adds	r3, r7, #7
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	0018      	movs	r0, r3
 800542c:	2303      	movs	r3, #3
 800542e:	4003      	ands	r3, r0
 8005430:	00db      	lsls	r3, r3, #3
 8005432:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005434:	4809      	ldr	r0, [pc, #36]	@ (800545c <__NVIC_SetPriority+0xd8>)
 8005436:	1dfb      	adds	r3, r7, #7
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	001c      	movs	r4, r3
 800543c:	230f      	movs	r3, #15
 800543e:	4023      	ands	r3, r4
 8005440:	3b08      	subs	r3, #8
 8005442:	089b      	lsrs	r3, r3, #2
 8005444:	430a      	orrs	r2, r1
 8005446:	3306      	adds	r3, #6
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	18c3      	adds	r3, r0, r3
 800544c:	3304      	adds	r3, #4
 800544e:	601a      	str	r2, [r3, #0]
}
 8005450:	46c0      	nop			@ (mov r8, r8)
 8005452:	46bd      	mov	sp, r7
 8005454:	b003      	add	sp, #12
 8005456:	bd90      	pop	{r4, r7, pc}
 8005458:	e000e100 	.word	0xe000e100
 800545c:	e000ed00 	.word	0xe000ed00

08005460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	1e5a      	subs	r2, r3, #1
 800546c:	2380      	movs	r3, #128	@ 0x80
 800546e:	045b      	lsls	r3, r3, #17
 8005470:	429a      	cmp	r2, r3
 8005472:	d301      	bcc.n	8005478 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005474:	2301      	movs	r3, #1
 8005476:	e010      	b.n	800549a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005478:	4b0a      	ldr	r3, [pc, #40]	@ (80054a4 <SysTick_Config+0x44>)
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	3a01      	subs	r2, #1
 800547e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005480:	2301      	movs	r3, #1
 8005482:	425b      	negs	r3, r3
 8005484:	2103      	movs	r1, #3
 8005486:	0018      	movs	r0, r3
 8005488:	f7ff ff7c 	bl	8005384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800548c:	4b05      	ldr	r3, [pc, #20]	@ (80054a4 <SysTick_Config+0x44>)
 800548e:	2200      	movs	r2, #0
 8005490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005492:	4b04      	ldr	r3, [pc, #16]	@ (80054a4 <SysTick_Config+0x44>)
 8005494:	2207      	movs	r2, #7
 8005496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005498:	2300      	movs	r3, #0
}
 800549a:	0018      	movs	r0, r3
 800549c:	46bd      	mov	sp, r7
 800549e:	b002      	add	sp, #8
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	46c0      	nop			@ (mov r8, r8)
 80054a4:	e000e010 	.word	0xe000e010

080054a8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60b9      	str	r1, [r7, #8]
 80054b0:	607a      	str	r2, [r7, #4]
 80054b2:	210f      	movs	r1, #15
 80054b4:	187b      	adds	r3, r7, r1
 80054b6:	1c02      	adds	r2, r0, #0
 80054b8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	187b      	adds	r3, r7, r1
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	b25b      	sxtb	r3, r3
 80054c2:	0011      	movs	r1, r2
 80054c4:	0018      	movs	r0, r3
 80054c6:	f7ff ff5d 	bl	8005384 <__NVIC_SetPriority>
}
 80054ca:	46c0      	nop			@ (mov r8, r8)
 80054cc:	46bd      	mov	sp, r7
 80054ce:	b004      	add	sp, #16
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b082      	sub	sp, #8
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	0002      	movs	r2, r0
 80054da:	1dfb      	adds	r3, r7, #7
 80054dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054de:	1dfb      	adds	r3, r7, #7
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	b25b      	sxtb	r3, r3
 80054e4:	0018      	movs	r0, r3
 80054e6:	f7ff ff33 	bl	8005350 <__NVIC_EnableIRQ>
}
 80054ea:	46c0      	nop			@ (mov r8, r8)
 80054ec:	46bd      	mov	sp, r7
 80054ee:	b002      	add	sp, #8
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b082      	sub	sp, #8
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	0018      	movs	r0, r3
 80054fe:	f7ff ffaf 	bl	8005460 <SysTick_Config>
 8005502:	0003      	movs	r3, r0
}
 8005504:	0018      	movs	r0, r3
 8005506:	46bd      	mov	sp, r7
 8005508:	b002      	add	sp, #8
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e077      	b.n	800560e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a3d      	ldr	r2, [pc, #244]	@ (8005618 <HAL_DMA_Init+0x10c>)
 8005524:	4694      	mov	ip, r2
 8005526:	4463      	add	r3, ip
 8005528:	2114      	movs	r1, #20
 800552a:	0018      	movs	r0, r3
 800552c:	f7fa fe04 	bl	8000138 <__udivsi3>
 8005530:	0003      	movs	r3, r0
 8005532:	009a      	lsls	r2, r3, #2
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2225      	movs	r2, #37	@ 0x25
 800553c:	2102      	movs	r1, #2
 800553e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4934      	ldr	r1, [pc, #208]	@ (800561c <HAL_DMA_Init+0x110>)
 800554c:	400a      	ands	r2, r1
 800554e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6819      	ldr	r1, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689a      	ldr	r2, [r3, #8]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	431a      	orrs	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	431a      	orrs	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	431a      	orrs	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	431a      	orrs	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	431a      	orrs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	0018      	movs	r0, r3
 800558a:	f000 f9c1 	bl	8005910 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689a      	ldr	r2, [r3, #8]
 8005592:	2380      	movs	r3, #128	@ 0x80
 8005594:	01db      	lsls	r3, r3, #7
 8005596:	429a      	cmp	r2, r3
 8005598:	d102      	bne.n	80055a0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055a8:	213f      	movs	r1, #63	@ 0x3f
 80055aa:	400a      	ands	r2, r1
 80055ac:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80055b6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d011      	beq.n	80055e4 <HAL_DMA_Init+0xd8>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	2b04      	cmp	r3, #4
 80055c6:	d80d      	bhi.n	80055e4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	0018      	movs	r0, r3
 80055cc:	f000 f9cc 	bl	8005968 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055d4:	2200      	movs	r2, #0
 80055d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80055e0:	605a      	str	r2, [r3, #4]
 80055e2:	e008      	b.n	80055f6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2225      	movs	r2, #37	@ 0x25
 8005600:	2101      	movs	r1, #1
 8005602:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2224      	movs	r2, #36	@ 0x24
 8005608:	2100      	movs	r1, #0
 800560a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	0018      	movs	r0, r3
 8005610:	46bd      	mov	sp, r7
 8005612:	b002      	add	sp, #8
 8005614:	bd80      	pop	{r7, pc}
 8005616:	46c0      	nop			@ (mov r8, r8)
 8005618:	bffdfff8 	.word	0xbffdfff8
 800561c:	ffff800f 	.word	0xffff800f

08005620 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
 800562c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800562e:	2317      	movs	r3, #23
 8005630:	18fb      	adds	r3, r7, r3
 8005632:	2200      	movs	r2, #0
 8005634:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2224      	movs	r2, #36	@ 0x24
 800563a:	5c9b      	ldrb	r3, [r3, r2]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d101      	bne.n	8005644 <HAL_DMA_Start_IT+0x24>
 8005640:	2302      	movs	r3, #2
 8005642:	e06f      	b.n	8005724 <HAL_DMA_Start_IT+0x104>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2224      	movs	r2, #36	@ 0x24
 8005648:	2101      	movs	r1, #1
 800564a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2225      	movs	r2, #37	@ 0x25
 8005650:	5c9b      	ldrb	r3, [r3, r2]
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b01      	cmp	r3, #1
 8005656:	d157      	bne.n	8005708 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2225      	movs	r2, #37	@ 0x25
 800565c:	2102      	movs	r1, #2
 800565e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2101      	movs	r1, #1
 8005672:	438a      	bics	r2, r1
 8005674:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	68b9      	ldr	r1, [r7, #8]
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 f907 	bl	8005890 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005686:	2b00      	cmp	r3, #0
 8005688:	d008      	beq.n	800569c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	210e      	movs	r1, #14
 8005696:	430a      	orrs	r2, r1
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	e00f      	b.n	80056bc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2104      	movs	r1, #4
 80056a8:	438a      	bics	r2, r1
 80056aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	210a      	movs	r1, #10
 80056b8:	430a      	orrs	r2, r1
 80056ba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	2380      	movs	r3, #128	@ 0x80
 80056c4:	025b      	lsls	r3, r3, #9
 80056c6:	4013      	ands	r3, r2
 80056c8:	d008      	beq.n	80056dc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056d4:	2180      	movs	r1, #128	@ 0x80
 80056d6:	0049      	lsls	r1, r1, #1
 80056d8:	430a      	orrs	r2, r1
 80056da:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d008      	beq.n	80056f6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056ee:	2180      	movs	r1, #128	@ 0x80
 80056f0:	0049      	lsls	r1, r1, #1
 80056f2:	430a      	orrs	r2, r1
 80056f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2101      	movs	r1, #1
 8005702:	430a      	orrs	r2, r1
 8005704:	601a      	str	r2, [r3, #0]
 8005706:	e00a      	b.n	800571e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2280      	movs	r2, #128	@ 0x80
 800570c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2224      	movs	r2, #36	@ 0x24
 8005712:	2100      	movs	r1, #0
 8005714:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8005716:	2317      	movs	r3, #23
 8005718:	18fb      	adds	r3, r7, r3
 800571a:	2201      	movs	r2, #1
 800571c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800571e:	2317      	movs	r3, #23
 8005720:	18fb      	adds	r3, r7, r3
 8005722:	781b      	ldrb	r3, [r3, #0]
}
 8005724:	0018      	movs	r0, r3
 8005726:	46bd      	mov	sp, r7
 8005728:	b006      	add	sp, #24
 800572a:	bd80      	pop	{r7, pc}

0800572c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8005734:	4b55      	ldr	r3, [pc, #340]	@ (800588c <HAL_DMA_IRQHandler+0x160>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005746:	221c      	movs	r2, #28
 8005748:	4013      	ands	r3, r2
 800574a:	2204      	movs	r2, #4
 800574c:	409a      	lsls	r2, r3
 800574e:	0013      	movs	r3, r2
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	4013      	ands	r3, r2
 8005754:	d027      	beq.n	80057a6 <HAL_DMA_IRQHandler+0x7a>
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	2204      	movs	r2, #4
 800575a:	4013      	ands	r3, r2
 800575c:	d023      	beq.n	80057a6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2220      	movs	r2, #32
 8005766:	4013      	ands	r3, r2
 8005768:	d107      	bne.n	800577a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2104      	movs	r1, #4
 8005776:	438a      	bics	r2, r1
 8005778:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800577a:	4b44      	ldr	r3, [pc, #272]	@ (800588c <HAL_DMA_IRQHandler+0x160>)
 800577c:	6859      	ldr	r1, [r3, #4]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005782:	221c      	movs	r2, #28
 8005784:	4013      	ands	r3, r2
 8005786:	2204      	movs	r2, #4
 8005788:	409a      	lsls	r2, r3
 800578a:	4b40      	ldr	r3, [pc, #256]	@ (800588c <HAL_DMA_IRQHandler+0x160>)
 800578c:	430a      	orrs	r2, r1
 800578e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005794:	2b00      	cmp	r3, #0
 8005796:	d100      	bne.n	800579a <HAL_DMA_IRQHandler+0x6e>
 8005798:	e073      	b.n	8005882 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	0010      	movs	r0, r2
 80057a2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80057a4:	e06d      	b.n	8005882 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057aa:	221c      	movs	r2, #28
 80057ac:	4013      	ands	r3, r2
 80057ae:	2202      	movs	r2, #2
 80057b0:	409a      	lsls	r2, r3
 80057b2:	0013      	movs	r3, r2
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4013      	ands	r3, r2
 80057b8:	d02e      	beq.n	8005818 <HAL_DMA_IRQHandler+0xec>
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	2202      	movs	r2, #2
 80057be:	4013      	ands	r3, r2
 80057c0:	d02a      	beq.n	8005818 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2220      	movs	r2, #32
 80057ca:	4013      	ands	r3, r2
 80057cc:	d10b      	bne.n	80057e6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	210a      	movs	r1, #10
 80057da:	438a      	bics	r2, r1
 80057dc:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2225      	movs	r2, #37	@ 0x25
 80057e2:	2101      	movs	r1, #1
 80057e4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80057e6:	4b29      	ldr	r3, [pc, #164]	@ (800588c <HAL_DMA_IRQHandler+0x160>)
 80057e8:	6859      	ldr	r1, [r3, #4]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ee:	221c      	movs	r2, #28
 80057f0:	4013      	ands	r3, r2
 80057f2:	2202      	movs	r2, #2
 80057f4:	409a      	lsls	r2, r3
 80057f6:	4b25      	ldr	r3, [pc, #148]	@ (800588c <HAL_DMA_IRQHandler+0x160>)
 80057f8:	430a      	orrs	r2, r1
 80057fa:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2224      	movs	r2, #36	@ 0x24
 8005800:	2100      	movs	r1, #0
 8005802:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005808:	2b00      	cmp	r3, #0
 800580a:	d03a      	beq.n	8005882 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	0010      	movs	r0, r2
 8005814:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005816:	e034      	b.n	8005882 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581c:	221c      	movs	r2, #28
 800581e:	4013      	ands	r3, r2
 8005820:	2208      	movs	r2, #8
 8005822:	409a      	lsls	r2, r3
 8005824:	0013      	movs	r3, r2
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4013      	ands	r3, r2
 800582a:	d02b      	beq.n	8005884 <HAL_DMA_IRQHandler+0x158>
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	2208      	movs	r2, #8
 8005830:	4013      	ands	r3, r2
 8005832:	d027      	beq.n	8005884 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	210e      	movs	r1, #14
 8005840:	438a      	bics	r2, r1
 8005842:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005844:	4b11      	ldr	r3, [pc, #68]	@ (800588c <HAL_DMA_IRQHandler+0x160>)
 8005846:	6859      	ldr	r1, [r3, #4]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800584c:	221c      	movs	r2, #28
 800584e:	4013      	ands	r3, r2
 8005850:	2201      	movs	r2, #1
 8005852:	409a      	lsls	r2, r3
 8005854:	4b0d      	ldr	r3, [pc, #52]	@ (800588c <HAL_DMA_IRQHandler+0x160>)
 8005856:	430a      	orrs	r2, r1
 8005858:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2225      	movs	r2, #37	@ 0x25
 8005864:	2101      	movs	r1, #1
 8005866:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2224      	movs	r2, #36	@ 0x24
 800586c:	2100      	movs	r1, #0
 800586e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005874:	2b00      	cmp	r3, #0
 8005876:	d005      	beq.n	8005884 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	0010      	movs	r0, r2
 8005880:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005882:	46c0      	nop			@ (mov r8, r8)
 8005884:	46c0      	nop			@ (mov r8, r8)
}
 8005886:	46bd      	mov	sp, r7
 8005888:	b004      	add	sp, #16
 800588a:	bd80      	pop	{r7, pc}
 800588c:	40020000 	.word	0x40020000

08005890 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80058a6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d004      	beq.n	80058ba <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80058b8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80058ba:	4b14      	ldr	r3, [pc, #80]	@ (800590c <DMA_SetConfig+0x7c>)
 80058bc:	6859      	ldr	r1, [r3, #4]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c2:	221c      	movs	r2, #28
 80058c4:	4013      	ands	r3, r2
 80058c6:	2201      	movs	r2, #1
 80058c8:	409a      	lsls	r2, r3
 80058ca:	4b10      	ldr	r3, [pc, #64]	@ (800590c <DMA_SetConfig+0x7c>)
 80058cc:	430a      	orrs	r2, r1
 80058ce:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	2b10      	cmp	r3, #16
 80058de:	d108      	bne.n	80058f2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80058f0:	e007      	b.n	8005902 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	60da      	str	r2, [r3, #12]
}
 8005902:	46c0      	nop			@ (mov r8, r8)
 8005904:	46bd      	mov	sp, r7
 8005906:	b004      	add	sp, #16
 8005908:	bd80      	pop	{r7, pc}
 800590a:	46c0      	nop			@ (mov r8, r8)
 800590c:	40020000 	.word	0x40020000

08005910 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800591c:	089b      	lsrs	r3, r3, #2
 800591e:	4a10      	ldr	r2, [pc, #64]	@ (8005960 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8005920:	4694      	mov	ip, r2
 8005922:	4463      	add	r3, ip
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	001a      	movs	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	001a      	movs	r2, r3
 8005932:	23ff      	movs	r3, #255	@ 0xff
 8005934:	4013      	ands	r3, r2
 8005936:	3b08      	subs	r3, #8
 8005938:	2114      	movs	r1, #20
 800593a:	0018      	movs	r0, r3
 800593c:	f7fa fbfc 	bl	8000138 <__udivsi3>
 8005940:	0003      	movs	r3, r0
 8005942:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a07      	ldr	r2, [pc, #28]	@ (8005964 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8005948:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	221f      	movs	r2, #31
 800594e:	4013      	ands	r3, r2
 8005950:	2201      	movs	r2, #1
 8005952:	409a      	lsls	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8005958:	46c0      	nop			@ (mov r8, r8)
 800595a:	46bd      	mov	sp, r7
 800595c:	b004      	add	sp, #16
 800595e:	bd80      	pop	{r7, pc}
 8005960:	10008200 	.word	0x10008200
 8005964:	40020880 	.word	0x40020880

08005968 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	223f      	movs	r2, #63	@ 0x3f
 8005976:	4013      	ands	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	4a0a      	ldr	r2, [pc, #40]	@ (80059a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800597e:	4694      	mov	ip, r2
 8005980:	4463      	add	r3, ip
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	001a      	movs	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a07      	ldr	r2, [pc, #28]	@ (80059ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800598e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	3b01      	subs	r3, #1
 8005994:	2203      	movs	r2, #3
 8005996:	4013      	ands	r3, r2
 8005998:	2201      	movs	r2, #1
 800599a:	409a      	lsls	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80059a0:	46c0      	nop			@ (mov r8, r8)
 80059a2:	46bd      	mov	sp, r7
 80059a4:	b004      	add	sp, #16
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	1000823f 	.word	0x1000823f
 80059ac:	40020940 	.word	0x40020940

080059b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80059ba:	2300      	movs	r3, #0
 80059bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059be:	e147      	b.n	8005c50 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2101      	movs	r1, #1
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	4091      	lsls	r1, r2
 80059ca:	000a      	movs	r2, r1
 80059cc:	4013      	ands	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d100      	bne.n	80059d8 <HAL_GPIO_Init+0x28>
 80059d6:	e138      	b.n	8005c4a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	2203      	movs	r2, #3
 80059de:	4013      	ands	r3, r2
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d005      	beq.n	80059f0 <HAL_GPIO_Init+0x40>
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	2203      	movs	r2, #3
 80059ea:	4013      	ands	r3, r2
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d130      	bne.n	8005a52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	2203      	movs	r2, #3
 80059fc:	409a      	lsls	r2, r3
 80059fe:	0013      	movs	r3, r2
 8005a00:	43da      	mvns	r2, r3
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	4013      	ands	r3, r2
 8005a06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	68da      	ldr	r2, [r3, #12]
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	409a      	lsls	r2, r3
 8005a12:	0013      	movs	r3, r2
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a26:	2201      	movs	r2, #1
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	409a      	lsls	r2, r3
 8005a2c:	0013      	movs	r3, r2
 8005a2e:	43da      	mvns	r2, r3
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	4013      	ands	r3, r2
 8005a34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	091b      	lsrs	r3, r3, #4
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	401a      	ands	r2, r3
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	409a      	lsls	r2, r3
 8005a44:	0013      	movs	r3, r2
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2203      	movs	r2, #3
 8005a58:	4013      	ands	r3, r2
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d017      	beq.n	8005a8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	2203      	movs	r2, #3
 8005a6a:	409a      	lsls	r2, r3
 8005a6c:	0013      	movs	r3, r2
 8005a6e:	43da      	mvns	r2, r3
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	4013      	ands	r3, r2
 8005a74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	689a      	ldr	r2, [r3, #8]
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	409a      	lsls	r2, r3
 8005a80:	0013      	movs	r3, r2
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	2203      	movs	r2, #3
 8005a94:	4013      	ands	r3, r2
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d123      	bne.n	8005ae2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	08da      	lsrs	r2, r3, #3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	3208      	adds	r2, #8
 8005aa2:	0092      	lsls	r2, r2, #2
 8005aa4:	58d3      	ldr	r3, [r2, r3]
 8005aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	2207      	movs	r2, #7
 8005aac:	4013      	ands	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	220f      	movs	r2, #15
 8005ab2:	409a      	lsls	r2, r3
 8005ab4:	0013      	movs	r3, r2
 8005ab6:	43da      	mvns	r2, r3
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	4013      	ands	r3, r2
 8005abc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	691a      	ldr	r2, [r3, #16]
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2107      	movs	r1, #7
 8005ac6:	400b      	ands	r3, r1
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	409a      	lsls	r2, r3
 8005acc:	0013      	movs	r3, r2
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	08da      	lsrs	r2, r3, #3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3208      	adds	r2, #8
 8005adc:	0092      	lsls	r2, r2, #2
 8005ade:	6939      	ldr	r1, [r7, #16]
 8005ae0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	005b      	lsls	r3, r3, #1
 8005aec:	2203      	movs	r2, #3
 8005aee:	409a      	lsls	r2, r3
 8005af0:	0013      	movs	r3, r2
 8005af2:	43da      	mvns	r2, r3
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	4013      	ands	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	2203      	movs	r2, #3
 8005b00:	401a      	ands	r2, r3
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	409a      	lsls	r2, r3
 8005b08:	0013      	movs	r3, r2
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	23c0      	movs	r3, #192	@ 0xc0
 8005b1c:	029b      	lsls	r3, r3, #10
 8005b1e:	4013      	ands	r3, r2
 8005b20:	d100      	bne.n	8005b24 <HAL_GPIO_Init+0x174>
 8005b22:	e092      	b.n	8005c4a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005b24:	4a50      	ldr	r2, [pc, #320]	@ (8005c68 <HAL_GPIO_Init+0x2b8>)
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	089b      	lsrs	r3, r3, #2
 8005b2a:	3318      	adds	r3, #24
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	589b      	ldr	r3, [r3, r2]
 8005b30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2203      	movs	r2, #3
 8005b36:	4013      	ands	r3, r2
 8005b38:	00db      	lsls	r3, r3, #3
 8005b3a:	220f      	movs	r2, #15
 8005b3c:	409a      	lsls	r2, r3
 8005b3e:	0013      	movs	r3, r2
 8005b40:	43da      	mvns	r2, r3
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	4013      	ands	r3, r2
 8005b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	23a0      	movs	r3, #160	@ 0xa0
 8005b4c:	05db      	lsls	r3, r3, #23
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d013      	beq.n	8005b7a <HAL_GPIO_Init+0x1ca>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a45      	ldr	r2, [pc, #276]	@ (8005c6c <HAL_GPIO_Init+0x2bc>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d00d      	beq.n	8005b76 <HAL_GPIO_Init+0x1c6>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a44      	ldr	r2, [pc, #272]	@ (8005c70 <HAL_GPIO_Init+0x2c0>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d007      	beq.n	8005b72 <HAL_GPIO_Init+0x1c2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a43      	ldr	r2, [pc, #268]	@ (8005c74 <HAL_GPIO_Init+0x2c4>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d101      	bne.n	8005b6e <HAL_GPIO_Init+0x1be>
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e006      	b.n	8005b7c <HAL_GPIO_Init+0x1cc>
 8005b6e:	2305      	movs	r3, #5
 8005b70:	e004      	b.n	8005b7c <HAL_GPIO_Init+0x1cc>
 8005b72:	2302      	movs	r3, #2
 8005b74:	e002      	b.n	8005b7c <HAL_GPIO_Init+0x1cc>
 8005b76:	2301      	movs	r3, #1
 8005b78:	e000      	b.n	8005b7c <HAL_GPIO_Init+0x1cc>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	2103      	movs	r1, #3
 8005b80:	400a      	ands	r2, r1
 8005b82:	00d2      	lsls	r2, r2, #3
 8005b84:	4093      	lsls	r3, r2
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005b8c:	4936      	ldr	r1, [pc, #216]	@ (8005c68 <HAL_GPIO_Init+0x2b8>)
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	089b      	lsrs	r3, r3, #2
 8005b92:	3318      	adds	r3, #24
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b9a:	4b33      	ldr	r3, [pc, #204]	@ (8005c68 <HAL_GPIO_Init+0x2b8>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	43da      	mvns	r2, r3
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	2380      	movs	r3, #128	@ 0x80
 8005bb0:	035b      	lsls	r3, r3, #13
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	d003      	beq.n	8005bbe <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005bbe:	4b2a      	ldr	r3, [pc, #168]	@ (8005c68 <HAL_GPIO_Init+0x2b8>)
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005bc4:	4b28      	ldr	r3, [pc, #160]	@ (8005c68 <HAL_GPIO_Init+0x2b8>)
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	43da      	mvns	r2, r3
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	2380      	movs	r3, #128	@ 0x80
 8005bda:	039b      	lsls	r3, r3, #14
 8005bdc:	4013      	ands	r3, r2
 8005bde:	d003      	beq.n	8005be8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005be8:	4b1f      	ldr	r3, [pc, #124]	@ (8005c68 <HAL_GPIO_Init+0x2b8>)
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005bee:	4a1e      	ldr	r2, [pc, #120]	@ (8005c68 <HAL_GPIO_Init+0x2b8>)
 8005bf0:	2384      	movs	r3, #132	@ 0x84
 8005bf2:	58d3      	ldr	r3, [r2, r3]
 8005bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	43da      	mvns	r2, r3
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	2380      	movs	r3, #128	@ 0x80
 8005c06:	029b      	lsls	r3, r3, #10
 8005c08:	4013      	ands	r3, r2
 8005c0a:	d003      	beq.n	8005c14 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005c14:	4914      	ldr	r1, [pc, #80]	@ (8005c68 <HAL_GPIO_Init+0x2b8>)
 8005c16:	2284      	movs	r2, #132	@ 0x84
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005c1c:	4a12      	ldr	r2, [pc, #72]	@ (8005c68 <HAL_GPIO_Init+0x2b8>)
 8005c1e:	2380      	movs	r3, #128	@ 0x80
 8005c20:	58d3      	ldr	r3, [r2, r3]
 8005c22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	43da      	mvns	r2, r3
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	2380      	movs	r3, #128	@ 0x80
 8005c34:	025b      	lsls	r3, r3, #9
 8005c36:	4013      	ands	r3, r2
 8005c38:	d003      	beq.n	8005c42 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005c42:	4909      	ldr	r1, [pc, #36]	@ (8005c68 <HAL_GPIO_Init+0x2b8>)
 8005c44:	2280      	movs	r2, #128	@ 0x80
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	40da      	lsrs	r2, r3
 8005c58:	1e13      	subs	r3, r2, #0
 8005c5a:	d000      	beq.n	8005c5e <HAL_GPIO_Init+0x2ae>
 8005c5c:	e6b0      	b.n	80059c0 <HAL_GPIO_Init+0x10>
  }
}
 8005c5e:	46c0      	nop			@ (mov r8, r8)
 8005c60:	46c0      	nop			@ (mov r8, r8)
 8005c62:	46bd      	mov	sp, r7
 8005c64:	b006      	add	sp, #24
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	40021800 	.word	0x40021800
 8005c6c:	50000400 	.word	0x50000400
 8005c70:	50000800 	.word	0x50000800
 8005c74:	50000c00 	.word	0x50000c00

08005c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	0008      	movs	r0, r1
 8005c82:	0011      	movs	r1, r2
 8005c84:	1cbb      	adds	r3, r7, #2
 8005c86:	1c02      	adds	r2, r0, #0
 8005c88:	801a      	strh	r2, [r3, #0]
 8005c8a:	1c7b      	adds	r3, r7, #1
 8005c8c:	1c0a      	adds	r2, r1, #0
 8005c8e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c90:	1c7b      	adds	r3, r7, #1
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d004      	beq.n	8005ca2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005c98:	1cbb      	adds	r3, r7, #2
 8005c9a:	881a      	ldrh	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005ca0:	e003      	b.n	8005caa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005ca2:	1cbb      	adds	r3, r7, #2
 8005ca4:	881a      	ldrh	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005caa:	46c0      	nop			@ (mov r8, r8)
 8005cac:	46bd      	mov	sp, r7
 8005cae:	b002      	add	sp, #8
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b084      	sub	sp, #16
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	000a      	movs	r2, r1
 8005cbc:	1cbb      	adds	r3, r7, #2
 8005cbe:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	695b      	ldr	r3, [r3, #20]
 8005cc4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005cc6:	1cbb      	adds	r3, r7, #2
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	4013      	ands	r3, r2
 8005cce:	041a      	lsls	r2, r3, #16
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	43db      	mvns	r3, r3
 8005cd4:	1cb9      	adds	r1, r7, #2
 8005cd6:	8809      	ldrh	r1, [r1, #0]
 8005cd8:	400b      	ands	r3, r1
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	619a      	str	r2, [r3, #24]
}
 8005ce0:	46c0      	nop			@ (mov r8, r8)
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	b004      	add	sp, #16
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e08f      	b.n	8005e1a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2241      	movs	r2, #65	@ 0x41
 8005cfe:	5c9b      	ldrb	r3, [r3, r2]
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d107      	bne.n	8005d16 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2240      	movs	r2, #64	@ 0x40
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	0018      	movs	r0, r3
 8005d12:	f7fd ffc3 	bl	8003c9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2241      	movs	r2, #65	@ 0x41
 8005d1a:	2124      	movs	r1, #36	@ 0x24
 8005d1c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2101      	movs	r1, #1
 8005d2a:	438a      	bics	r2, r1
 8005d2c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	493b      	ldr	r1, [pc, #236]	@ (8005e24 <HAL_I2C_Init+0x13c>)
 8005d38:	400a      	ands	r2, r1
 8005d3a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689a      	ldr	r2, [r3, #8]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4938      	ldr	r1, [pc, #224]	@ (8005e28 <HAL_I2C_Init+0x140>)
 8005d48:	400a      	ands	r2, r1
 8005d4a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d108      	bne.n	8005d66 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	689a      	ldr	r2, [r3, #8]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2180      	movs	r1, #128	@ 0x80
 8005d5e:	0209      	lsls	r1, r1, #8
 8005d60:	430a      	orrs	r2, r1
 8005d62:	609a      	str	r2, [r3, #8]
 8005d64:	e007      	b.n	8005d76 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	689a      	ldr	r2, [r3, #8]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2184      	movs	r1, #132	@ 0x84
 8005d70:	0209      	lsls	r1, r1, #8
 8005d72:	430a      	orrs	r2, r1
 8005d74:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d109      	bne.n	8005d92 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2180      	movs	r1, #128	@ 0x80
 8005d8a:	0109      	lsls	r1, r1, #4
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	605a      	str	r2, [r3, #4]
 8005d90:	e007      	b.n	8005da2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4923      	ldr	r1, [pc, #140]	@ (8005e2c <HAL_I2C_Init+0x144>)
 8005d9e:	400a      	ands	r2, r1
 8005da0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4920      	ldr	r1, [pc, #128]	@ (8005e30 <HAL_I2C_Init+0x148>)
 8005dae:	430a      	orrs	r2, r1
 8005db0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68da      	ldr	r2, [r3, #12]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	491a      	ldr	r1, [pc, #104]	@ (8005e28 <HAL_I2C_Init+0x140>)
 8005dbe:	400a      	ands	r2, r1
 8005dc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	691a      	ldr	r2, [r3, #16]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	69d9      	ldr	r1, [r3, #28]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a1a      	ldr	r2, [r3, #32]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2101      	movs	r1, #1
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2241      	movs	r2, #65	@ 0x41
 8005e06:	2120      	movs	r1, #32
 8005e08:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2242      	movs	r2, #66	@ 0x42
 8005e14:	2100      	movs	r1, #0
 8005e16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	0018      	movs	r0, r3
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	b002      	add	sp, #8
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	46c0      	nop			@ (mov r8, r8)
 8005e24:	f0ffffff 	.word	0xf0ffffff
 8005e28:	ffff7fff 	.word	0xffff7fff
 8005e2c:	fffff7ff 	.word	0xfffff7ff
 8005e30:	02008000 	.word	0x02008000

08005e34 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e34:	b590      	push	{r4, r7, lr}
 8005e36:	b089      	sub	sp, #36	@ 0x24
 8005e38:	af02      	add	r7, sp, #8
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	000c      	movs	r4, r1
 8005e3e:	0010      	movs	r0, r2
 8005e40:	0019      	movs	r1, r3
 8005e42:	230a      	movs	r3, #10
 8005e44:	18fb      	adds	r3, r7, r3
 8005e46:	1c22      	adds	r2, r4, #0
 8005e48:	801a      	strh	r2, [r3, #0]
 8005e4a:	2308      	movs	r3, #8
 8005e4c:	18fb      	adds	r3, r7, r3
 8005e4e:	1c02      	adds	r2, r0, #0
 8005e50:	801a      	strh	r2, [r3, #0]
 8005e52:	1dbb      	adds	r3, r7, #6
 8005e54:	1c0a      	adds	r2, r1, #0
 8005e56:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2241      	movs	r2, #65	@ 0x41
 8005e5c:	5c9b      	ldrb	r3, [r3, r2]
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b20      	cmp	r3, #32
 8005e62:	d000      	beq.n	8005e66 <HAL_I2C_Mem_Write+0x32>
 8005e64:	e10c      	b.n	8006080 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d004      	beq.n	8005e76 <HAL_I2C_Mem_Write+0x42>
 8005e6c:	232c      	movs	r3, #44	@ 0x2c
 8005e6e:	18fb      	adds	r3, r7, r3
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d105      	bne.n	8005e82 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2280      	movs	r2, #128	@ 0x80
 8005e7a:	0092      	lsls	r2, r2, #2
 8005e7c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e0ff      	b.n	8006082 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2240      	movs	r2, #64	@ 0x40
 8005e86:	5c9b      	ldrb	r3, [r3, r2]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d101      	bne.n	8005e90 <HAL_I2C_Mem_Write+0x5c>
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	e0f8      	b.n	8006082 <HAL_I2C_Mem_Write+0x24e>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2240      	movs	r2, #64	@ 0x40
 8005e94:	2101      	movs	r1, #1
 8005e96:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e98:	f7fe f9b0 	bl	80041fc <HAL_GetTick>
 8005e9c:	0003      	movs	r3, r0
 8005e9e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ea0:	2380      	movs	r3, #128	@ 0x80
 8005ea2:	0219      	lsls	r1, r3, #8
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	2319      	movs	r3, #25
 8005eac:	2201      	movs	r2, #1
 8005eae:	f000 fb0b 	bl	80064c8 <I2C_WaitOnFlagUntilTimeout>
 8005eb2:	1e03      	subs	r3, r0, #0
 8005eb4:	d001      	beq.n	8005eba <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e0e3      	b.n	8006082 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2241      	movs	r2, #65	@ 0x41
 8005ebe:	2121      	movs	r1, #33	@ 0x21
 8005ec0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2242      	movs	r2, #66	@ 0x42
 8005ec6:	2140      	movs	r1, #64	@ 0x40
 8005ec8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ed4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	222c      	movs	r2, #44	@ 0x2c
 8005eda:	18ba      	adds	r2, r7, r2
 8005edc:	8812      	ldrh	r2, [r2, #0]
 8005ede:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ee6:	1dbb      	adds	r3, r7, #6
 8005ee8:	881c      	ldrh	r4, [r3, #0]
 8005eea:	2308      	movs	r3, #8
 8005eec:	18fb      	adds	r3, r7, r3
 8005eee:	881a      	ldrh	r2, [r3, #0]
 8005ef0:	230a      	movs	r3, #10
 8005ef2:	18fb      	adds	r3, r7, r3
 8005ef4:	8819      	ldrh	r1, [r3, #0]
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	9301      	str	r3, [sp, #4]
 8005efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	0023      	movs	r3, r4
 8005f02:	f000 f9f9 	bl	80062f8 <I2C_RequestMemoryWrite>
 8005f06:	1e03      	subs	r3, r0, #0
 8005f08:	d005      	beq.n	8005f16 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2240      	movs	r2, #64	@ 0x40
 8005f0e:	2100      	movs	r1, #0
 8005f10:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e0b5      	b.n	8006082 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	2bff      	cmp	r3, #255	@ 0xff
 8005f1e:	d911      	bls.n	8005f44 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	22ff      	movs	r2, #255	@ 0xff
 8005f24:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	2380      	movs	r3, #128	@ 0x80
 8005f2e:	045c      	lsls	r4, r3, #17
 8005f30:	230a      	movs	r3, #10
 8005f32:	18fb      	adds	r3, r7, r3
 8005f34:	8819      	ldrh	r1, [r3, #0]
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	2300      	movs	r3, #0
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	0023      	movs	r3, r4
 8005f3e:	f000 fc9d 	bl	800687c <I2C_TransferConfig>
 8005f42:	e012      	b.n	8005f6a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	2380      	movs	r3, #128	@ 0x80
 8005f56:	049c      	lsls	r4, r3, #18
 8005f58:	230a      	movs	r3, #10
 8005f5a:	18fb      	adds	r3, r7, r3
 8005f5c:	8819      	ldrh	r1, [r3, #0]
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	2300      	movs	r3, #0
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	0023      	movs	r3, r4
 8005f66:	f000 fc89 	bl	800687c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	0018      	movs	r0, r3
 8005f72:	f000 fb01 	bl	8006578 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f76:	1e03      	subs	r3, r0, #0
 8005f78:	d001      	beq.n	8005f7e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e081      	b.n	8006082 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f82:	781a      	ldrb	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f8e:	1c5a      	adds	r2, r3, #1
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d03a      	beq.n	800602e <HAL_I2C_Mem_Write+0x1fa>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d136      	bne.n	800602e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005fc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	0013      	movs	r3, r2
 8005fca:	2200      	movs	r2, #0
 8005fcc:	2180      	movs	r1, #128	@ 0x80
 8005fce:	f000 fa7b 	bl	80064c8 <I2C_WaitOnFlagUntilTimeout>
 8005fd2:	1e03      	subs	r3, r0, #0
 8005fd4:	d001      	beq.n	8005fda <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e053      	b.n	8006082 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	2bff      	cmp	r3, #255	@ 0xff
 8005fe2:	d911      	bls.n	8006008 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	22ff      	movs	r2, #255	@ 0xff
 8005fe8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fee:	b2da      	uxtb	r2, r3
 8005ff0:	2380      	movs	r3, #128	@ 0x80
 8005ff2:	045c      	lsls	r4, r3, #17
 8005ff4:	230a      	movs	r3, #10
 8005ff6:	18fb      	adds	r3, r7, r3
 8005ff8:	8819      	ldrh	r1, [r3, #0]
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	0023      	movs	r3, r4
 8006002:	f000 fc3b 	bl	800687c <I2C_TransferConfig>
 8006006:	e012      	b.n	800602e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800600c:	b29a      	uxth	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006016:	b2da      	uxtb	r2, r3
 8006018:	2380      	movs	r3, #128	@ 0x80
 800601a:	049c      	lsls	r4, r3, #18
 800601c:	230a      	movs	r3, #10
 800601e:	18fb      	adds	r3, r7, r3
 8006020:	8819      	ldrh	r1, [r3, #0]
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	2300      	movs	r3, #0
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	0023      	movs	r3, r4
 800602a:	f000 fc27 	bl	800687c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006032:	b29b      	uxth	r3, r3
 8006034:	2b00      	cmp	r3, #0
 8006036:	d198      	bne.n	8005f6a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	0018      	movs	r0, r3
 8006040:	f000 fae0 	bl	8006604 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006044:	1e03      	subs	r3, r0, #0
 8006046:	d001      	beq.n	800604c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e01a      	b.n	8006082 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2220      	movs	r2, #32
 8006052:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	490b      	ldr	r1, [pc, #44]	@ (800608c <HAL_I2C_Mem_Write+0x258>)
 8006060:	400a      	ands	r2, r1
 8006062:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2241      	movs	r2, #65	@ 0x41
 8006068:	2120      	movs	r1, #32
 800606a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2242      	movs	r2, #66	@ 0x42
 8006070:	2100      	movs	r1, #0
 8006072:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2240      	movs	r2, #64	@ 0x40
 8006078:	2100      	movs	r1, #0
 800607a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800607c:	2300      	movs	r3, #0
 800607e:	e000      	b.n	8006082 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8006080:	2302      	movs	r3, #2
  }
}
 8006082:	0018      	movs	r0, r3
 8006084:	46bd      	mov	sp, r7
 8006086:	b007      	add	sp, #28
 8006088:	bd90      	pop	{r4, r7, pc}
 800608a:	46c0      	nop			@ (mov r8, r8)
 800608c:	fe00e800 	.word	0xfe00e800

08006090 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006090:	b590      	push	{r4, r7, lr}
 8006092:	b089      	sub	sp, #36	@ 0x24
 8006094:	af02      	add	r7, sp, #8
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	000c      	movs	r4, r1
 800609a:	0010      	movs	r0, r2
 800609c:	0019      	movs	r1, r3
 800609e:	230a      	movs	r3, #10
 80060a0:	18fb      	adds	r3, r7, r3
 80060a2:	1c22      	adds	r2, r4, #0
 80060a4:	801a      	strh	r2, [r3, #0]
 80060a6:	2308      	movs	r3, #8
 80060a8:	18fb      	adds	r3, r7, r3
 80060aa:	1c02      	adds	r2, r0, #0
 80060ac:	801a      	strh	r2, [r3, #0]
 80060ae:	1dbb      	adds	r3, r7, #6
 80060b0:	1c0a      	adds	r2, r1, #0
 80060b2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2241      	movs	r2, #65	@ 0x41
 80060b8:	5c9b      	ldrb	r3, [r3, r2]
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b20      	cmp	r3, #32
 80060be:	d000      	beq.n	80060c2 <HAL_I2C_Mem_Read+0x32>
 80060c0:	e110      	b.n	80062e4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80060c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d004      	beq.n	80060d2 <HAL_I2C_Mem_Read+0x42>
 80060c8:	232c      	movs	r3, #44	@ 0x2c
 80060ca:	18fb      	adds	r3, r7, r3
 80060cc:	881b      	ldrh	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d105      	bne.n	80060de <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2280      	movs	r2, #128	@ 0x80
 80060d6:	0092      	lsls	r2, r2, #2
 80060d8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e103      	b.n	80062e6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2240      	movs	r2, #64	@ 0x40
 80060e2:	5c9b      	ldrb	r3, [r3, r2]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d101      	bne.n	80060ec <HAL_I2C_Mem_Read+0x5c>
 80060e8:	2302      	movs	r3, #2
 80060ea:	e0fc      	b.n	80062e6 <HAL_I2C_Mem_Read+0x256>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2240      	movs	r2, #64	@ 0x40
 80060f0:	2101      	movs	r1, #1
 80060f2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80060f4:	f7fe f882 	bl	80041fc <HAL_GetTick>
 80060f8:	0003      	movs	r3, r0
 80060fa:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80060fc:	2380      	movs	r3, #128	@ 0x80
 80060fe:	0219      	lsls	r1, r3, #8
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	2319      	movs	r3, #25
 8006108:	2201      	movs	r2, #1
 800610a:	f000 f9dd 	bl	80064c8 <I2C_WaitOnFlagUntilTimeout>
 800610e:	1e03      	subs	r3, r0, #0
 8006110:	d001      	beq.n	8006116 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e0e7      	b.n	80062e6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2241      	movs	r2, #65	@ 0x41
 800611a:	2122      	movs	r1, #34	@ 0x22
 800611c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2242      	movs	r2, #66	@ 0x42
 8006122:	2140      	movs	r1, #64	@ 0x40
 8006124:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006130:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	222c      	movs	r2, #44	@ 0x2c
 8006136:	18ba      	adds	r2, r7, r2
 8006138:	8812      	ldrh	r2, [r2, #0]
 800613a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006142:	1dbb      	adds	r3, r7, #6
 8006144:	881c      	ldrh	r4, [r3, #0]
 8006146:	2308      	movs	r3, #8
 8006148:	18fb      	adds	r3, r7, r3
 800614a:	881a      	ldrh	r2, [r3, #0]
 800614c:	230a      	movs	r3, #10
 800614e:	18fb      	adds	r3, r7, r3
 8006150:	8819      	ldrh	r1, [r3, #0]
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	9301      	str	r3, [sp, #4]
 8006158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	0023      	movs	r3, r4
 800615e:	f000 f92f 	bl	80063c0 <I2C_RequestMemoryRead>
 8006162:	1e03      	subs	r3, r0, #0
 8006164:	d005      	beq.n	8006172 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2240      	movs	r2, #64	@ 0x40
 800616a:	2100      	movs	r1, #0
 800616c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e0b9      	b.n	80062e6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006176:	b29b      	uxth	r3, r3
 8006178:	2bff      	cmp	r3, #255	@ 0xff
 800617a:	d911      	bls.n	80061a0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	22ff      	movs	r2, #255	@ 0xff
 8006180:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006186:	b2da      	uxtb	r2, r3
 8006188:	2380      	movs	r3, #128	@ 0x80
 800618a:	045c      	lsls	r4, r3, #17
 800618c:	230a      	movs	r3, #10
 800618e:	18fb      	adds	r3, r7, r3
 8006190:	8819      	ldrh	r1, [r3, #0]
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	4b56      	ldr	r3, [pc, #344]	@ (80062f0 <HAL_I2C_Mem_Read+0x260>)
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	0023      	movs	r3, r4
 800619a:	f000 fb6f 	bl	800687c <I2C_TransferConfig>
 800619e:	e012      	b.n	80061c6 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061ae:	b2da      	uxtb	r2, r3
 80061b0:	2380      	movs	r3, #128	@ 0x80
 80061b2:	049c      	lsls	r4, r3, #18
 80061b4:	230a      	movs	r3, #10
 80061b6:	18fb      	adds	r3, r7, r3
 80061b8:	8819      	ldrh	r1, [r3, #0]
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	4b4c      	ldr	r3, [pc, #304]	@ (80062f0 <HAL_I2C_Mem_Read+0x260>)
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	0023      	movs	r3, r4
 80061c2:	f000 fb5b 	bl	800687c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80061c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	0013      	movs	r3, r2
 80061d0:	2200      	movs	r2, #0
 80061d2:	2104      	movs	r1, #4
 80061d4:	f000 f978 	bl	80064c8 <I2C_WaitOnFlagUntilTimeout>
 80061d8:	1e03      	subs	r3, r0, #0
 80061da:	d001      	beq.n	80061e0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e082      	b.n	80062e6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061fc:	3b01      	subs	r3, #1
 80061fe:	b29a      	uxth	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006208:	b29b      	uxth	r3, r3
 800620a:	3b01      	subs	r3, #1
 800620c:	b29a      	uxth	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006216:	b29b      	uxth	r3, r3
 8006218:	2b00      	cmp	r3, #0
 800621a:	d03a      	beq.n	8006292 <HAL_I2C_Mem_Read+0x202>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006220:	2b00      	cmp	r3, #0
 8006222:	d136      	bne.n	8006292 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006224:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	0013      	movs	r3, r2
 800622e:	2200      	movs	r2, #0
 8006230:	2180      	movs	r1, #128	@ 0x80
 8006232:	f000 f949 	bl	80064c8 <I2C_WaitOnFlagUntilTimeout>
 8006236:	1e03      	subs	r3, r0, #0
 8006238:	d001      	beq.n	800623e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e053      	b.n	80062e6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006242:	b29b      	uxth	r3, r3
 8006244:	2bff      	cmp	r3, #255	@ 0xff
 8006246:	d911      	bls.n	800626c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	22ff      	movs	r2, #255	@ 0xff
 800624c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006252:	b2da      	uxtb	r2, r3
 8006254:	2380      	movs	r3, #128	@ 0x80
 8006256:	045c      	lsls	r4, r3, #17
 8006258:	230a      	movs	r3, #10
 800625a:	18fb      	adds	r3, r7, r3
 800625c:	8819      	ldrh	r1, [r3, #0]
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	2300      	movs	r3, #0
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	0023      	movs	r3, r4
 8006266:	f000 fb09 	bl	800687c <I2C_TransferConfig>
 800626a:	e012      	b.n	8006292 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006270:	b29a      	uxth	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800627a:	b2da      	uxtb	r2, r3
 800627c:	2380      	movs	r3, #128	@ 0x80
 800627e:	049c      	lsls	r4, r3, #18
 8006280:	230a      	movs	r3, #10
 8006282:	18fb      	adds	r3, r7, r3
 8006284:	8819      	ldrh	r1, [r3, #0]
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	2300      	movs	r3, #0
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	0023      	movs	r3, r4
 800628e:	f000 faf5 	bl	800687c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006296:	b29b      	uxth	r3, r3
 8006298:	2b00      	cmp	r3, #0
 800629a:	d194      	bne.n	80061c6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	0018      	movs	r0, r3
 80062a4:	f000 f9ae 	bl	8006604 <I2C_WaitOnSTOPFlagUntilTimeout>
 80062a8:	1e03      	subs	r3, r0, #0
 80062aa:	d001      	beq.n	80062b0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e01a      	b.n	80062e6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2220      	movs	r2, #32
 80062b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	685a      	ldr	r2, [r3, #4]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	490c      	ldr	r1, [pc, #48]	@ (80062f4 <HAL_I2C_Mem_Read+0x264>)
 80062c4:	400a      	ands	r2, r1
 80062c6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2241      	movs	r2, #65	@ 0x41
 80062cc:	2120      	movs	r1, #32
 80062ce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2242      	movs	r2, #66	@ 0x42
 80062d4:	2100      	movs	r1, #0
 80062d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2240      	movs	r2, #64	@ 0x40
 80062dc:	2100      	movs	r1, #0
 80062de:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80062e0:	2300      	movs	r3, #0
 80062e2:	e000      	b.n	80062e6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80062e4:	2302      	movs	r3, #2
  }
}
 80062e6:	0018      	movs	r0, r3
 80062e8:	46bd      	mov	sp, r7
 80062ea:	b007      	add	sp, #28
 80062ec:	bd90      	pop	{r4, r7, pc}
 80062ee:	46c0      	nop			@ (mov r8, r8)
 80062f0:	80002400 	.word	0x80002400
 80062f4:	fe00e800 	.word	0xfe00e800

080062f8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80062f8:	b5b0      	push	{r4, r5, r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af02      	add	r7, sp, #8
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	000c      	movs	r4, r1
 8006302:	0010      	movs	r0, r2
 8006304:	0019      	movs	r1, r3
 8006306:	250a      	movs	r5, #10
 8006308:	197b      	adds	r3, r7, r5
 800630a:	1c22      	adds	r2, r4, #0
 800630c:	801a      	strh	r2, [r3, #0]
 800630e:	2308      	movs	r3, #8
 8006310:	18fb      	adds	r3, r7, r3
 8006312:	1c02      	adds	r2, r0, #0
 8006314:	801a      	strh	r2, [r3, #0]
 8006316:	1dbb      	adds	r3, r7, #6
 8006318:	1c0a      	adds	r2, r1, #0
 800631a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800631c:	1dbb      	adds	r3, r7, #6
 800631e:	881b      	ldrh	r3, [r3, #0]
 8006320:	b2da      	uxtb	r2, r3
 8006322:	2380      	movs	r3, #128	@ 0x80
 8006324:	045c      	lsls	r4, r3, #17
 8006326:	197b      	adds	r3, r7, r5
 8006328:	8819      	ldrh	r1, [r3, #0]
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	4b23      	ldr	r3, [pc, #140]	@ (80063bc <I2C_RequestMemoryWrite+0xc4>)
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	0023      	movs	r3, r4
 8006332:	f000 faa3 	bl	800687c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006338:	6a39      	ldr	r1, [r7, #32]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	0018      	movs	r0, r3
 800633e:	f000 f91b 	bl	8006578 <I2C_WaitOnTXISFlagUntilTimeout>
 8006342:	1e03      	subs	r3, r0, #0
 8006344:	d001      	beq.n	800634a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e033      	b.n	80063b2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800634a:	1dbb      	adds	r3, r7, #6
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d107      	bne.n	8006362 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006352:	2308      	movs	r3, #8
 8006354:	18fb      	adds	r3, r7, r3
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	b2da      	uxtb	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006360:	e019      	b.n	8006396 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006362:	2308      	movs	r3, #8
 8006364:	18fb      	adds	r3, r7, r3
 8006366:	881b      	ldrh	r3, [r3, #0]
 8006368:	0a1b      	lsrs	r3, r3, #8
 800636a:	b29b      	uxth	r3, r3
 800636c:	b2da      	uxtb	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006374:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006376:	6a39      	ldr	r1, [r7, #32]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	0018      	movs	r0, r3
 800637c:	f000 f8fc 	bl	8006578 <I2C_WaitOnTXISFlagUntilTimeout>
 8006380:	1e03      	subs	r3, r0, #0
 8006382:	d001      	beq.n	8006388 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e014      	b.n	80063b2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006388:	2308      	movs	r3, #8
 800638a:	18fb      	adds	r3, r7, r3
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	b2da      	uxtb	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006396:	6a3a      	ldr	r2, [r7, #32]
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	0013      	movs	r3, r2
 80063a0:	2200      	movs	r2, #0
 80063a2:	2180      	movs	r1, #128	@ 0x80
 80063a4:	f000 f890 	bl	80064c8 <I2C_WaitOnFlagUntilTimeout>
 80063a8:	1e03      	subs	r3, r0, #0
 80063aa:	d001      	beq.n	80063b0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e000      	b.n	80063b2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	0018      	movs	r0, r3
 80063b4:	46bd      	mov	sp, r7
 80063b6:	b004      	add	sp, #16
 80063b8:	bdb0      	pop	{r4, r5, r7, pc}
 80063ba:	46c0      	nop			@ (mov r8, r8)
 80063bc:	80002000 	.word	0x80002000

080063c0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80063c0:	b5b0      	push	{r4, r5, r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af02      	add	r7, sp, #8
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	000c      	movs	r4, r1
 80063ca:	0010      	movs	r0, r2
 80063cc:	0019      	movs	r1, r3
 80063ce:	250a      	movs	r5, #10
 80063d0:	197b      	adds	r3, r7, r5
 80063d2:	1c22      	adds	r2, r4, #0
 80063d4:	801a      	strh	r2, [r3, #0]
 80063d6:	2308      	movs	r3, #8
 80063d8:	18fb      	adds	r3, r7, r3
 80063da:	1c02      	adds	r2, r0, #0
 80063dc:	801a      	strh	r2, [r3, #0]
 80063de:	1dbb      	adds	r3, r7, #6
 80063e0:	1c0a      	adds	r2, r1, #0
 80063e2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80063e4:	1dbb      	adds	r3, r7, #6
 80063e6:	881b      	ldrh	r3, [r3, #0]
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	197b      	adds	r3, r7, r5
 80063ec:	8819      	ldrh	r1, [r3, #0]
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	4b23      	ldr	r3, [pc, #140]	@ (8006480 <I2C_RequestMemoryRead+0xc0>)
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	2300      	movs	r3, #0
 80063f6:	f000 fa41 	bl	800687c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063fc:	6a39      	ldr	r1, [r7, #32]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	0018      	movs	r0, r3
 8006402:	f000 f8b9 	bl	8006578 <I2C_WaitOnTXISFlagUntilTimeout>
 8006406:	1e03      	subs	r3, r0, #0
 8006408:	d001      	beq.n	800640e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e033      	b.n	8006476 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800640e:	1dbb      	adds	r3, r7, #6
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d107      	bne.n	8006426 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006416:	2308      	movs	r3, #8
 8006418:	18fb      	adds	r3, r7, r3
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	b2da      	uxtb	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	629a      	str	r2, [r3, #40]	@ 0x28
 8006424:	e019      	b.n	800645a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006426:	2308      	movs	r3, #8
 8006428:	18fb      	adds	r3, r7, r3
 800642a:	881b      	ldrh	r3, [r3, #0]
 800642c:	0a1b      	lsrs	r3, r3, #8
 800642e:	b29b      	uxth	r3, r3
 8006430:	b2da      	uxtb	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800643a:	6a39      	ldr	r1, [r7, #32]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	0018      	movs	r0, r3
 8006440:	f000 f89a 	bl	8006578 <I2C_WaitOnTXISFlagUntilTimeout>
 8006444:	1e03      	subs	r3, r0, #0
 8006446:	d001      	beq.n	800644c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e014      	b.n	8006476 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800644c:	2308      	movs	r3, #8
 800644e:	18fb      	adds	r3, r7, r3
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	b2da      	uxtb	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800645a:	6a3a      	ldr	r2, [r7, #32]
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	0013      	movs	r3, r2
 8006464:	2200      	movs	r2, #0
 8006466:	2140      	movs	r1, #64	@ 0x40
 8006468:	f000 f82e 	bl	80064c8 <I2C_WaitOnFlagUntilTimeout>
 800646c:	1e03      	subs	r3, r0, #0
 800646e:	d001      	beq.n	8006474 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e000      	b.n	8006476 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	0018      	movs	r0, r3
 8006478:	46bd      	mov	sp, r7
 800647a:	b004      	add	sp, #16
 800647c:	bdb0      	pop	{r4, r5, r7, pc}
 800647e:	46c0      	nop			@ (mov r8, r8)
 8006480:	80002000 	.word	0x80002000

08006484 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	2202      	movs	r2, #2
 8006494:	4013      	ands	r3, r2
 8006496:	2b02      	cmp	r3, #2
 8006498:	d103      	bne.n	80064a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2200      	movs	r2, #0
 80064a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	2201      	movs	r2, #1
 80064aa:	4013      	ands	r3, r2
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d007      	beq.n	80064c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	699a      	ldr	r2, [r3, #24]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2101      	movs	r1, #1
 80064bc:	430a      	orrs	r2, r1
 80064be:	619a      	str	r2, [r3, #24]
  }
}
 80064c0:	46c0      	nop			@ (mov r8, r8)
 80064c2:	46bd      	mov	sp, r7
 80064c4:	b002      	add	sp, #8
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	603b      	str	r3, [r7, #0]
 80064d4:	1dfb      	adds	r3, r7, #7
 80064d6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064d8:	e03a      	b.n	8006550 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80064da:	69ba      	ldr	r2, [r7, #24]
 80064dc:	6839      	ldr	r1, [r7, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	0018      	movs	r0, r3
 80064e2:	f000 f8d3 	bl	800668c <I2C_IsErrorOccurred>
 80064e6:	1e03      	subs	r3, r0, #0
 80064e8:	d001      	beq.n	80064ee <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e040      	b.n	8006570 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	3301      	adds	r3, #1
 80064f2:	d02d      	beq.n	8006550 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064f4:	f7fd fe82 	bl	80041fc <HAL_GetTick>
 80064f8:	0002      	movs	r2, r0
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	429a      	cmp	r2, r3
 8006502:	d302      	bcc.n	800650a <I2C_WaitOnFlagUntilTimeout+0x42>
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d122      	bne.n	8006550 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	4013      	ands	r3, r2
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	425a      	negs	r2, r3
 800651a:	4153      	adcs	r3, r2
 800651c:	b2db      	uxtb	r3, r3
 800651e:	001a      	movs	r2, r3
 8006520:	1dfb      	adds	r3, r7, #7
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	429a      	cmp	r2, r3
 8006526:	d113      	bne.n	8006550 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800652c:	2220      	movs	r2, #32
 800652e:	431a      	orrs	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2241      	movs	r2, #65	@ 0x41
 8006538:	2120      	movs	r1, #32
 800653a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2242      	movs	r2, #66	@ 0x42
 8006540:	2100      	movs	r1, #0
 8006542:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2240      	movs	r2, #64	@ 0x40
 8006548:	2100      	movs	r1, #0
 800654a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e00f      	b.n	8006570 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	4013      	ands	r3, r2
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	425a      	negs	r2, r3
 8006560:	4153      	adcs	r3, r2
 8006562:	b2db      	uxtb	r3, r3
 8006564:	001a      	movs	r2, r3
 8006566:	1dfb      	adds	r3, r7, #7
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	429a      	cmp	r2, r3
 800656c:	d0b5      	beq.n	80064da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	0018      	movs	r0, r3
 8006572:	46bd      	mov	sp, r7
 8006574:	b004      	add	sp, #16
 8006576:	bd80      	pop	{r7, pc}

08006578 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006584:	e032      	b.n	80065ec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	68b9      	ldr	r1, [r7, #8]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	0018      	movs	r0, r3
 800658e:	f000 f87d 	bl	800668c <I2C_IsErrorOccurred>
 8006592:	1e03      	subs	r3, r0, #0
 8006594:	d001      	beq.n	800659a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e030      	b.n	80065fc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	3301      	adds	r3, #1
 800659e:	d025      	beq.n	80065ec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065a0:	f7fd fe2c 	bl	80041fc <HAL_GetTick>
 80065a4:	0002      	movs	r2, r0
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d302      	bcc.n	80065b6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d11a      	bne.n	80065ec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	2202      	movs	r2, #2
 80065be:	4013      	ands	r3, r2
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d013      	beq.n	80065ec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065c8:	2220      	movs	r2, #32
 80065ca:	431a      	orrs	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2241      	movs	r2, #65	@ 0x41
 80065d4:	2120      	movs	r1, #32
 80065d6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2242      	movs	r2, #66	@ 0x42
 80065dc:	2100      	movs	r1, #0
 80065de:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2240      	movs	r2, #64	@ 0x40
 80065e4:	2100      	movs	r1, #0
 80065e6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e007      	b.n	80065fc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	2202      	movs	r2, #2
 80065f4:	4013      	ands	r3, r2
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d1c5      	bne.n	8006586 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	0018      	movs	r0, r3
 80065fe:	46bd      	mov	sp, r7
 8006600:	b004      	add	sp, #16
 8006602:	bd80      	pop	{r7, pc}

08006604 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006610:	e02f      	b.n	8006672 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	68b9      	ldr	r1, [r7, #8]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	0018      	movs	r0, r3
 800661a:	f000 f837 	bl	800668c <I2C_IsErrorOccurred>
 800661e:	1e03      	subs	r3, r0, #0
 8006620:	d001      	beq.n	8006626 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e02d      	b.n	8006682 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006626:	f7fd fde9 	bl	80041fc <HAL_GetTick>
 800662a:	0002      	movs	r2, r0
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	429a      	cmp	r2, r3
 8006634:	d302      	bcc.n	800663c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d11a      	bne.n	8006672 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	2220      	movs	r2, #32
 8006644:	4013      	ands	r3, r2
 8006646:	2b20      	cmp	r3, #32
 8006648:	d013      	beq.n	8006672 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800664e:	2220      	movs	r2, #32
 8006650:	431a      	orrs	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2241      	movs	r2, #65	@ 0x41
 800665a:	2120      	movs	r1, #32
 800665c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2242      	movs	r2, #66	@ 0x42
 8006662:	2100      	movs	r1, #0
 8006664:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2240      	movs	r2, #64	@ 0x40
 800666a:	2100      	movs	r1, #0
 800666c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e007      	b.n	8006682 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	2220      	movs	r2, #32
 800667a:	4013      	ands	r3, r2
 800667c:	2b20      	cmp	r3, #32
 800667e:	d1c8      	bne.n	8006612 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	0018      	movs	r0, r3
 8006684:	46bd      	mov	sp, r7
 8006686:	b004      	add	sp, #16
 8006688:	bd80      	pop	{r7, pc}
	...

0800668c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b08a      	sub	sp, #40	@ 0x28
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006698:	2327      	movs	r3, #39	@ 0x27
 800669a:	18fb      	adds	r3, r7, r3
 800669c:	2200      	movs	r2, #0
 800669e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80066a8:	2300      	movs	r3, #0
 80066aa:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	2210      	movs	r2, #16
 80066b4:	4013      	ands	r3, r2
 80066b6:	d100      	bne.n	80066ba <I2C_IsErrorOccurred+0x2e>
 80066b8:	e079      	b.n	80067ae <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2210      	movs	r2, #16
 80066c0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80066c2:	e057      	b.n	8006774 <I2C_IsErrorOccurred+0xe8>
 80066c4:	2227      	movs	r2, #39	@ 0x27
 80066c6:	18bb      	adds	r3, r7, r2
 80066c8:	18ba      	adds	r2, r7, r2
 80066ca:	7812      	ldrb	r2, [r2, #0]
 80066cc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	3301      	adds	r3, #1
 80066d2:	d04f      	beq.n	8006774 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80066d4:	f7fd fd92 	bl	80041fc <HAL_GetTick>
 80066d8:	0002      	movs	r2, r0
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d302      	bcc.n	80066ea <I2C_IsErrorOccurred+0x5e>
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d144      	bne.n	8006774 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	685a      	ldr	r2, [r3, #4]
 80066f0:	2380      	movs	r3, #128	@ 0x80
 80066f2:	01db      	lsls	r3, r3, #7
 80066f4:	4013      	ands	r3, r2
 80066f6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80066f8:	2013      	movs	r0, #19
 80066fa:	183b      	adds	r3, r7, r0
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	2142      	movs	r1, #66	@ 0x42
 8006700:	5c52      	ldrb	r2, [r2, r1]
 8006702:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	699a      	ldr	r2, [r3, #24]
 800670a:	2380      	movs	r3, #128	@ 0x80
 800670c:	021b      	lsls	r3, r3, #8
 800670e:	401a      	ands	r2, r3
 8006710:	2380      	movs	r3, #128	@ 0x80
 8006712:	021b      	lsls	r3, r3, #8
 8006714:	429a      	cmp	r2, r3
 8006716:	d126      	bne.n	8006766 <I2C_IsErrorOccurred+0xda>
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	2380      	movs	r3, #128	@ 0x80
 800671c:	01db      	lsls	r3, r3, #7
 800671e:	429a      	cmp	r2, r3
 8006720:	d021      	beq.n	8006766 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8006722:	183b      	adds	r3, r7, r0
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	2b20      	cmp	r3, #32
 8006728:	d01d      	beq.n	8006766 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685a      	ldr	r2, [r3, #4]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2180      	movs	r1, #128	@ 0x80
 8006736:	01c9      	lsls	r1, r1, #7
 8006738:	430a      	orrs	r2, r1
 800673a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800673c:	f7fd fd5e 	bl	80041fc <HAL_GetTick>
 8006740:	0003      	movs	r3, r0
 8006742:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006744:	e00f      	b.n	8006766 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006746:	f7fd fd59 	bl	80041fc <HAL_GetTick>
 800674a:	0002      	movs	r2, r0
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	2b19      	cmp	r3, #25
 8006752:	d908      	bls.n	8006766 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	2220      	movs	r2, #32
 8006758:	4313      	orrs	r3, r2
 800675a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800675c:	2327      	movs	r3, #39	@ 0x27
 800675e:	18fb      	adds	r3, r7, r3
 8006760:	2201      	movs	r2, #1
 8006762:	701a      	strb	r2, [r3, #0]

              break;
 8006764:	e006      	b.n	8006774 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	2220      	movs	r2, #32
 800676e:	4013      	ands	r3, r2
 8006770:	2b20      	cmp	r3, #32
 8006772:	d1e8      	bne.n	8006746 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	2220      	movs	r2, #32
 800677c:	4013      	ands	r3, r2
 800677e:	2b20      	cmp	r3, #32
 8006780:	d004      	beq.n	800678c <I2C_IsErrorOccurred+0x100>
 8006782:	2327      	movs	r3, #39	@ 0x27
 8006784:	18fb      	adds	r3, r7, r3
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d09b      	beq.n	80066c4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800678c:	2327      	movs	r3, #39	@ 0x27
 800678e:	18fb      	adds	r3, r7, r3
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d103      	bne.n	800679e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2220      	movs	r2, #32
 800679c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800679e:	6a3b      	ldr	r3, [r7, #32]
 80067a0:	2204      	movs	r2, #4
 80067a2:	4313      	orrs	r3, r2
 80067a4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80067a6:	2327      	movs	r3, #39	@ 0x27
 80067a8:	18fb      	adds	r3, r7, r3
 80067aa:	2201      	movs	r2, #1
 80067ac:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80067b6:	69ba      	ldr	r2, [r7, #24]
 80067b8:	2380      	movs	r3, #128	@ 0x80
 80067ba:	005b      	lsls	r3, r3, #1
 80067bc:	4013      	ands	r3, r2
 80067be:	d00c      	beq.n	80067da <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80067c0:	6a3b      	ldr	r3, [r7, #32]
 80067c2:	2201      	movs	r2, #1
 80067c4:	4313      	orrs	r3, r2
 80067c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2280      	movs	r2, #128	@ 0x80
 80067ce:	0052      	lsls	r2, r2, #1
 80067d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80067d2:	2327      	movs	r3, #39	@ 0x27
 80067d4:	18fb      	adds	r3, r7, r3
 80067d6:	2201      	movs	r2, #1
 80067d8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	2380      	movs	r3, #128	@ 0x80
 80067de:	00db      	lsls	r3, r3, #3
 80067e0:	4013      	ands	r3, r2
 80067e2:	d00c      	beq.n	80067fe <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80067e4:	6a3b      	ldr	r3, [r7, #32]
 80067e6:	2208      	movs	r2, #8
 80067e8:	4313      	orrs	r3, r2
 80067ea:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2280      	movs	r2, #128	@ 0x80
 80067f2:	00d2      	lsls	r2, r2, #3
 80067f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80067f6:	2327      	movs	r3, #39	@ 0x27
 80067f8:	18fb      	adds	r3, r7, r3
 80067fa:	2201      	movs	r2, #1
 80067fc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80067fe:	69ba      	ldr	r2, [r7, #24]
 8006800:	2380      	movs	r3, #128	@ 0x80
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4013      	ands	r3, r2
 8006806:	d00c      	beq.n	8006822 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006808:	6a3b      	ldr	r3, [r7, #32]
 800680a:	2202      	movs	r2, #2
 800680c:	4313      	orrs	r3, r2
 800680e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2280      	movs	r2, #128	@ 0x80
 8006816:	0092      	lsls	r2, r2, #2
 8006818:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800681a:	2327      	movs	r3, #39	@ 0x27
 800681c:	18fb      	adds	r3, r7, r3
 800681e:	2201      	movs	r2, #1
 8006820:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8006822:	2327      	movs	r3, #39	@ 0x27
 8006824:	18fb      	adds	r3, r7, r3
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d01d      	beq.n	8006868 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	0018      	movs	r0, r3
 8006830:	f7ff fe28 	bl	8006484 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	490e      	ldr	r1, [pc, #56]	@ (8006878 <I2C_IsErrorOccurred+0x1ec>)
 8006840:	400a      	ands	r2, r1
 8006842:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006848:	6a3b      	ldr	r3, [r7, #32]
 800684a:	431a      	orrs	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2241      	movs	r2, #65	@ 0x41
 8006854:	2120      	movs	r1, #32
 8006856:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2242      	movs	r2, #66	@ 0x42
 800685c:	2100      	movs	r1, #0
 800685e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2240      	movs	r2, #64	@ 0x40
 8006864:	2100      	movs	r1, #0
 8006866:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8006868:	2327      	movs	r3, #39	@ 0x27
 800686a:	18fb      	adds	r3, r7, r3
 800686c:	781b      	ldrb	r3, [r3, #0]
}
 800686e:	0018      	movs	r0, r3
 8006870:	46bd      	mov	sp, r7
 8006872:	b00a      	add	sp, #40	@ 0x28
 8006874:	bd80      	pop	{r7, pc}
 8006876:	46c0      	nop			@ (mov r8, r8)
 8006878:	fe00e800 	.word	0xfe00e800

0800687c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800687c:	b590      	push	{r4, r7, lr}
 800687e:	b087      	sub	sp, #28
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	0008      	movs	r0, r1
 8006886:	0011      	movs	r1, r2
 8006888:	607b      	str	r3, [r7, #4]
 800688a:	240a      	movs	r4, #10
 800688c:	193b      	adds	r3, r7, r4
 800688e:	1c02      	adds	r2, r0, #0
 8006890:	801a      	strh	r2, [r3, #0]
 8006892:	2009      	movs	r0, #9
 8006894:	183b      	adds	r3, r7, r0
 8006896:	1c0a      	adds	r2, r1, #0
 8006898:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800689a:	193b      	adds	r3, r7, r4
 800689c:	881b      	ldrh	r3, [r3, #0]
 800689e:	059b      	lsls	r3, r3, #22
 80068a0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80068a2:	183b      	adds	r3, r7, r0
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	0419      	lsls	r1, r3, #16
 80068a8:	23ff      	movs	r3, #255	@ 0xff
 80068aa:	041b      	lsls	r3, r3, #16
 80068ac:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80068ae:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80068b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b6:	4313      	orrs	r3, r2
 80068b8:	005b      	lsls	r3, r3, #1
 80068ba:	085b      	lsrs	r3, r3, #1
 80068bc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068c6:	0d51      	lsrs	r1, r2, #21
 80068c8:	2280      	movs	r2, #128	@ 0x80
 80068ca:	00d2      	lsls	r2, r2, #3
 80068cc:	400a      	ands	r2, r1
 80068ce:	4907      	ldr	r1, [pc, #28]	@ (80068ec <I2C_TransferConfig+0x70>)
 80068d0:	430a      	orrs	r2, r1
 80068d2:	43d2      	mvns	r2, r2
 80068d4:	401a      	ands	r2, r3
 80068d6:	0011      	movs	r1, r2
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	430a      	orrs	r2, r1
 80068e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80068e2:	46c0      	nop			@ (mov r8, r8)
 80068e4:	46bd      	mov	sp, r7
 80068e6:	b007      	add	sp, #28
 80068e8:	bd90      	pop	{r4, r7, pc}
 80068ea:	46c0      	nop			@ (mov r8, r8)
 80068ec:	03ff63ff 	.word	0x03ff63ff

080068f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2241      	movs	r2, #65	@ 0x41
 80068fe:	5c9b      	ldrb	r3, [r3, r2]
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b20      	cmp	r3, #32
 8006904:	d138      	bne.n	8006978 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2240      	movs	r2, #64	@ 0x40
 800690a:	5c9b      	ldrb	r3, [r3, r2]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d101      	bne.n	8006914 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006910:	2302      	movs	r3, #2
 8006912:	e032      	b.n	800697a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2240      	movs	r2, #64	@ 0x40
 8006918:	2101      	movs	r1, #1
 800691a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2241      	movs	r2, #65	@ 0x41
 8006920:	2124      	movs	r1, #36	@ 0x24
 8006922:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2101      	movs	r1, #1
 8006930:	438a      	bics	r2, r1
 8006932:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4911      	ldr	r1, [pc, #68]	@ (8006984 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006940:	400a      	ands	r2, r1
 8006942:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6819      	ldr	r1, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	430a      	orrs	r2, r1
 8006952:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2101      	movs	r1, #1
 8006960:	430a      	orrs	r2, r1
 8006962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2241      	movs	r2, #65	@ 0x41
 8006968:	2120      	movs	r1, #32
 800696a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2240      	movs	r2, #64	@ 0x40
 8006970:	2100      	movs	r1, #0
 8006972:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006974:	2300      	movs	r3, #0
 8006976:	e000      	b.n	800697a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006978:	2302      	movs	r3, #2
  }
}
 800697a:	0018      	movs	r0, r3
 800697c:	46bd      	mov	sp, r7
 800697e:	b002      	add	sp, #8
 8006980:	bd80      	pop	{r7, pc}
 8006982:	46c0      	nop			@ (mov r8, r8)
 8006984:	ffffefff 	.word	0xffffefff

08006988 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2241      	movs	r2, #65	@ 0x41
 8006996:	5c9b      	ldrb	r3, [r3, r2]
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b20      	cmp	r3, #32
 800699c:	d139      	bne.n	8006a12 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2240      	movs	r2, #64	@ 0x40
 80069a2:	5c9b      	ldrb	r3, [r3, r2]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d101      	bne.n	80069ac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80069a8:	2302      	movs	r3, #2
 80069aa:	e033      	b.n	8006a14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2240      	movs	r2, #64	@ 0x40
 80069b0:	2101      	movs	r1, #1
 80069b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2241      	movs	r2, #65	@ 0x41
 80069b8:	2124      	movs	r1, #36	@ 0x24
 80069ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2101      	movs	r1, #1
 80069c8:	438a      	bics	r2, r1
 80069ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4a11      	ldr	r2, [pc, #68]	@ (8006a1c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80069d8:	4013      	ands	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	021b      	lsls	r3, r3, #8
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2101      	movs	r1, #1
 80069fa:	430a      	orrs	r2, r1
 80069fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2241      	movs	r2, #65	@ 0x41
 8006a02:	2120      	movs	r1, #32
 8006a04:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2240      	movs	r2, #64	@ 0x40
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	e000      	b.n	8006a14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006a12:	2302      	movs	r3, #2
  }
}
 8006a14:	0018      	movs	r0, r3
 8006a16:	46bd      	mov	sp, r7
 8006a18:	b004      	add	sp, #16
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	fffff0ff 	.word	0xfffff0ff

08006a20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006a28:	4b19      	ldr	r3, [pc, #100]	@ (8006a90 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a19      	ldr	r2, [pc, #100]	@ (8006a94 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006a2e:	4013      	ands	r3, r2
 8006a30:	0019      	movs	r1, r3
 8006a32:	4b17      	ldr	r3, [pc, #92]	@ (8006a90 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	2380      	movs	r3, #128	@ 0x80
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d11f      	bne.n	8006a84 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006a44:	4b14      	ldr	r3, [pc, #80]	@ (8006a98 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	0013      	movs	r3, r2
 8006a4a:	005b      	lsls	r3, r3, #1
 8006a4c:	189b      	adds	r3, r3, r2
 8006a4e:	005b      	lsls	r3, r3, #1
 8006a50:	4912      	ldr	r1, [pc, #72]	@ (8006a9c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8006a52:	0018      	movs	r0, r3
 8006a54:	f7f9 fb70 	bl	8000138 <__udivsi3>
 8006a58:	0003      	movs	r3, r0
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006a5e:	e008      	b.n	8006a72 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d003      	beq.n	8006a6e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	60fb      	str	r3, [r7, #12]
 8006a6c:	e001      	b.n	8006a72 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e009      	b.n	8006a86 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006a72:	4b07      	ldr	r3, [pc, #28]	@ (8006a90 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006a74:	695a      	ldr	r2, [r3, #20]
 8006a76:	2380      	movs	r3, #128	@ 0x80
 8006a78:	00db      	lsls	r3, r3, #3
 8006a7a:	401a      	ands	r2, r3
 8006a7c:	2380      	movs	r3, #128	@ 0x80
 8006a7e:	00db      	lsls	r3, r3, #3
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d0ed      	beq.n	8006a60 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	0018      	movs	r0, r3
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	b004      	add	sp, #16
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	46c0      	nop			@ (mov r8, r8)
 8006a90:	40007000 	.word	0x40007000
 8006a94:	fffff9ff 	.word	0xfffff9ff
 8006a98:	20000000 	.word	0x20000000
 8006a9c:	000f4240 	.word	0x000f4240

08006aa0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8006aa4:	4b03      	ldr	r3, [pc, #12]	@ (8006ab4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8006aa6:	689a      	ldr	r2, [r3, #8]
 8006aa8:	23e0      	movs	r3, #224	@ 0xe0
 8006aaa:	01db      	lsls	r3, r3, #7
 8006aac:	4013      	ands	r3, r2
}
 8006aae:	0018      	movs	r0, r3
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	40021000 	.word	0x40021000

08006ab8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b088      	sub	sp, #32
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e2f3      	b.n	80070b2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	d100      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x1e>
 8006ad4:	e07c      	b.n	8006bd0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ad6:	4bc3      	ldr	r3, [pc, #780]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	2238      	movs	r2, #56	@ 0x38
 8006adc:	4013      	ands	r3, r2
 8006ade:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ae0:	4bc0      	ldr	r3, [pc, #768]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	2203      	movs	r2, #3
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	2b10      	cmp	r3, #16
 8006aee:	d102      	bne.n	8006af6 <HAL_RCC_OscConfig+0x3e>
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	2b03      	cmp	r3, #3
 8006af4:	d002      	beq.n	8006afc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	2b08      	cmp	r3, #8
 8006afa:	d10b      	bne.n	8006b14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006afc:	4bb9      	ldr	r3, [pc, #740]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	2380      	movs	r3, #128	@ 0x80
 8006b02:	029b      	lsls	r3, r3, #10
 8006b04:	4013      	ands	r3, r2
 8006b06:	d062      	beq.n	8006bce <HAL_RCC_OscConfig+0x116>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d15e      	bne.n	8006bce <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e2ce      	b.n	80070b2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685a      	ldr	r2, [r3, #4]
 8006b18:	2380      	movs	r3, #128	@ 0x80
 8006b1a:	025b      	lsls	r3, r3, #9
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d107      	bne.n	8006b30 <HAL_RCC_OscConfig+0x78>
 8006b20:	4bb0      	ldr	r3, [pc, #704]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	4baf      	ldr	r3, [pc, #700]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006b26:	2180      	movs	r1, #128	@ 0x80
 8006b28:	0249      	lsls	r1, r1, #9
 8006b2a:	430a      	orrs	r2, r1
 8006b2c:	601a      	str	r2, [r3, #0]
 8006b2e:	e020      	b.n	8006b72 <HAL_RCC_OscConfig+0xba>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	23a0      	movs	r3, #160	@ 0xa0
 8006b36:	02db      	lsls	r3, r3, #11
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d10e      	bne.n	8006b5a <HAL_RCC_OscConfig+0xa2>
 8006b3c:	4ba9      	ldr	r3, [pc, #676]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	4ba8      	ldr	r3, [pc, #672]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006b42:	2180      	movs	r1, #128	@ 0x80
 8006b44:	02c9      	lsls	r1, r1, #11
 8006b46:	430a      	orrs	r2, r1
 8006b48:	601a      	str	r2, [r3, #0]
 8006b4a:	4ba6      	ldr	r3, [pc, #664]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	4ba5      	ldr	r3, [pc, #660]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006b50:	2180      	movs	r1, #128	@ 0x80
 8006b52:	0249      	lsls	r1, r1, #9
 8006b54:	430a      	orrs	r2, r1
 8006b56:	601a      	str	r2, [r3, #0]
 8006b58:	e00b      	b.n	8006b72 <HAL_RCC_OscConfig+0xba>
 8006b5a:	4ba2      	ldr	r3, [pc, #648]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	4ba1      	ldr	r3, [pc, #644]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006b60:	49a1      	ldr	r1, [pc, #644]	@ (8006de8 <HAL_RCC_OscConfig+0x330>)
 8006b62:	400a      	ands	r2, r1
 8006b64:	601a      	str	r2, [r3, #0]
 8006b66:	4b9f      	ldr	r3, [pc, #636]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	4b9e      	ldr	r3, [pc, #632]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006b6c:	499f      	ldr	r1, [pc, #636]	@ (8006dec <HAL_RCC_OscConfig+0x334>)
 8006b6e:	400a      	ands	r2, r1
 8006b70:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d014      	beq.n	8006ba4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b7a:	f7fd fb3f 	bl	80041fc <HAL_GetTick>
 8006b7e:	0003      	movs	r3, r0
 8006b80:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b82:	e008      	b.n	8006b96 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b84:	f7fd fb3a 	bl	80041fc <HAL_GetTick>
 8006b88:	0002      	movs	r2, r0
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	2b64      	cmp	r3, #100	@ 0x64
 8006b90:	d901      	bls.n	8006b96 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e28d      	b.n	80070b2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b96:	4b93      	ldr	r3, [pc, #588]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	2380      	movs	r3, #128	@ 0x80
 8006b9c:	029b      	lsls	r3, r3, #10
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	d0f0      	beq.n	8006b84 <HAL_RCC_OscConfig+0xcc>
 8006ba2:	e015      	b.n	8006bd0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba4:	f7fd fb2a 	bl	80041fc <HAL_GetTick>
 8006ba8:	0003      	movs	r3, r0
 8006baa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006bac:	e008      	b.n	8006bc0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bae:	f7fd fb25 	bl	80041fc <HAL_GetTick>
 8006bb2:	0002      	movs	r2, r0
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	2b64      	cmp	r3, #100	@ 0x64
 8006bba:	d901      	bls.n	8006bc0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e278      	b.n	80070b2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006bc0:	4b88      	ldr	r3, [pc, #544]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	2380      	movs	r3, #128	@ 0x80
 8006bc6:	029b      	lsls	r3, r3, #10
 8006bc8:	4013      	ands	r3, r2
 8006bca:	d1f0      	bne.n	8006bae <HAL_RCC_OscConfig+0xf6>
 8006bcc:	e000      	b.n	8006bd0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bce:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2202      	movs	r2, #2
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	d100      	bne.n	8006bdc <HAL_RCC_OscConfig+0x124>
 8006bda:	e099      	b.n	8006d10 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bdc:	4b81      	ldr	r3, [pc, #516]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	2238      	movs	r2, #56	@ 0x38
 8006be2:	4013      	ands	r3, r2
 8006be4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006be6:	4b7f      	ldr	r3, [pc, #508]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	2203      	movs	r2, #3
 8006bec:	4013      	ands	r3, r2
 8006bee:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	2b10      	cmp	r3, #16
 8006bf4:	d102      	bne.n	8006bfc <HAL_RCC_OscConfig+0x144>
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d002      	beq.n	8006c02 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d135      	bne.n	8006c6e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c02:	4b78      	ldr	r3, [pc, #480]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	2380      	movs	r3, #128	@ 0x80
 8006c08:	00db      	lsls	r3, r3, #3
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	d005      	beq.n	8006c1a <HAL_RCC_OscConfig+0x162>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e24b      	b.n	80070b2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c1a:	4b72      	ldr	r3, [pc, #456]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	4a74      	ldr	r2, [pc, #464]	@ (8006df0 <HAL_RCC_OscConfig+0x338>)
 8006c20:	4013      	ands	r3, r2
 8006c22:	0019      	movs	r1, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	695b      	ldr	r3, [r3, #20]
 8006c28:	021a      	lsls	r2, r3, #8
 8006c2a:	4b6e      	ldr	r3, [pc, #440]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d112      	bne.n	8006c5c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006c36:	4b6b      	ldr	r3, [pc, #428]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a6e      	ldr	r2, [pc, #440]	@ (8006df4 <HAL_RCC_OscConfig+0x33c>)
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	0019      	movs	r1, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	691a      	ldr	r2, [r3, #16]
 8006c44:	4b67      	ldr	r3, [pc, #412]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006c46:	430a      	orrs	r2, r1
 8006c48:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006c4a:	4b66      	ldr	r3, [pc, #408]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	0adb      	lsrs	r3, r3, #11
 8006c50:	2207      	movs	r2, #7
 8006c52:	4013      	ands	r3, r2
 8006c54:	4a68      	ldr	r2, [pc, #416]	@ (8006df8 <HAL_RCC_OscConfig+0x340>)
 8006c56:	40da      	lsrs	r2, r3
 8006c58:	4b68      	ldr	r3, [pc, #416]	@ (8006dfc <HAL_RCC_OscConfig+0x344>)
 8006c5a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006c5c:	4b68      	ldr	r3, [pc, #416]	@ (8006e00 <HAL_RCC_OscConfig+0x348>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	0018      	movs	r0, r3
 8006c62:	f7fd fa6f 	bl	8004144 <HAL_InitTick>
 8006c66:	1e03      	subs	r3, r0, #0
 8006c68:	d051      	beq.n	8006d0e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e221      	b.n	80070b2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d030      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006c76:	4b5b      	ldr	r3, [pc, #364]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a5e      	ldr	r2, [pc, #376]	@ (8006df4 <HAL_RCC_OscConfig+0x33c>)
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	0019      	movs	r1, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	691a      	ldr	r2, [r3, #16]
 8006c84:	4b57      	ldr	r3, [pc, #348]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006c86:	430a      	orrs	r2, r1
 8006c88:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8006c8a:	4b56      	ldr	r3, [pc, #344]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	4b55      	ldr	r3, [pc, #340]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006c90:	2180      	movs	r1, #128	@ 0x80
 8006c92:	0049      	lsls	r1, r1, #1
 8006c94:	430a      	orrs	r2, r1
 8006c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c98:	f7fd fab0 	bl	80041fc <HAL_GetTick>
 8006c9c:	0003      	movs	r3, r0
 8006c9e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ca0:	e008      	b.n	8006cb4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ca2:	f7fd faab 	bl	80041fc <HAL_GetTick>
 8006ca6:	0002      	movs	r2, r0
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d901      	bls.n	8006cb4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e1fe      	b.n	80070b2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006cb4:	4b4b      	ldr	r3, [pc, #300]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	2380      	movs	r3, #128	@ 0x80
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	d0f0      	beq.n	8006ca2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cc0:	4b48      	ldr	r3, [pc, #288]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	4a4a      	ldr	r2, [pc, #296]	@ (8006df0 <HAL_RCC_OscConfig+0x338>)
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	0019      	movs	r1, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	021a      	lsls	r2, r3, #8
 8006cd0:	4b44      	ldr	r3, [pc, #272]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	605a      	str	r2, [r3, #4]
 8006cd6:	e01b      	b.n	8006d10 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006cd8:	4b42      	ldr	r3, [pc, #264]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	4b41      	ldr	r3, [pc, #260]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006cde:	4949      	ldr	r1, [pc, #292]	@ (8006e04 <HAL_RCC_OscConfig+0x34c>)
 8006ce0:	400a      	ands	r2, r1
 8006ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce4:	f7fd fa8a 	bl	80041fc <HAL_GetTick>
 8006ce8:	0003      	movs	r3, r0
 8006cea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006cec:	e008      	b.n	8006d00 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cee:	f7fd fa85 	bl	80041fc <HAL_GetTick>
 8006cf2:	0002      	movs	r2, r0
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d901      	bls.n	8006d00 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e1d8      	b.n	80070b2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d00:	4b38      	ldr	r3, [pc, #224]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	2380      	movs	r3, #128	@ 0x80
 8006d06:	00db      	lsls	r3, r3, #3
 8006d08:	4013      	ands	r3, r2
 8006d0a:	d1f0      	bne.n	8006cee <HAL_RCC_OscConfig+0x236>
 8006d0c:	e000      	b.n	8006d10 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d0e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2208      	movs	r2, #8
 8006d16:	4013      	ands	r3, r2
 8006d18:	d047      	beq.n	8006daa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006d1a:	4b32      	ldr	r3, [pc, #200]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	2238      	movs	r2, #56	@ 0x38
 8006d20:	4013      	ands	r3, r2
 8006d22:	2b18      	cmp	r3, #24
 8006d24:	d10a      	bne.n	8006d3c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8006d26:	4b2f      	ldr	r3, [pc, #188]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	d03c      	beq.n	8006daa <HAL_RCC_OscConfig+0x2f2>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d138      	bne.n	8006daa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e1ba      	b.n	80070b2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	699b      	ldr	r3, [r3, #24]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d019      	beq.n	8006d78 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006d44:	4b27      	ldr	r3, [pc, #156]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006d46:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006d48:	4b26      	ldr	r3, [pc, #152]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006d4a:	2101      	movs	r1, #1
 8006d4c:	430a      	orrs	r2, r1
 8006d4e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d50:	f7fd fa54 	bl	80041fc <HAL_GetTick>
 8006d54:	0003      	movs	r3, r0
 8006d56:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d58:	e008      	b.n	8006d6c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d5a:	f7fd fa4f 	bl	80041fc <HAL_GetTick>
 8006d5e:	0002      	movs	r2, r0
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d901      	bls.n	8006d6c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	e1a2      	b.n	80070b2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006d6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d70:	2202      	movs	r2, #2
 8006d72:	4013      	ands	r3, r2
 8006d74:	d0f1      	beq.n	8006d5a <HAL_RCC_OscConfig+0x2a2>
 8006d76:	e018      	b.n	8006daa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006d78:	4b1a      	ldr	r3, [pc, #104]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006d7a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006d7c:	4b19      	ldr	r3, [pc, #100]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006d7e:	2101      	movs	r1, #1
 8006d80:	438a      	bics	r2, r1
 8006d82:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d84:	f7fd fa3a 	bl	80041fc <HAL_GetTick>
 8006d88:	0003      	movs	r3, r0
 8006d8a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006d8c:	e008      	b.n	8006da0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d8e:	f7fd fa35 	bl	80041fc <HAL_GetTick>
 8006d92:	0002      	movs	r2, r0
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d901      	bls.n	8006da0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e188      	b.n	80070b2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006da0:	4b10      	ldr	r3, [pc, #64]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006da4:	2202      	movs	r2, #2
 8006da6:	4013      	ands	r3, r2
 8006da8:	d1f1      	bne.n	8006d8e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2204      	movs	r2, #4
 8006db0:	4013      	ands	r3, r2
 8006db2:	d100      	bne.n	8006db6 <HAL_RCC_OscConfig+0x2fe>
 8006db4:	e0c6      	b.n	8006f44 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006db6:	231f      	movs	r3, #31
 8006db8:	18fb      	adds	r3, r7, r3
 8006dba:	2200      	movs	r2, #0
 8006dbc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006dbe:	4b09      	ldr	r3, [pc, #36]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	2238      	movs	r2, #56	@ 0x38
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	2b20      	cmp	r3, #32
 8006dc8:	d11e      	bne.n	8006e08 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006dca:	4b06      	ldr	r3, [pc, #24]	@ (8006de4 <HAL_RCC_OscConfig+0x32c>)
 8006dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dce:	2202      	movs	r2, #2
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	d100      	bne.n	8006dd6 <HAL_RCC_OscConfig+0x31e>
 8006dd4:	e0b6      	b.n	8006f44 <HAL_RCC_OscConfig+0x48c>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d000      	beq.n	8006de0 <HAL_RCC_OscConfig+0x328>
 8006dde:	e0b1      	b.n	8006f44 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e166      	b.n	80070b2 <HAL_RCC_OscConfig+0x5fa>
 8006de4:	40021000 	.word	0x40021000
 8006de8:	fffeffff 	.word	0xfffeffff
 8006dec:	fffbffff 	.word	0xfffbffff
 8006df0:	ffff80ff 	.word	0xffff80ff
 8006df4:	ffffc7ff 	.word	0xffffc7ff
 8006df8:	00f42400 	.word	0x00f42400
 8006dfc:	20000000 	.word	0x20000000
 8006e00:	20000004 	.word	0x20000004
 8006e04:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006e08:	4bac      	ldr	r3, [pc, #688]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8006e0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e0c:	2380      	movs	r3, #128	@ 0x80
 8006e0e:	055b      	lsls	r3, r3, #21
 8006e10:	4013      	ands	r3, r2
 8006e12:	d101      	bne.n	8006e18 <HAL_RCC_OscConfig+0x360>
 8006e14:	2301      	movs	r3, #1
 8006e16:	e000      	b.n	8006e1a <HAL_RCC_OscConfig+0x362>
 8006e18:	2300      	movs	r3, #0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d011      	beq.n	8006e42 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006e1e:	4ba7      	ldr	r3, [pc, #668]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8006e20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e22:	4ba6      	ldr	r3, [pc, #664]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8006e24:	2180      	movs	r1, #128	@ 0x80
 8006e26:	0549      	lsls	r1, r1, #21
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006e2c:	4ba3      	ldr	r3, [pc, #652]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8006e2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e30:	2380      	movs	r3, #128	@ 0x80
 8006e32:	055b      	lsls	r3, r3, #21
 8006e34:	4013      	ands	r3, r2
 8006e36:	60fb      	str	r3, [r7, #12]
 8006e38:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8006e3a:	231f      	movs	r3, #31
 8006e3c:	18fb      	adds	r3, r7, r3
 8006e3e:	2201      	movs	r2, #1
 8006e40:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e42:	4b9f      	ldr	r3, [pc, #636]	@ (80070c0 <HAL_RCC_OscConfig+0x608>)
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	2380      	movs	r3, #128	@ 0x80
 8006e48:	005b      	lsls	r3, r3, #1
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	d11a      	bne.n	8006e84 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e4e:	4b9c      	ldr	r3, [pc, #624]	@ (80070c0 <HAL_RCC_OscConfig+0x608>)
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	4b9b      	ldr	r3, [pc, #620]	@ (80070c0 <HAL_RCC_OscConfig+0x608>)
 8006e54:	2180      	movs	r1, #128	@ 0x80
 8006e56:	0049      	lsls	r1, r1, #1
 8006e58:	430a      	orrs	r2, r1
 8006e5a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006e5c:	f7fd f9ce 	bl	80041fc <HAL_GetTick>
 8006e60:	0003      	movs	r3, r0
 8006e62:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e64:	e008      	b.n	8006e78 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e66:	f7fd f9c9 	bl	80041fc <HAL_GetTick>
 8006e6a:	0002      	movs	r2, r0
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d901      	bls.n	8006e78 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e11c      	b.n	80070b2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e78:	4b91      	ldr	r3, [pc, #580]	@ (80070c0 <HAL_RCC_OscConfig+0x608>)
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	2380      	movs	r3, #128	@ 0x80
 8006e7e:	005b      	lsls	r3, r3, #1
 8006e80:	4013      	ands	r3, r2
 8006e82:	d0f0      	beq.n	8006e66 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d106      	bne.n	8006e9a <HAL_RCC_OscConfig+0x3e2>
 8006e8c:	4b8b      	ldr	r3, [pc, #556]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8006e8e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006e90:	4b8a      	ldr	r3, [pc, #552]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8006e92:	2101      	movs	r1, #1
 8006e94:	430a      	orrs	r2, r1
 8006e96:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006e98:	e01c      	b.n	8006ed4 <HAL_RCC_OscConfig+0x41c>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	2b05      	cmp	r3, #5
 8006ea0:	d10c      	bne.n	8006ebc <HAL_RCC_OscConfig+0x404>
 8006ea2:	4b86      	ldr	r3, [pc, #536]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8006ea4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006ea6:	4b85      	ldr	r3, [pc, #532]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8006ea8:	2104      	movs	r1, #4
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006eae:	4b83      	ldr	r3, [pc, #524]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8006eb0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006eb2:	4b82      	ldr	r3, [pc, #520]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8006eb4:	2101      	movs	r1, #1
 8006eb6:	430a      	orrs	r2, r1
 8006eb8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006eba:	e00b      	b.n	8006ed4 <HAL_RCC_OscConfig+0x41c>
 8006ebc:	4b7f      	ldr	r3, [pc, #508]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8006ebe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006ec0:	4b7e      	ldr	r3, [pc, #504]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8006ec2:	2101      	movs	r1, #1
 8006ec4:	438a      	bics	r2, r1
 8006ec6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006ec8:	4b7c      	ldr	r3, [pc, #496]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8006eca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006ecc:	4b7b      	ldr	r3, [pc, #492]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8006ece:	2104      	movs	r1, #4
 8006ed0:	438a      	bics	r2, r1
 8006ed2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d014      	beq.n	8006f06 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006edc:	f7fd f98e 	bl	80041fc <HAL_GetTick>
 8006ee0:	0003      	movs	r3, r0
 8006ee2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ee4:	e009      	b.n	8006efa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ee6:	f7fd f989 	bl	80041fc <HAL_GetTick>
 8006eea:	0002      	movs	r2, r0
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	4a74      	ldr	r2, [pc, #464]	@ (80070c4 <HAL_RCC_OscConfig+0x60c>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d901      	bls.n	8006efa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e0db      	b.n	80070b2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006efa:	4b70      	ldr	r3, [pc, #448]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8006efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006efe:	2202      	movs	r2, #2
 8006f00:	4013      	ands	r3, r2
 8006f02:	d0f0      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x42e>
 8006f04:	e013      	b.n	8006f2e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f06:	f7fd f979 	bl	80041fc <HAL_GetTick>
 8006f0a:	0003      	movs	r3, r0
 8006f0c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006f0e:	e009      	b.n	8006f24 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f10:	f7fd f974 	bl	80041fc <HAL_GetTick>
 8006f14:	0002      	movs	r2, r0
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	1ad3      	subs	r3, r2, r3
 8006f1a:	4a6a      	ldr	r2, [pc, #424]	@ (80070c4 <HAL_RCC_OscConfig+0x60c>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d901      	bls.n	8006f24 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e0c6      	b.n	80070b2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006f24:	4b65      	ldr	r3, [pc, #404]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8006f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f28:	2202      	movs	r2, #2
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	d1f0      	bne.n	8006f10 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006f2e:	231f      	movs	r3, #31
 8006f30:	18fb      	adds	r3, r7, r3
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d105      	bne.n	8006f44 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006f38:	4b60      	ldr	r3, [pc, #384]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8006f3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f3c:	4b5f      	ldr	r3, [pc, #380]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8006f3e:	4962      	ldr	r1, [pc, #392]	@ (80070c8 <HAL_RCC_OscConfig+0x610>)
 8006f40:	400a      	ands	r2, r1
 8006f42:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	69db      	ldr	r3, [r3, #28]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d100      	bne.n	8006f4e <HAL_RCC_OscConfig+0x496>
 8006f4c:	e0b0      	b.n	80070b0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f4e:	4b5b      	ldr	r3, [pc, #364]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	2238      	movs	r2, #56	@ 0x38
 8006f54:	4013      	ands	r3, r2
 8006f56:	2b10      	cmp	r3, #16
 8006f58:	d100      	bne.n	8006f5c <HAL_RCC_OscConfig+0x4a4>
 8006f5a:	e078      	b.n	800704e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	69db      	ldr	r3, [r3, #28]
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d153      	bne.n	800700c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f64:	4b55      	ldr	r3, [pc, #340]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	4b54      	ldr	r3, [pc, #336]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8006f6a:	4958      	ldr	r1, [pc, #352]	@ (80070cc <HAL_RCC_OscConfig+0x614>)
 8006f6c:	400a      	ands	r2, r1
 8006f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f70:	f7fd f944 	bl	80041fc <HAL_GetTick>
 8006f74:	0003      	movs	r3, r0
 8006f76:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f78:	e008      	b.n	8006f8c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f7a:	f7fd f93f 	bl	80041fc <HAL_GetTick>
 8006f7e:	0002      	movs	r2, r0
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d901      	bls.n	8006f8c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e092      	b.n	80070b2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f8c:	4b4b      	ldr	r3, [pc, #300]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	2380      	movs	r3, #128	@ 0x80
 8006f92:	049b      	lsls	r3, r3, #18
 8006f94:	4013      	ands	r3, r2
 8006f96:	d1f0      	bne.n	8006f7a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f98:	4b48      	ldr	r3, [pc, #288]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	4a4c      	ldr	r2, [pc, #304]	@ (80070d0 <HAL_RCC_OscConfig+0x618>)
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	0019      	movs	r1, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a1a      	ldr	r2, [r3, #32]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006faa:	431a      	orrs	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fb0:	021b      	lsls	r3, r3, #8
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb8:	431a      	orrs	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	4b3e      	ldr	r3, [pc, #248]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fc6:	4b3d      	ldr	r3, [pc, #244]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	4b3c      	ldr	r3, [pc, #240]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8006fcc:	2180      	movs	r1, #128	@ 0x80
 8006fce:	0449      	lsls	r1, r1, #17
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006fd4:	4b39      	ldr	r3, [pc, #228]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8006fd6:	68da      	ldr	r2, [r3, #12]
 8006fd8:	4b38      	ldr	r3, [pc, #224]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8006fda:	2180      	movs	r1, #128	@ 0x80
 8006fdc:	0549      	lsls	r1, r1, #21
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe2:	f7fd f90b 	bl	80041fc <HAL_GetTick>
 8006fe6:	0003      	movs	r3, r0
 8006fe8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fea:	e008      	b.n	8006ffe <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fec:	f7fd f906 	bl	80041fc <HAL_GetTick>
 8006ff0:	0002      	movs	r2, r0
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e059      	b.n	80070b2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ffe:	4b2f      	ldr	r3, [pc, #188]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	2380      	movs	r3, #128	@ 0x80
 8007004:	049b      	lsls	r3, r3, #18
 8007006:	4013      	ands	r3, r2
 8007008:	d0f0      	beq.n	8006fec <HAL_RCC_OscConfig+0x534>
 800700a:	e051      	b.n	80070b0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800700c:	4b2b      	ldr	r3, [pc, #172]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	4b2a      	ldr	r3, [pc, #168]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8007012:	492e      	ldr	r1, [pc, #184]	@ (80070cc <HAL_RCC_OscConfig+0x614>)
 8007014:	400a      	ands	r2, r1
 8007016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007018:	f7fd f8f0 	bl	80041fc <HAL_GetTick>
 800701c:	0003      	movs	r3, r0
 800701e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007020:	e008      	b.n	8007034 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007022:	f7fd f8eb 	bl	80041fc <HAL_GetTick>
 8007026:	0002      	movs	r2, r0
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	2b02      	cmp	r3, #2
 800702e:	d901      	bls.n	8007034 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e03e      	b.n	80070b2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007034:	4b21      	ldr	r3, [pc, #132]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	2380      	movs	r3, #128	@ 0x80
 800703a:	049b      	lsls	r3, r3, #18
 800703c:	4013      	ands	r3, r2
 800703e:	d1f0      	bne.n	8007022 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8007040:	4b1e      	ldr	r3, [pc, #120]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8007042:	68da      	ldr	r2, [r3, #12]
 8007044:	4b1d      	ldr	r3, [pc, #116]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 8007046:	4923      	ldr	r1, [pc, #140]	@ (80070d4 <HAL_RCC_OscConfig+0x61c>)
 8007048:	400a      	ands	r2, r1
 800704a:	60da      	str	r2, [r3, #12]
 800704c:	e030      	b.n	80070b0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d101      	bne.n	800705a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e02b      	b.n	80070b2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800705a:	4b18      	ldr	r3, [pc, #96]	@ (80070bc <HAL_RCC_OscConfig+0x604>)
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	2203      	movs	r2, #3
 8007064:	401a      	ands	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	429a      	cmp	r2, r3
 800706c:	d11e      	bne.n	80070ac <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	2270      	movs	r2, #112	@ 0x70
 8007072:	401a      	ands	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007078:	429a      	cmp	r2, r3
 800707a:	d117      	bne.n	80070ac <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	23fe      	movs	r3, #254	@ 0xfe
 8007080:	01db      	lsls	r3, r3, #7
 8007082:	401a      	ands	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007088:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800708a:	429a      	cmp	r2, r3
 800708c:	d10e      	bne.n	80070ac <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	23f8      	movs	r3, #248	@ 0xf8
 8007092:	039b      	lsls	r3, r3, #14
 8007094:	401a      	ands	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800709a:	429a      	cmp	r2, r3
 800709c:	d106      	bne.n	80070ac <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	0f5b      	lsrs	r3, r3, #29
 80070a2:	075a      	lsls	r2, r3, #29
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d001      	beq.n	80070b0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e000      	b.n	80070b2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	0018      	movs	r0, r3
 80070b4:	46bd      	mov	sp, r7
 80070b6:	b008      	add	sp, #32
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	46c0      	nop			@ (mov r8, r8)
 80070bc:	40021000 	.word	0x40021000
 80070c0:	40007000 	.word	0x40007000
 80070c4:	00001388 	.word	0x00001388
 80070c8:	efffffff 	.word	0xefffffff
 80070cc:	feffffff 	.word	0xfeffffff
 80070d0:	1fc1808c 	.word	0x1fc1808c
 80070d4:	effefffc 	.word	0xeffefffc

080070d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d101      	bne.n	80070ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e0e9      	b.n	80072c0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070ec:	4b76      	ldr	r3, [pc, #472]	@ (80072c8 <HAL_RCC_ClockConfig+0x1f0>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2207      	movs	r2, #7
 80070f2:	4013      	ands	r3, r2
 80070f4:	683a      	ldr	r2, [r7, #0]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d91e      	bls.n	8007138 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070fa:	4b73      	ldr	r3, [pc, #460]	@ (80072c8 <HAL_RCC_ClockConfig+0x1f0>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2207      	movs	r2, #7
 8007100:	4393      	bics	r3, r2
 8007102:	0019      	movs	r1, r3
 8007104:	4b70      	ldr	r3, [pc, #448]	@ (80072c8 <HAL_RCC_ClockConfig+0x1f0>)
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	430a      	orrs	r2, r1
 800710a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800710c:	f7fd f876 	bl	80041fc <HAL_GetTick>
 8007110:	0003      	movs	r3, r0
 8007112:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007114:	e009      	b.n	800712a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007116:	f7fd f871 	bl	80041fc <HAL_GetTick>
 800711a:	0002      	movs	r2, r0
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	4a6a      	ldr	r2, [pc, #424]	@ (80072cc <HAL_RCC_ClockConfig+0x1f4>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d901      	bls.n	800712a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e0ca      	b.n	80072c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800712a:	4b67      	ldr	r3, [pc, #412]	@ (80072c8 <HAL_RCC_ClockConfig+0x1f0>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2207      	movs	r2, #7
 8007130:	4013      	ands	r3, r2
 8007132:	683a      	ldr	r2, [r7, #0]
 8007134:	429a      	cmp	r2, r3
 8007136:	d1ee      	bne.n	8007116 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2202      	movs	r2, #2
 800713e:	4013      	ands	r3, r2
 8007140:	d015      	beq.n	800716e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2204      	movs	r2, #4
 8007148:	4013      	ands	r3, r2
 800714a:	d006      	beq.n	800715a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800714c:	4b60      	ldr	r3, [pc, #384]	@ (80072d0 <HAL_RCC_ClockConfig+0x1f8>)
 800714e:	689a      	ldr	r2, [r3, #8]
 8007150:	4b5f      	ldr	r3, [pc, #380]	@ (80072d0 <HAL_RCC_ClockConfig+0x1f8>)
 8007152:	21e0      	movs	r1, #224	@ 0xe0
 8007154:	01c9      	lsls	r1, r1, #7
 8007156:	430a      	orrs	r2, r1
 8007158:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800715a:	4b5d      	ldr	r3, [pc, #372]	@ (80072d0 <HAL_RCC_ClockConfig+0x1f8>)
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	4a5d      	ldr	r2, [pc, #372]	@ (80072d4 <HAL_RCC_ClockConfig+0x1fc>)
 8007160:	4013      	ands	r3, r2
 8007162:	0019      	movs	r1, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	4b59      	ldr	r3, [pc, #356]	@ (80072d0 <HAL_RCC_ClockConfig+0x1f8>)
 800716a:	430a      	orrs	r2, r1
 800716c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2201      	movs	r2, #1
 8007174:	4013      	ands	r3, r2
 8007176:	d057      	beq.n	8007228 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d107      	bne.n	8007190 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007180:	4b53      	ldr	r3, [pc, #332]	@ (80072d0 <HAL_RCC_ClockConfig+0x1f8>)
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	2380      	movs	r3, #128	@ 0x80
 8007186:	029b      	lsls	r3, r3, #10
 8007188:	4013      	ands	r3, r2
 800718a:	d12b      	bne.n	80071e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e097      	b.n	80072c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	2b02      	cmp	r3, #2
 8007196:	d107      	bne.n	80071a8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007198:	4b4d      	ldr	r3, [pc, #308]	@ (80072d0 <HAL_RCC_ClockConfig+0x1f8>)
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	2380      	movs	r3, #128	@ 0x80
 800719e:	049b      	lsls	r3, r3, #18
 80071a0:	4013      	ands	r3, r2
 80071a2:	d11f      	bne.n	80071e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e08b      	b.n	80072c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d107      	bne.n	80071c0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071b0:	4b47      	ldr	r3, [pc, #284]	@ (80072d0 <HAL_RCC_ClockConfig+0x1f8>)
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	2380      	movs	r3, #128	@ 0x80
 80071b6:	00db      	lsls	r3, r3, #3
 80071b8:	4013      	ands	r3, r2
 80071ba:	d113      	bne.n	80071e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e07f      	b.n	80072c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	2b03      	cmp	r3, #3
 80071c6:	d106      	bne.n	80071d6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80071c8:	4b41      	ldr	r3, [pc, #260]	@ (80072d0 <HAL_RCC_ClockConfig+0x1f8>)
 80071ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071cc:	2202      	movs	r2, #2
 80071ce:	4013      	ands	r3, r2
 80071d0:	d108      	bne.n	80071e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e074      	b.n	80072c0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071d6:	4b3e      	ldr	r3, [pc, #248]	@ (80072d0 <HAL_RCC_ClockConfig+0x1f8>)
 80071d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071da:	2202      	movs	r2, #2
 80071dc:	4013      	ands	r3, r2
 80071de:	d101      	bne.n	80071e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e06d      	b.n	80072c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80071e4:	4b3a      	ldr	r3, [pc, #232]	@ (80072d0 <HAL_RCC_ClockConfig+0x1f8>)
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	2207      	movs	r2, #7
 80071ea:	4393      	bics	r3, r2
 80071ec:	0019      	movs	r1, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	4b37      	ldr	r3, [pc, #220]	@ (80072d0 <HAL_RCC_ClockConfig+0x1f8>)
 80071f4:	430a      	orrs	r2, r1
 80071f6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071f8:	f7fd f800 	bl	80041fc <HAL_GetTick>
 80071fc:	0003      	movs	r3, r0
 80071fe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007200:	e009      	b.n	8007216 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007202:	f7fc fffb 	bl	80041fc <HAL_GetTick>
 8007206:	0002      	movs	r2, r0
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	4a2f      	ldr	r2, [pc, #188]	@ (80072cc <HAL_RCC_ClockConfig+0x1f4>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d901      	bls.n	8007216 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e054      	b.n	80072c0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007216:	4b2e      	ldr	r3, [pc, #184]	@ (80072d0 <HAL_RCC_ClockConfig+0x1f8>)
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	2238      	movs	r2, #56	@ 0x38
 800721c:	401a      	ands	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	00db      	lsls	r3, r3, #3
 8007224:	429a      	cmp	r2, r3
 8007226:	d1ec      	bne.n	8007202 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007228:	4b27      	ldr	r3, [pc, #156]	@ (80072c8 <HAL_RCC_ClockConfig+0x1f0>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2207      	movs	r2, #7
 800722e:	4013      	ands	r3, r2
 8007230:	683a      	ldr	r2, [r7, #0]
 8007232:	429a      	cmp	r2, r3
 8007234:	d21e      	bcs.n	8007274 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007236:	4b24      	ldr	r3, [pc, #144]	@ (80072c8 <HAL_RCC_ClockConfig+0x1f0>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2207      	movs	r2, #7
 800723c:	4393      	bics	r3, r2
 800723e:	0019      	movs	r1, r3
 8007240:	4b21      	ldr	r3, [pc, #132]	@ (80072c8 <HAL_RCC_ClockConfig+0x1f0>)
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	430a      	orrs	r2, r1
 8007246:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007248:	f7fc ffd8 	bl	80041fc <HAL_GetTick>
 800724c:	0003      	movs	r3, r0
 800724e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007250:	e009      	b.n	8007266 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007252:	f7fc ffd3 	bl	80041fc <HAL_GetTick>
 8007256:	0002      	movs	r2, r0
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	4a1b      	ldr	r2, [pc, #108]	@ (80072cc <HAL_RCC_ClockConfig+0x1f4>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d901      	bls.n	8007266 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	e02c      	b.n	80072c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007266:	4b18      	ldr	r3, [pc, #96]	@ (80072c8 <HAL_RCC_ClockConfig+0x1f0>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2207      	movs	r2, #7
 800726c:	4013      	ands	r3, r2
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	429a      	cmp	r2, r3
 8007272:	d1ee      	bne.n	8007252 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2204      	movs	r2, #4
 800727a:	4013      	ands	r3, r2
 800727c:	d009      	beq.n	8007292 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800727e:	4b14      	ldr	r3, [pc, #80]	@ (80072d0 <HAL_RCC_ClockConfig+0x1f8>)
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	4a15      	ldr	r2, [pc, #84]	@ (80072d8 <HAL_RCC_ClockConfig+0x200>)
 8007284:	4013      	ands	r3, r2
 8007286:	0019      	movs	r1, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68da      	ldr	r2, [r3, #12]
 800728c:	4b10      	ldr	r3, [pc, #64]	@ (80072d0 <HAL_RCC_ClockConfig+0x1f8>)
 800728e:	430a      	orrs	r2, r1
 8007290:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8007292:	f000 f829 	bl	80072e8 <HAL_RCC_GetSysClockFreq>
 8007296:	0001      	movs	r1, r0
 8007298:	4b0d      	ldr	r3, [pc, #52]	@ (80072d0 <HAL_RCC_ClockConfig+0x1f8>)
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	0a1b      	lsrs	r3, r3, #8
 800729e:	220f      	movs	r2, #15
 80072a0:	401a      	ands	r2, r3
 80072a2:	4b0e      	ldr	r3, [pc, #56]	@ (80072dc <HAL_RCC_ClockConfig+0x204>)
 80072a4:	0092      	lsls	r2, r2, #2
 80072a6:	58d3      	ldr	r3, [r2, r3]
 80072a8:	221f      	movs	r2, #31
 80072aa:	4013      	ands	r3, r2
 80072ac:	000a      	movs	r2, r1
 80072ae:	40da      	lsrs	r2, r3
 80072b0:	4b0b      	ldr	r3, [pc, #44]	@ (80072e0 <HAL_RCC_ClockConfig+0x208>)
 80072b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80072b4:	4b0b      	ldr	r3, [pc, #44]	@ (80072e4 <HAL_RCC_ClockConfig+0x20c>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	0018      	movs	r0, r3
 80072ba:	f7fc ff43 	bl	8004144 <HAL_InitTick>
 80072be:	0003      	movs	r3, r0
}
 80072c0:	0018      	movs	r0, r3
 80072c2:	46bd      	mov	sp, r7
 80072c4:	b004      	add	sp, #16
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	40022000 	.word	0x40022000
 80072cc:	00001388 	.word	0x00001388
 80072d0:	40021000 	.word	0x40021000
 80072d4:	fffff0ff 	.word	0xfffff0ff
 80072d8:	ffff8fff 	.word	0xffff8fff
 80072dc:	0800c2fc 	.word	0x0800c2fc
 80072e0:	20000000 	.word	0x20000000
 80072e4:	20000004 	.word	0x20000004

080072e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b086      	sub	sp, #24
 80072ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80072ee:	4b3c      	ldr	r3, [pc, #240]	@ (80073e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	2238      	movs	r2, #56	@ 0x38
 80072f4:	4013      	ands	r3, r2
 80072f6:	d10f      	bne.n	8007318 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80072f8:	4b39      	ldr	r3, [pc, #228]	@ (80073e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	0adb      	lsrs	r3, r3, #11
 80072fe:	2207      	movs	r2, #7
 8007300:	4013      	ands	r3, r2
 8007302:	2201      	movs	r2, #1
 8007304:	409a      	lsls	r2, r3
 8007306:	0013      	movs	r3, r2
 8007308:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800730a:	6839      	ldr	r1, [r7, #0]
 800730c:	4835      	ldr	r0, [pc, #212]	@ (80073e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800730e:	f7f8 ff13 	bl	8000138 <__udivsi3>
 8007312:	0003      	movs	r3, r0
 8007314:	613b      	str	r3, [r7, #16]
 8007316:	e05d      	b.n	80073d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007318:	4b31      	ldr	r3, [pc, #196]	@ (80073e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	2238      	movs	r2, #56	@ 0x38
 800731e:	4013      	ands	r3, r2
 8007320:	2b08      	cmp	r3, #8
 8007322:	d102      	bne.n	800732a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007324:	4b30      	ldr	r3, [pc, #192]	@ (80073e8 <HAL_RCC_GetSysClockFreq+0x100>)
 8007326:	613b      	str	r3, [r7, #16]
 8007328:	e054      	b.n	80073d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800732a:	4b2d      	ldr	r3, [pc, #180]	@ (80073e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	2238      	movs	r2, #56	@ 0x38
 8007330:	4013      	ands	r3, r2
 8007332:	2b10      	cmp	r3, #16
 8007334:	d138      	bne.n	80073a8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8007336:	4b2a      	ldr	r3, [pc, #168]	@ (80073e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	2203      	movs	r2, #3
 800733c:	4013      	ands	r3, r2
 800733e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007340:	4b27      	ldr	r3, [pc, #156]	@ (80073e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	091b      	lsrs	r3, r3, #4
 8007346:	2207      	movs	r2, #7
 8007348:	4013      	ands	r3, r2
 800734a:	3301      	adds	r3, #1
 800734c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2b03      	cmp	r3, #3
 8007352:	d10d      	bne.n	8007370 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007354:	68b9      	ldr	r1, [r7, #8]
 8007356:	4824      	ldr	r0, [pc, #144]	@ (80073e8 <HAL_RCC_GetSysClockFreq+0x100>)
 8007358:	f7f8 feee 	bl	8000138 <__udivsi3>
 800735c:	0003      	movs	r3, r0
 800735e:	0019      	movs	r1, r3
 8007360:	4b1f      	ldr	r3, [pc, #124]	@ (80073e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	0a1b      	lsrs	r3, r3, #8
 8007366:	227f      	movs	r2, #127	@ 0x7f
 8007368:	4013      	ands	r3, r2
 800736a:	434b      	muls	r3, r1
 800736c:	617b      	str	r3, [r7, #20]
        break;
 800736e:	e00d      	b.n	800738c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8007370:	68b9      	ldr	r1, [r7, #8]
 8007372:	481c      	ldr	r0, [pc, #112]	@ (80073e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007374:	f7f8 fee0 	bl	8000138 <__udivsi3>
 8007378:	0003      	movs	r3, r0
 800737a:	0019      	movs	r1, r3
 800737c:	4b18      	ldr	r3, [pc, #96]	@ (80073e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	0a1b      	lsrs	r3, r3, #8
 8007382:	227f      	movs	r2, #127	@ 0x7f
 8007384:	4013      	ands	r3, r2
 8007386:	434b      	muls	r3, r1
 8007388:	617b      	str	r3, [r7, #20]
        break;
 800738a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800738c:	4b14      	ldr	r3, [pc, #80]	@ (80073e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	0f5b      	lsrs	r3, r3, #29
 8007392:	2207      	movs	r2, #7
 8007394:	4013      	ands	r3, r2
 8007396:	3301      	adds	r3, #1
 8007398:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800739a:	6879      	ldr	r1, [r7, #4]
 800739c:	6978      	ldr	r0, [r7, #20]
 800739e:	f7f8 fecb 	bl	8000138 <__udivsi3>
 80073a2:	0003      	movs	r3, r0
 80073a4:	613b      	str	r3, [r7, #16]
 80073a6:	e015      	b.n	80073d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80073a8:	4b0d      	ldr	r3, [pc, #52]	@ (80073e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	2238      	movs	r2, #56	@ 0x38
 80073ae:	4013      	ands	r3, r2
 80073b0:	2b20      	cmp	r3, #32
 80073b2:	d103      	bne.n	80073bc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80073b4:	2380      	movs	r3, #128	@ 0x80
 80073b6:	021b      	lsls	r3, r3, #8
 80073b8:	613b      	str	r3, [r7, #16]
 80073ba:	e00b      	b.n	80073d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80073bc:	4b08      	ldr	r3, [pc, #32]	@ (80073e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	2238      	movs	r2, #56	@ 0x38
 80073c2:	4013      	ands	r3, r2
 80073c4:	2b18      	cmp	r3, #24
 80073c6:	d103      	bne.n	80073d0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80073c8:	23fa      	movs	r3, #250	@ 0xfa
 80073ca:	01db      	lsls	r3, r3, #7
 80073cc:	613b      	str	r3, [r7, #16]
 80073ce:	e001      	b.n	80073d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80073d0:	2300      	movs	r3, #0
 80073d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80073d4:	693b      	ldr	r3, [r7, #16]
}
 80073d6:	0018      	movs	r0, r3
 80073d8:	46bd      	mov	sp, r7
 80073da:	b006      	add	sp, #24
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	46c0      	nop			@ (mov r8, r8)
 80073e0:	40021000 	.word	0x40021000
 80073e4:	00f42400 	.word	0x00f42400
 80073e8:	007a1200 	.word	0x007a1200

080073ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073f0:	4b02      	ldr	r3, [pc, #8]	@ (80073fc <HAL_RCC_GetHCLKFreq+0x10>)
 80073f2:	681b      	ldr	r3, [r3, #0]
}
 80073f4:	0018      	movs	r0, r3
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	46c0      	nop			@ (mov r8, r8)
 80073fc:	20000000 	.word	0x20000000

08007400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007400:	b5b0      	push	{r4, r5, r7, lr}
 8007402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007404:	f7ff fff2 	bl	80073ec <HAL_RCC_GetHCLKFreq>
 8007408:	0004      	movs	r4, r0
 800740a:	f7ff fb49 	bl	8006aa0 <LL_RCC_GetAPB1Prescaler>
 800740e:	0003      	movs	r3, r0
 8007410:	0b1a      	lsrs	r2, r3, #12
 8007412:	4b05      	ldr	r3, [pc, #20]	@ (8007428 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007414:	0092      	lsls	r2, r2, #2
 8007416:	58d3      	ldr	r3, [r2, r3]
 8007418:	221f      	movs	r2, #31
 800741a:	4013      	ands	r3, r2
 800741c:	40dc      	lsrs	r4, r3
 800741e:	0023      	movs	r3, r4
}
 8007420:	0018      	movs	r0, r3
 8007422:	46bd      	mov	sp, r7
 8007424:	bdb0      	pop	{r4, r5, r7, pc}
 8007426:	46c0      	nop			@ (mov r8, r8)
 8007428:	0800c33c 	.word	0x0800c33c

0800742c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b086      	sub	sp, #24
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8007434:	2313      	movs	r3, #19
 8007436:	18fb      	adds	r3, r7, r3
 8007438:	2200      	movs	r2, #0
 800743a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800743c:	2312      	movs	r3, #18
 800743e:	18fb      	adds	r3, r7, r3
 8007440:	2200      	movs	r2, #0
 8007442:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	2380      	movs	r3, #128	@ 0x80
 800744a:	029b      	lsls	r3, r3, #10
 800744c:	4013      	ands	r3, r2
 800744e:	d100      	bne.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8007450:	e0a3      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007452:	2011      	movs	r0, #17
 8007454:	183b      	adds	r3, r7, r0
 8007456:	2200      	movs	r2, #0
 8007458:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800745a:	4b86      	ldr	r3, [pc, #536]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800745c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800745e:	2380      	movs	r3, #128	@ 0x80
 8007460:	055b      	lsls	r3, r3, #21
 8007462:	4013      	ands	r3, r2
 8007464:	d110      	bne.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007466:	4b83      	ldr	r3, [pc, #524]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007468:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800746a:	4b82      	ldr	r3, [pc, #520]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800746c:	2180      	movs	r1, #128	@ 0x80
 800746e:	0549      	lsls	r1, r1, #21
 8007470:	430a      	orrs	r2, r1
 8007472:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007474:	4b7f      	ldr	r3, [pc, #508]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007476:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007478:	2380      	movs	r3, #128	@ 0x80
 800747a:	055b      	lsls	r3, r3, #21
 800747c:	4013      	ands	r3, r2
 800747e:	60bb      	str	r3, [r7, #8]
 8007480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007482:	183b      	adds	r3, r7, r0
 8007484:	2201      	movs	r2, #1
 8007486:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007488:	4b7b      	ldr	r3, [pc, #492]	@ (8007678 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	4b7a      	ldr	r3, [pc, #488]	@ (8007678 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800748e:	2180      	movs	r1, #128	@ 0x80
 8007490:	0049      	lsls	r1, r1, #1
 8007492:	430a      	orrs	r2, r1
 8007494:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007496:	f7fc feb1 	bl	80041fc <HAL_GetTick>
 800749a:	0003      	movs	r3, r0
 800749c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800749e:	e00b      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074a0:	f7fc feac 	bl	80041fc <HAL_GetTick>
 80074a4:	0002      	movs	r2, r0
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d904      	bls.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80074ae:	2313      	movs	r3, #19
 80074b0:	18fb      	adds	r3, r7, r3
 80074b2:	2203      	movs	r2, #3
 80074b4:	701a      	strb	r2, [r3, #0]
        break;
 80074b6:	e005      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074b8:	4b6f      	ldr	r3, [pc, #444]	@ (8007678 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	2380      	movs	r3, #128	@ 0x80
 80074be:	005b      	lsls	r3, r3, #1
 80074c0:	4013      	ands	r3, r2
 80074c2:	d0ed      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80074c4:	2313      	movs	r3, #19
 80074c6:	18fb      	adds	r3, r7, r3
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d154      	bne.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80074ce:	4b69      	ldr	r3, [pc, #420]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80074d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80074d2:	23c0      	movs	r3, #192	@ 0xc0
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	4013      	ands	r3, r2
 80074d8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d019      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	697a      	ldr	r2, [r7, #20]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d014      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80074ea:	4b62      	ldr	r3, [pc, #392]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80074ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ee:	4a63      	ldr	r2, [pc, #396]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80074f0:	4013      	ands	r3, r2
 80074f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80074f4:	4b5f      	ldr	r3, [pc, #380]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80074f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80074f8:	4b5e      	ldr	r3, [pc, #376]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80074fa:	2180      	movs	r1, #128	@ 0x80
 80074fc:	0249      	lsls	r1, r1, #9
 80074fe:	430a      	orrs	r2, r1
 8007500:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007502:	4b5c      	ldr	r3, [pc, #368]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007504:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007506:	4b5b      	ldr	r3, [pc, #364]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007508:	495d      	ldr	r1, [pc, #372]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800750a:	400a      	ands	r2, r1
 800750c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800750e:	4b59      	ldr	r3, [pc, #356]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	2201      	movs	r2, #1
 8007518:	4013      	ands	r3, r2
 800751a:	d016      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800751c:	f7fc fe6e 	bl	80041fc <HAL_GetTick>
 8007520:	0003      	movs	r3, r0
 8007522:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007524:	e00c      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007526:	f7fc fe69 	bl	80041fc <HAL_GetTick>
 800752a:	0002      	movs	r2, r0
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	4a54      	ldr	r2, [pc, #336]	@ (8007684 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d904      	bls.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8007536:	2313      	movs	r3, #19
 8007538:	18fb      	adds	r3, r7, r3
 800753a:	2203      	movs	r2, #3
 800753c:	701a      	strb	r2, [r3, #0]
            break;
 800753e:	e004      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007540:	4b4c      	ldr	r3, [pc, #304]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007544:	2202      	movs	r2, #2
 8007546:	4013      	ands	r3, r2
 8007548:	d0ed      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800754a:	2313      	movs	r3, #19
 800754c:	18fb      	adds	r3, r7, r3
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10a      	bne.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007554:	4b47      	ldr	r3, [pc, #284]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007558:	4a48      	ldr	r2, [pc, #288]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800755a:	4013      	ands	r3, r2
 800755c:	0019      	movs	r1, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	699a      	ldr	r2, [r3, #24]
 8007562:	4b44      	ldr	r3, [pc, #272]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007564:	430a      	orrs	r2, r1
 8007566:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007568:	e00c      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800756a:	2312      	movs	r3, #18
 800756c:	18fb      	adds	r3, r7, r3
 800756e:	2213      	movs	r2, #19
 8007570:	18ba      	adds	r2, r7, r2
 8007572:	7812      	ldrb	r2, [r2, #0]
 8007574:	701a      	strb	r2, [r3, #0]
 8007576:	e005      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007578:	2312      	movs	r3, #18
 800757a:	18fb      	adds	r3, r7, r3
 800757c:	2213      	movs	r2, #19
 800757e:	18ba      	adds	r2, r7, r2
 8007580:	7812      	ldrb	r2, [r2, #0]
 8007582:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007584:	2311      	movs	r3, #17
 8007586:	18fb      	adds	r3, r7, r3
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d105      	bne.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800758e:	4b39      	ldr	r3, [pc, #228]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007590:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007592:	4b38      	ldr	r3, [pc, #224]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007594:	493c      	ldr	r1, [pc, #240]	@ (8007688 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007596:	400a      	ands	r2, r1
 8007598:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2201      	movs	r2, #1
 80075a0:	4013      	ands	r3, r2
 80075a2:	d009      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80075a4:	4b33      	ldr	r3, [pc, #204]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80075a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075a8:	2203      	movs	r2, #3
 80075aa:	4393      	bics	r3, r2
 80075ac:	0019      	movs	r1, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	685a      	ldr	r2, [r3, #4]
 80075b2:	4b30      	ldr	r3, [pc, #192]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80075b4:	430a      	orrs	r2, r1
 80075b6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2202      	movs	r2, #2
 80075be:	4013      	ands	r3, r2
 80075c0:	d009      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80075c2:	4b2c      	ldr	r3, [pc, #176]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80075c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075c6:	220c      	movs	r2, #12
 80075c8:	4393      	bics	r3, r2
 80075ca:	0019      	movs	r1, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	689a      	ldr	r2, [r3, #8]
 80075d0:	4b28      	ldr	r3, [pc, #160]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80075d2:	430a      	orrs	r2, r1
 80075d4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2220      	movs	r2, #32
 80075dc:	4013      	ands	r3, r2
 80075de:	d009      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075e0:	4b24      	ldr	r3, [pc, #144]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80075e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075e4:	4a29      	ldr	r2, [pc, #164]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075e6:	4013      	ands	r3, r2
 80075e8:	0019      	movs	r1, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	68da      	ldr	r2, [r3, #12]
 80075ee:	4b21      	ldr	r3, [pc, #132]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80075f0:	430a      	orrs	r2, r1
 80075f2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	2380      	movs	r3, #128	@ 0x80
 80075fa:	01db      	lsls	r3, r3, #7
 80075fc:	4013      	ands	r3, r2
 80075fe:	d015      	beq.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007600:	4b1c      	ldr	r3, [pc, #112]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	0899      	lsrs	r1, r3, #2
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	695a      	ldr	r2, [r3, #20]
 800760c:	4b19      	ldr	r3, [pc, #100]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800760e:	430a      	orrs	r2, r1
 8007610:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	695a      	ldr	r2, [r3, #20]
 8007616:	2380      	movs	r3, #128	@ 0x80
 8007618:	05db      	lsls	r3, r3, #23
 800761a:	429a      	cmp	r2, r3
 800761c:	d106      	bne.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800761e:	4b15      	ldr	r3, [pc, #84]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007620:	68da      	ldr	r2, [r3, #12]
 8007622:	4b14      	ldr	r3, [pc, #80]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007624:	2180      	movs	r1, #128	@ 0x80
 8007626:	0249      	lsls	r1, r1, #9
 8007628:	430a      	orrs	r2, r1
 800762a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	2380      	movs	r3, #128	@ 0x80
 8007632:	011b      	lsls	r3, r3, #4
 8007634:	4013      	ands	r3, r2
 8007636:	d016      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007638:	4b0e      	ldr	r3, [pc, #56]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800763a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800763c:	4a14      	ldr	r2, [pc, #80]	@ (8007690 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800763e:	4013      	ands	r3, r2
 8007640:	0019      	movs	r1, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	691a      	ldr	r2, [r3, #16]
 8007646:	4b0b      	ldr	r3, [pc, #44]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007648:	430a      	orrs	r2, r1
 800764a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	691a      	ldr	r2, [r3, #16]
 8007650:	2380      	movs	r3, #128	@ 0x80
 8007652:	01db      	lsls	r3, r3, #7
 8007654:	429a      	cmp	r2, r3
 8007656:	d106      	bne.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007658:	4b06      	ldr	r3, [pc, #24]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800765a:	68da      	ldr	r2, [r3, #12]
 800765c:	4b05      	ldr	r3, [pc, #20]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800765e:	2180      	movs	r1, #128	@ 0x80
 8007660:	0249      	lsls	r1, r1, #9
 8007662:	430a      	orrs	r2, r1
 8007664:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8007666:	2312      	movs	r3, #18
 8007668:	18fb      	adds	r3, r7, r3
 800766a:	781b      	ldrb	r3, [r3, #0]
}
 800766c:	0018      	movs	r0, r3
 800766e:	46bd      	mov	sp, r7
 8007670:	b006      	add	sp, #24
 8007672:	bd80      	pop	{r7, pc}
 8007674:	40021000 	.word	0x40021000
 8007678:	40007000 	.word	0x40007000
 800767c:	fffffcff 	.word	0xfffffcff
 8007680:	fffeffff 	.word	0xfffeffff
 8007684:	00001388 	.word	0x00001388
 8007688:	efffffff 	.word	0xefffffff
 800768c:	ffffcfff 	.word	0xffffcfff
 8007690:	ffff3fff 	.word	0xffff3fff

08007694 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d101      	bne.n	80076a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e04a      	b.n	800773c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	223d      	movs	r2, #61	@ 0x3d
 80076aa:	5c9b      	ldrb	r3, [r3, r2]
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d107      	bne.n	80076c2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	223c      	movs	r2, #60	@ 0x3c
 80076b6:	2100      	movs	r1, #0
 80076b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	0018      	movs	r0, r3
 80076be:	f7fc fb4f 	bl	8003d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	223d      	movs	r2, #61	@ 0x3d
 80076c6:	2102      	movs	r1, #2
 80076c8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	3304      	adds	r3, #4
 80076d2:	0019      	movs	r1, r3
 80076d4:	0010      	movs	r0, r2
 80076d6:	f000 fb4f 	bl	8007d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2248      	movs	r2, #72	@ 0x48
 80076de:	2101      	movs	r1, #1
 80076e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	223e      	movs	r2, #62	@ 0x3e
 80076e6:	2101      	movs	r1, #1
 80076e8:	5499      	strb	r1, [r3, r2]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	223f      	movs	r2, #63	@ 0x3f
 80076ee:	2101      	movs	r1, #1
 80076f0:	5499      	strb	r1, [r3, r2]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2240      	movs	r2, #64	@ 0x40
 80076f6:	2101      	movs	r1, #1
 80076f8:	5499      	strb	r1, [r3, r2]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2241      	movs	r2, #65	@ 0x41
 80076fe:	2101      	movs	r1, #1
 8007700:	5499      	strb	r1, [r3, r2]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2242      	movs	r2, #66	@ 0x42
 8007706:	2101      	movs	r1, #1
 8007708:	5499      	strb	r1, [r3, r2]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2243      	movs	r2, #67	@ 0x43
 800770e:	2101      	movs	r1, #1
 8007710:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2244      	movs	r2, #68	@ 0x44
 8007716:	2101      	movs	r1, #1
 8007718:	5499      	strb	r1, [r3, r2]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2245      	movs	r2, #69	@ 0x45
 800771e:	2101      	movs	r1, #1
 8007720:	5499      	strb	r1, [r3, r2]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2246      	movs	r2, #70	@ 0x46
 8007726:	2101      	movs	r1, #1
 8007728:	5499      	strb	r1, [r3, r2]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2247      	movs	r2, #71	@ 0x47
 800772e:	2101      	movs	r1, #1
 8007730:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	223d      	movs	r2, #61	@ 0x3d
 8007736:	2101      	movs	r1, #1
 8007738:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	0018      	movs	r0, r3
 800773e:	46bd      	mov	sp, r7
 8007740:	b002      	add	sp, #8
 8007742:	bd80      	pop	{r7, pc}

08007744 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e04a      	b.n	80077ec <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	223d      	movs	r2, #61	@ 0x3d
 800775a:	5c9b      	ldrb	r3, [r3, r2]
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d107      	bne.n	8007772 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	223c      	movs	r2, #60	@ 0x3c
 8007766:	2100      	movs	r1, #0
 8007768:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	0018      	movs	r0, r3
 800776e:	f000 f841 	bl	80077f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	223d      	movs	r2, #61	@ 0x3d
 8007776:	2102      	movs	r1, #2
 8007778:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	3304      	adds	r3, #4
 8007782:	0019      	movs	r1, r3
 8007784:	0010      	movs	r0, r2
 8007786:	f000 faf7 	bl	8007d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2248      	movs	r2, #72	@ 0x48
 800778e:	2101      	movs	r1, #1
 8007790:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	223e      	movs	r2, #62	@ 0x3e
 8007796:	2101      	movs	r1, #1
 8007798:	5499      	strb	r1, [r3, r2]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	223f      	movs	r2, #63	@ 0x3f
 800779e:	2101      	movs	r1, #1
 80077a0:	5499      	strb	r1, [r3, r2]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2240      	movs	r2, #64	@ 0x40
 80077a6:	2101      	movs	r1, #1
 80077a8:	5499      	strb	r1, [r3, r2]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2241      	movs	r2, #65	@ 0x41
 80077ae:	2101      	movs	r1, #1
 80077b0:	5499      	strb	r1, [r3, r2]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2242      	movs	r2, #66	@ 0x42
 80077b6:	2101      	movs	r1, #1
 80077b8:	5499      	strb	r1, [r3, r2]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2243      	movs	r2, #67	@ 0x43
 80077be:	2101      	movs	r1, #1
 80077c0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2244      	movs	r2, #68	@ 0x44
 80077c6:	2101      	movs	r1, #1
 80077c8:	5499      	strb	r1, [r3, r2]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2245      	movs	r2, #69	@ 0x45
 80077ce:	2101      	movs	r1, #1
 80077d0:	5499      	strb	r1, [r3, r2]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2246      	movs	r2, #70	@ 0x46
 80077d6:	2101      	movs	r1, #1
 80077d8:	5499      	strb	r1, [r3, r2]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2247      	movs	r2, #71	@ 0x47
 80077de:	2101      	movs	r1, #1
 80077e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	223d      	movs	r2, #61	@ 0x3d
 80077e6:	2101      	movs	r1, #1
 80077e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	0018      	movs	r0, r3
 80077ee:	46bd      	mov	sp, r7
 80077f0:	b002      	add	sp, #8
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80077fc:	46c0      	nop			@ (mov r8, r8)
 80077fe:	46bd      	mov	sp, r7
 8007800:	b002      	add	sp, #8
 8007802:	bd80      	pop	{r7, pc}

08007804 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d108      	bne.n	8007826 <HAL_TIM_PWM_Start+0x22>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	223e      	movs	r2, #62	@ 0x3e
 8007818:	5c9b      	ldrb	r3, [r3, r2]
 800781a:	b2db      	uxtb	r3, r3
 800781c:	3b01      	subs	r3, #1
 800781e:	1e5a      	subs	r2, r3, #1
 8007820:	4193      	sbcs	r3, r2
 8007822:	b2db      	uxtb	r3, r3
 8007824:	e037      	b.n	8007896 <HAL_TIM_PWM_Start+0x92>
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	2b04      	cmp	r3, #4
 800782a:	d108      	bne.n	800783e <HAL_TIM_PWM_Start+0x3a>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	223f      	movs	r2, #63	@ 0x3f
 8007830:	5c9b      	ldrb	r3, [r3, r2]
 8007832:	b2db      	uxtb	r3, r3
 8007834:	3b01      	subs	r3, #1
 8007836:	1e5a      	subs	r2, r3, #1
 8007838:	4193      	sbcs	r3, r2
 800783a:	b2db      	uxtb	r3, r3
 800783c:	e02b      	b.n	8007896 <HAL_TIM_PWM_Start+0x92>
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	2b08      	cmp	r3, #8
 8007842:	d108      	bne.n	8007856 <HAL_TIM_PWM_Start+0x52>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2240      	movs	r2, #64	@ 0x40
 8007848:	5c9b      	ldrb	r3, [r3, r2]
 800784a:	b2db      	uxtb	r3, r3
 800784c:	3b01      	subs	r3, #1
 800784e:	1e5a      	subs	r2, r3, #1
 8007850:	4193      	sbcs	r3, r2
 8007852:	b2db      	uxtb	r3, r3
 8007854:	e01f      	b.n	8007896 <HAL_TIM_PWM_Start+0x92>
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	2b0c      	cmp	r3, #12
 800785a:	d108      	bne.n	800786e <HAL_TIM_PWM_Start+0x6a>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2241      	movs	r2, #65	@ 0x41
 8007860:	5c9b      	ldrb	r3, [r3, r2]
 8007862:	b2db      	uxtb	r3, r3
 8007864:	3b01      	subs	r3, #1
 8007866:	1e5a      	subs	r2, r3, #1
 8007868:	4193      	sbcs	r3, r2
 800786a:	b2db      	uxtb	r3, r3
 800786c:	e013      	b.n	8007896 <HAL_TIM_PWM_Start+0x92>
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	2b10      	cmp	r3, #16
 8007872:	d108      	bne.n	8007886 <HAL_TIM_PWM_Start+0x82>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2242      	movs	r2, #66	@ 0x42
 8007878:	5c9b      	ldrb	r3, [r3, r2]
 800787a:	b2db      	uxtb	r3, r3
 800787c:	3b01      	subs	r3, #1
 800787e:	1e5a      	subs	r2, r3, #1
 8007880:	4193      	sbcs	r3, r2
 8007882:	b2db      	uxtb	r3, r3
 8007884:	e007      	b.n	8007896 <HAL_TIM_PWM_Start+0x92>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2243      	movs	r2, #67	@ 0x43
 800788a:	5c9b      	ldrb	r3, [r3, r2]
 800788c:	b2db      	uxtb	r3, r3
 800788e:	3b01      	subs	r3, #1
 8007890:	1e5a      	subs	r2, r3, #1
 8007892:	4193      	sbcs	r3, r2
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b00      	cmp	r3, #0
 8007898:	d001      	beq.n	800789e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e085      	b.n	80079aa <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d104      	bne.n	80078ae <HAL_TIM_PWM_Start+0xaa>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	223e      	movs	r2, #62	@ 0x3e
 80078a8:	2102      	movs	r1, #2
 80078aa:	5499      	strb	r1, [r3, r2]
 80078ac:	e023      	b.n	80078f6 <HAL_TIM_PWM_Start+0xf2>
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	2b04      	cmp	r3, #4
 80078b2:	d104      	bne.n	80078be <HAL_TIM_PWM_Start+0xba>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	223f      	movs	r2, #63	@ 0x3f
 80078b8:	2102      	movs	r1, #2
 80078ba:	5499      	strb	r1, [r3, r2]
 80078bc:	e01b      	b.n	80078f6 <HAL_TIM_PWM_Start+0xf2>
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	2b08      	cmp	r3, #8
 80078c2:	d104      	bne.n	80078ce <HAL_TIM_PWM_Start+0xca>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2240      	movs	r2, #64	@ 0x40
 80078c8:	2102      	movs	r1, #2
 80078ca:	5499      	strb	r1, [r3, r2]
 80078cc:	e013      	b.n	80078f6 <HAL_TIM_PWM_Start+0xf2>
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	2b0c      	cmp	r3, #12
 80078d2:	d104      	bne.n	80078de <HAL_TIM_PWM_Start+0xda>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2241      	movs	r2, #65	@ 0x41
 80078d8:	2102      	movs	r1, #2
 80078da:	5499      	strb	r1, [r3, r2]
 80078dc:	e00b      	b.n	80078f6 <HAL_TIM_PWM_Start+0xf2>
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	2b10      	cmp	r3, #16
 80078e2:	d104      	bne.n	80078ee <HAL_TIM_PWM_Start+0xea>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2242      	movs	r2, #66	@ 0x42
 80078e8:	2102      	movs	r1, #2
 80078ea:	5499      	strb	r1, [r3, r2]
 80078ec:	e003      	b.n	80078f6 <HAL_TIM_PWM_Start+0xf2>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2243      	movs	r2, #67	@ 0x43
 80078f2:	2102      	movs	r1, #2
 80078f4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	2201      	movs	r2, #1
 80078fe:	0018      	movs	r0, r3
 8007900:	f000 fe1e 	bl	8008540 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a2a      	ldr	r2, [pc, #168]	@ (80079b4 <HAL_TIM_PWM_Start+0x1b0>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d00e      	beq.n	800792c <HAL_TIM_PWM_Start+0x128>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a29      	ldr	r2, [pc, #164]	@ (80079b8 <HAL_TIM_PWM_Start+0x1b4>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d009      	beq.n	800792c <HAL_TIM_PWM_Start+0x128>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a27      	ldr	r2, [pc, #156]	@ (80079bc <HAL_TIM_PWM_Start+0x1b8>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d004      	beq.n	800792c <HAL_TIM_PWM_Start+0x128>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a26      	ldr	r2, [pc, #152]	@ (80079c0 <HAL_TIM_PWM_Start+0x1bc>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d101      	bne.n	8007930 <HAL_TIM_PWM_Start+0x12c>
 800792c:	2301      	movs	r3, #1
 800792e:	e000      	b.n	8007932 <HAL_TIM_PWM_Start+0x12e>
 8007930:	2300      	movs	r3, #0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d008      	beq.n	8007948 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2180      	movs	r1, #128	@ 0x80
 8007942:	0209      	lsls	r1, r1, #8
 8007944:	430a      	orrs	r2, r1
 8007946:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a19      	ldr	r2, [pc, #100]	@ (80079b4 <HAL_TIM_PWM_Start+0x1b0>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d009      	beq.n	8007966 <HAL_TIM_PWM_Start+0x162>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a1b      	ldr	r2, [pc, #108]	@ (80079c4 <HAL_TIM_PWM_Start+0x1c0>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d004      	beq.n	8007966 <HAL_TIM_PWM_Start+0x162>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a15      	ldr	r2, [pc, #84]	@ (80079b8 <HAL_TIM_PWM_Start+0x1b4>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d116      	bne.n	8007994 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	4a16      	ldr	r2, [pc, #88]	@ (80079c8 <HAL_TIM_PWM_Start+0x1c4>)
 800796e:	4013      	ands	r3, r2
 8007970:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2b06      	cmp	r3, #6
 8007976:	d016      	beq.n	80079a6 <HAL_TIM_PWM_Start+0x1a2>
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	2380      	movs	r3, #128	@ 0x80
 800797c:	025b      	lsls	r3, r3, #9
 800797e:	429a      	cmp	r2, r3
 8007980:	d011      	beq.n	80079a6 <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2101      	movs	r1, #1
 800798e:	430a      	orrs	r2, r1
 8007990:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007992:	e008      	b.n	80079a6 <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2101      	movs	r1, #1
 80079a0:	430a      	orrs	r2, r1
 80079a2:	601a      	str	r2, [r3, #0]
 80079a4:	e000      	b.n	80079a8 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079a6:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	0018      	movs	r0, r3
 80079ac:	46bd      	mov	sp, r7
 80079ae:	b004      	add	sp, #16
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	46c0      	nop			@ (mov r8, r8)
 80079b4:	40012c00 	.word	0x40012c00
 80079b8:	40014000 	.word	0x40014000
 80079bc:	40014400 	.word	0x40014400
 80079c0:	40014800 	.word	0x40014800
 80079c4:	40000400 	.word	0x40000400
 80079c8:	00010007 	.word	0x00010007

080079cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b086      	sub	sp, #24
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079d8:	2317      	movs	r3, #23
 80079da:	18fb      	adds	r3, r7, r3
 80079dc:	2200      	movs	r2, #0
 80079de:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	223c      	movs	r2, #60	@ 0x3c
 80079e4:	5c9b      	ldrb	r3, [r3, r2]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d101      	bne.n	80079ee <HAL_TIM_PWM_ConfigChannel+0x22>
 80079ea:	2302      	movs	r3, #2
 80079ec:	e0e5      	b.n	8007bba <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	223c      	movs	r2, #60	@ 0x3c
 80079f2:	2101      	movs	r1, #1
 80079f4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2b14      	cmp	r3, #20
 80079fa:	d900      	bls.n	80079fe <HAL_TIM_PWM_ConfigChannel+0x32>
 80079fc:	e0d1      	b.n	8007ba2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	009a      	lsls	r2, r3, #2
 8007a02:	4b70      	ldr	r3, [pc, #448]	@ (8007bc4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8007a04:	18d3      	adds	r3, r2, r3
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68ba      	ldr	r2, [r7, #8]
 8007a10:	0011      	movs	r1, r2
 8007a12:	0018      	movs	r0, r3
 8007a14:	f000 fa34 	bl	8007e80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	699a      	ldr	r2, [r3, #24]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2108      	movs	r1, #8
 8007a24:	430a      	orrs	r2, r1
 8007a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	699a      	ldr	r2, [r3, #24]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2104      	movs	r1, #4
 8007a34:	438a      	bics	r2, r1
 8007a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	6999      	ldr	r1, [r3, #24]
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	691a      	ldr	r2, [r3, #16]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	430a      	orrs	r2, r1
 8007a48:	619a      	str	r2, [r3, #24]
      break;
 8007a4a:	e0af      	b.n	8007bac <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	68ba      	ldr	r2, [r7, #8]
 8007a52:	0011      	movs	r1, r2
 8007a54:	0018      	movs	r0, r3
 8007a56:	f000 fa9d 	bl	8007f94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	699a      	ldr	r2, [r3, #24]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2180      	movs	r1, #128	@ 0x80
 8007a66:	0109      	lsls	r1, r1, #4
 8007a68:	430a      	orrs	r2, r1
 8007a6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	699a      	ldr	r2, [r3, #24]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4954      	ldr	r1, [pc, #336]	@ (8007bc8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007a78:	400a      	ands	r2, r1
 8007a7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6999      	ldr	r1, [r3, #24]
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	021a      	lsls	r2, r3, #8
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	430a      	orrs	r2, r1
 8007a8e:	619a      	str	r2, [r3, #24]
      break;
 8007a90:	e08c      	b.n	8007bac <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	0011      	movs	r1, r2
 8007a9a:	0018      	movs	r0, r3
 8007a9c:	f000 fafe 	bl	800809c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	69da      	ldr	r2, [r3, #28]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2108      	movs	r1, #8
 8007aac:	430a      	orrs	r2, r1
 8007aae:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	69da      	ldr	r2, [r3, #28]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2104      	movs	r1, #4
 8007abc:	438a      	bics	r2, r1
 8007abe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	69d9      	ldr	r1, [r3, #28]
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	691a      	ldr	r2, [r3, #16]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	430a      	orrs	r2, r1
 8007ad0:	61da      	str	r2, [r3, #28]
      break;
 8007ad2:	e06b      	b.n	8007bac <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	0011      	movs	r1, r2
 8007adc:	0018      	movs	r0, r3
 8007ade:	f000 fb65 	bl	80081ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	69da      	ldr	r2, [r3, #28]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2180      	movs	r1, #128	@ 0x80
 8007aee:	0109      	lsls	r1, r1, #4
 8007af0:	430a      	orrs	r2, r1
 8007af2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	69da      	ldr	r2, [r3, #28]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4932      	ldr	r1, [pc, #200]	@ (8007bc8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007b00:	400a      	ands	r2, r1
 8007b02:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	69d9      	ldr	r1, [r3, #28]
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	021a      	lsls	r2, r3, #8
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	430a      	orrs	r2, r1
 8007b16:	61da      	str	r2, [r3, #28]
      break;
 8007b18:	e048      	b.n	8007bac <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	0011      	movs	r1, r2
 8007b22:	0018      	movs	r0, r3
 8007b24:	f000 fbac 	bl	8008280 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2108      	movs	r1, #8
 8007b34:	430a      	orrs	r2, r1
 8007b36:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2104      	movs	r1, #4
 8007b44:	438a      	bics	r2, r1
 8007b46:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	691a      	ldr	r2, [r3, #16]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	430a      	orrs	r2, r1
 8007b58:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007b5a:	e027      	b.n	8007bac <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	0011      	movs	r1, r2
 8007b64:	0018      	movs	r0, r3
 8007b66:	f000 fbeb 	bl	8008340 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2180      	movs	r1, #128	@ 0x80
 8007b76:	0109      	lsls	r1, r1, #4
 8007b78:	430a      	orrs	r2, r1
 8007b7a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4910      	ldr	r1, [pc, #64]	@ (8007bc8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007b88:	400a      	ands	r2, r1
 8007b8a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	021a      	lsls	r2, r3, #8
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	430a      	orrs	r2, r1
 8007b9e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007ba0:	e004      	b.n	8007bac <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8007ba2:	2317      	movs	r3, #23
 8007ba4:	18fb      	adds	r3, r7, r3
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	701a      	strb	r2, [r3, #0]
      break;
 8007baa:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	223c      	movs	r2, #60	@ 0x3c
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	5499      	strb	r1, [r3, r2]

  return status;
 8007bb4:	2317      	movs	r3, #23
 8007bb6:	18fb      	adds	r3, r7, r3
 8007bb8:	781b      	ldrb	r3, [r3, #0]
}
 8007bba:	0018      	movs	r0, r3
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	b006      	add	sp, #24
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	46c0      	nop			@ (mov r8, r8)
 8007bc4:	0800c35c 	.word	0x0800c35c
 8007bc8:	fffffbff 	.word	0xfffffbff

08007bcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bd6:	230f      	movs	r3, #15
 8007bd8:	18fb      	adds	r3, r7, r3
 8007bda:	2200      	movs	r2, #0
 8007bdc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	223c      	movs	r2, #60	@ 0x3c
 8007be2:	5c9b      	ldrb	r3, [r3, r2]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d101      	bne.n	8007bec <HAL_TIM_ConfigClockSource+0x20>
 8007be8:	2302      	movs	r3, #2
 8007bea:	e0bc      	b.n	8007d66 <HAL_TIM_ConfigClockSource+0x19a>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	223c      	movs	r2, #60	@ 0x3c
 8007bf0:	2101      	movs	r1, #1
 8007bf2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	223d      	movs	r2, #61	@ 0x3d
 8007bf8:	2102      	movs	r1, #2
 8007bfa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	4a5a      	ldr	r2, [pc, #360]	@ (8007d70 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007c08:	4013      	ands	r3, r2
 8007c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	4a59      	ldr	r2, [pc, #356]	@ (8007d74 <HAL_TIM_ConfigClockSource+0x1a8>)
 8007c10:	4013      	ands	r3, r2
 8007c12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2280      	movs	r2, #128	@ 0x80
 8007c22:	0192      	lsls	r2, r2, #6
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d040      	beq.n	8007caa <HAL_TIM_ConfigClockSource+0xde>
 8007c28:	2280      	movs	r2, #128	@ 0x80
 8007c2a:	0192      	lsls	r2, r2, #6
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d900      	bls.n	8007c32 <HAL_TIM_ConfigClockSource+0x66>
 8007c30:	e088      	b.n	8007d44 <HAL_TIM_ConfigClockSource+0x178>
 8007c32:	2280      	movs	r2, #128	@ 0x80
 8007c34:	0152      	lsls	r2, r2, #5
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d100      	bne.n	8007c3c <HAL_TIM_ConfigClockSource+0x70>
 8007c3a:	e088      	b.n	8007d4e <HAL_TIM_ConfigClockSource+0x182>
 8007c3c:	2280      	movs	r2, #128	@ 0x80
 8007c3e:	0152      	lsls	r2, r2, #5
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d900      	bls.n	8007c46 <HAL_TIM_ConfigClockSource+0x7a>
 8007c44:	e07e      	b.n	8007d44 <HAL_TIM_ConfigClockSource+0x178>
 8007c46:	2b70      	cmp	r3, #112	@ 0x70
 8007c48:	d018      	beq.n	8007c7c <HAL_TIM_ConfigClockSource+0xb0>
 8007c4a:	d900      	bls.n	8007c4e <HAL_TIM_ConfigClockSource+0x82>
 8007c4c:	e07a      	b.n	8007d44 <HAL_TIM_ConfigClockSource+0x178>
 8007c4e:	2b60      	cmp	r3, #96	@ 0x60
 8007c50:	d04f      	beq.n	8007cf2 <HAL_TIM_ConfigClockSource+0x126>
 8007c52:	d900      	bls.n	8007c56 <HAL_TIM_ConfigClockSource+0x8a>
 8007c54:	e076      	b.n	8007d44 <HAL_TIM_ConfigClockSource+0x178>
 8007c56:	2b50      	cmp	r3, #80	@ 0x50
 8007c58:	d03b      	beq.n	8007cd2 <HAL_TIM_ConfigClockSource+0x106>
 8007c5a:	d900      	bls.n	8007c5e <HAL_TIM_ConfigClockSource+0x92>
 8007c5c:	e072      	b.n	8007d44 <HAL_TIM_ConfigClockSource+0x178>
 8007c5e:	2b40      	cmp	r3, #64	@ 0x40
 8007c60:	d057      	beq.n	8007d12 <HAL_TIM_ConfigClockSource+0x146>
 8007c62:	d900      	bls.n	8007c66 <HAL_TIM_ConfigClockSource+0x9a>
 8007c64:	e06e      	b.n	8007d44 <HAL_TIM_ConfigClockSource+0x178>
 8007c66:	2b30      	cmp	r3, #48	@ 0x30
 8007c68:	d063      	beq.n	8007d32 <HAL_TIM_ConfigClockSource+0x166>
 8007c6a:	d86b      	bhi.n	8007d44 <HAL_TIM_ConfigClockSource+0x178>
 8007c6c:	2b20      	cmp	r3, #32
 8007c6e:	d060      	beq.n	8007d32 <HAL_TIM_ConfigClockSource+0x166>
 8007c70:	d868      	bhi.n	8007d44 <HAL_TIM_ConfigClockSource+0x178>
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d05d      	beq.n	8007d32 <HAL_TIM_ConfigClockSource+0x166>
 8007c76:	2b10      	cmp	r3, #16
 8007c78:	d05b      	beq.n	8007d32 <HAL_TIM_ConfigClockSource+0x166>
 8007c7a:	e063      	b.n	8007d44 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c8c:	f000 fc38 	bl	8008500 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	2277      	movs	r2, #119	@ 0x77
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68ba      	ldr	r2, [r7, #8]
 8007ca6:	609a      	str	r2, [r3, #8]
      break;
 8007ca8:	e052      	b.n	8007d50 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007cba:	f000 fc21 	bl	8008500 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	689a      	ldr	r2, [r3, #8]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2180      	movs	r1, #128	@ 0x80
 8007cca:	01c9      	lsls	r1, r1, #7
 8007ccc:	430a      	orrs	r2, r1
 8007cce:	609a      	str	r2, [r3, #8]
      break;
 8007cd0:	e03e      	b.n	8007d50 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cde:	001a      	movs	r2, r3
 8007ce0:	f000 fb92 	bl	8008408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2150      	movs	r1, #80	@ 0x50
 8007cea:	0018      	movs	r0, r3
 8007cec:	f000 fbec 	bl	80084c8 <TIM_ITRx_SetConfig>
      break;
 8007cf0:	e02e      	b.n	8007d50 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cfe:	001a      	movs	r2, r3
 8007d00:	f000 fbb0 	bl	8008464 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2160      	movs	r1, #96	@ 0x60
 8007d0a:	0018      	movs	r0, r3
 8007d0c:	f000 fbdc 	bl	80084c8 <TIM_ITRx_SetConfig>
      break;
 8007d10:	e01e      	b.n	8007d50 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d1e:	001a      	movs	r2, r3
 8007d20:	f000 fb72 	bl	8008408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2140      	movs	r1, #64	@ 0x40
 8007d2a:	0018      	movs	r0, r3
 8007d2c:	f000 fbcc 	bl	80084c8 <TIM_ITRx_SetConfig>
      break;
 8007d30:	e00e      	b.n	8007d50 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	0019      	movs	r1, r3
 8007d3c:	0010      	movs	r0, r2
 8007d3e:	f000 fbc3 	bl	80084c8 <TIM_ITRx_SetConfig>
      break;
 8007d42:	e005      	b.n	8007d50 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8007d44:	230f      	movs	r3, #15
 8007d46:	18fb      	adds	r3, r7, r3
 8007d48:	2201      	movs	r2, #1
 8007d4a:	701a      	strb	r2, [r3, #0]
      break;
 8007d4c:	e000      	b.n	8007d50 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8007d4e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	223d      	movs	r2, #61	@ 0x3d
 8007d54:	2101      	movs	r1, #1
 8007d56:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	223c      	movs	r2, #60	@ 0x3c
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	5499      	strb	r1, [r3, r2]

  return status;
 8007d60:	230f      	movs	r3, #15
 8007d62:	18fb      	adds	r3, r7, r3
 8007d64:	781b      	ldrb	r3, [r3, #0]
}
 8007d66:	0018      	movs	r0, r3
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	b004      	add	sp, #16
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	46c0      	nop			@ (mov r8, r8)
 8007d70:	ffceff88 	.word	0xffceff88
 8007d74:	ffff00ff 	.word	0xffff00ff

08007d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a36      	ldr	r2, [pc, #216]	@ (8007e64 <TIM_Base_SetConfig+0xec>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d003      	beq.n	8007d98 <TIM_Base_SetConfig+0x20>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a35      	ldr	r2, [pc, #212]	@ (8007e68 <TIM_Base_SetConfig+0xf0>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d108      	bne.n	8007daa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2270      	movs	r2, #112	@ 0x70
 8007d9c:	4393      	bics	r3, r2
 8007d9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a2d      	ldr	r2, [pc, #180]	@ (8007e64 <TIM_Base_SetConfig+0xec>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d013      	beq.n	8007dda <TIM_Base_SetConfig+0x62>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a2c      	ldr	r2, [pc, #176]	@ (8007e68 <TIM_Base_SetConfig+0xf0>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d00f      	beq.n	8007dda <TIM_Base_SetConfig+0x62>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a2b      	ldr	r2, [pc, #172]	@ (8007e6c <TIM_Base_SetConfig+0xf4>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d00b      	beq.n	8007dda <TIM_Base_SetConfig+0x62>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a2a      	ldr	r2, [pc, #168]	@ (8007e70 <TIM_Base_SetConfig+0xf8>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d007      	beq.n	8007dda <TIM_Base_SetConfig+0x62>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a29      	ldr	r2, [pc, #164]	@ (8007e74 <TIM_Base_SetConfig+0xfc>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d003      	beq.n	8007dda <TIM_Base_SetConfig+0x62>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a28      	ldr	r2, [pc, #160]	@ (8007e78 <TIM_Base_SetConfig+0x100>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d108      	bne.n	8007dec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	4a27      	ldr	r2, [pc, #156]	@ (8007e7c <TIM_Base_SetConfig+0x104>)
 8007dde:	4013      	ands	r3, r2
 8007de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2280      	movs	r2, #128	@ 0x80
 8007df0:	4393      	bics	r3, r2
 8007df2:	001a      	movs	r2, r3
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	695b      	ldr	r3, [r3, #20]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	689a      	ldr	r2, [r3, #8]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a13      	ldr	r2, [pc, #76]	@ (8007e64 <TIM_Base_SetConfig+0xec>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d00b      	beq.n	8007e32 <TIM_Base_SetConfig+0xba>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a14      	ldr	r2, [pc, #80]	@ (8007e70 <TIM_Base_SetConfig+0xf8>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d007      	beq.n	8007e32 <TIM_Base_SetConfig+0xba>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a13      	ldr	r2, [pc, #76]	@ (8007e74 <TIM_Base_SetConfig+0xfc>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d003      	beq.n	8007e32 <TIM_Base_SetConfig+0xba>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a12      	ldr	r2, [pc, #72]	@ (8007e78 <TIM_Base_SetConfig+0x100>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d103      	bne.n	8007e3a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	691a      	ldr	r2, [r3, #16]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	2201      	movs	r2, #1
 8007e46:	4013      	ands	r3, r2
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d106      	bne.n	8007e5a <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	2201      	movs	r2, #1
 8007e52:	4393      	bics	r3, r2
 8007e54:	001a      	movs	r2, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	611a      	str	r2, [r3, #16]
  }
}
 8007e5a:	46c0      	nop			@ (mov r8, r8)
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	b004      	add	sp, #16
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	46c0      	nop			@ (mov r8, r8)
 8007e64:	40012c00 	.word	0x40012c00
 8007e68:	40000400 	.word	0x40000400
 8007e6c:	40002000 	.word	0x40002000
 8007e70:	40014000 	.word	0x40014000
 8007e74:	40014400 	.word	0x40014400
 8007e78:	40014800 	.word	0x40014800
 8007e7c:	fffffcff 	.word	0xfffffcff

08007e80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
 8007e8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a1b      	ldr	r3, [r3, #32]
 8007e94:	2201      	movs	r2, #1
 8007e96:	4393      	bics	r3, r2
 8007e98:	001a      	movs	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	4a32      	ldr	r2, [pc, #200]	@ (8007f78 <TIM_OC1_SetConfig+0xf8>)
 8007eae:	4013      	ands	r3, r2
 8007eb0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2203      	movs	r2, #3
 8007eb6:	4393      	bics	r3, r2
 8007eb8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	2202      	movs	r2, #2
 8007ec8:	4393      	bics	r3, r2
 8007eca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	697a      	ldr	r2, [r7, #20]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a28      	ldr	r2, [pc, #160]	@ (8007f7c <TIM_OC1_SetConfig+0xfc>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d00b      	beq.n	8007ef6 <TIM_OC1_SetConfig+0x76>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a27      	ldr	r2, [pc, #156]	@ (8007f80 <TIM_OC1_SetConfig+0x100>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d007      	beq.n	8007ef6 <TIM_OC1_SetConfig+0x76>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a26      	ldr	r2, [pc, #152]	@ (8007f84 <TIM_OC1_SetConfig+0x104>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d003      	beq.n	8007ef6 <TIM_OC1_SetConfig+0x76>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a25      	ldr	r2, [pc, #148]	@ (8007f88 <TIM_OC1_SetConfig+0x108>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d10c      	bne.n	8007f10 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	2208      	movs	r2, #8
 8007efa:	4393      	bics	r3, r2
 8007efc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	2204      	movs	r2, #4
 8007f0c:	4393      	bics	r3, r2
 8007f0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a1a      	ldr	r2, [pc, #104]	@ (8007f7c <TIM_OC1_SetConfig+0xfc>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d00b      	beq.n	8007f30 <TIM_OC1_SetConfig+0xb0>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a19      	ldr	r2, [pc, #100]	@ (8007f80 <TIM_OC1_SetConfig+0x100>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d007      	beq.n	8007f30 <TIM_OC1_SetConfig+0xb0>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a18      	ldr	r2, [pc, #96]	@ (8007f84 <TIM_OC1_SetConfig+0x104>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d003      	beq.n	8007f30 <TIM_OC1_SetConfig+0xb0>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a17      	ldr	r2, [pc, #92]	@ (8007f88 <TIM_OC1_SetConfig+0x108>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d111      	bne.n	8007f54 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	4a16      	ldr	r2, [pc, #88]	@ (8007f8c <TIM_OC1_SetConfig+0x10c>)
 8007f34:	4013      	ands	r3, r2
 8007f36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	4a15      	ldr	r2, [pc, #84]	@ (8007f90 <TIM_OC1_SetConfig+0x110>)
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	695b      	ldr	r3, [r3, #20]
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	693a      	ldr	r2, [r7, #16]
 8007f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	685a      	ldr	r2, [r3, #4]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	621a      	str	r2, [r3, #32]
}
 8007f6e:	46c0      	nop			@ (mov r8, r8)
 8007f70:	46bd      	mov	sp, r7
 8007f72:	b006      	add	sp, #24
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	46c0      	nop			@ (mov r8, r8)
 8007f78:	fffeff8f 	.word	0xfffeff8f
 8007f7c:	40012c00 	.word	0x40012c00
 8007f80:	40014000 	.word	0x40014000
 8007f84:	40014400 	.word	0x40014400
 8007f88:	40014800 	.word	0x40014800
 8007f8c:	fffffeff 	.word	0xfffffeff
 8007f90:	fffffdff 	.word	0xfffffdff

08007f94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b086      	sub	sp, #24
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6a1b      	ldr	r3, [r3, #32]
 8007fa8:	2210      	movs	r2, #16
 8007faa:	4393      	bics	r3, r2
 8007fac:	001a      	movs	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	4a2e      	ldr	r2, [pc, #184]	@ (800807c <TIM_OC2_SetConfig+0xe8>)
 8007fc2:	4013      	ands	r3, r2
 8007fc4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	4a2d      	ldr	r2, [pc, #180]	@ (8008080 <TIM_OC2_SetConfig+0xec>)
 8007fca:	4013      	ands	r3, r2
 8007fcc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	021b      	lsls	r3, r3, #8
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	2220      	movs	r2, #32
 8007fde:	4393      	bics	r3, r2
 8007fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	011b      	lsls	r3, r3, #4
 8007fe8:	697a      	ldr	r2, [r7, #20]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a24      	ldr	r2, [pc, #144]	@ (8008084 <TIM_OC2_SetConfig+0xf0>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d10d      	bne.n	8008012 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	2280      	movs	r2, #128	@ 0x80
 8007ffa:	4393      	bics	r3, r2
 8007ffc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	011b      	lsls	r3, r3, #4
 8008004:	697a      	ldr	r2, [r7, #20]
 8008006:	4313      	orrs	r3, r2
 8008008:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	2240      	movs	r2, #64	@ 0x40
 800800e:	4393      	bics	r3, r2
 8008010:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a1b      	ldr	r2, [pc, #108]	@ (8008084 <TIM_OC2_SetConfig+0xf0>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d00b      	beq.n	8008032 <TIM_OC2_SetConfig+0x9e>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4a1a      	ldr	r2, [pc, #104]	@ (8008088 <TIM_OC2_SetConfig+0xf4>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d007      	beq.n	8008032 <TIM_OC2_SetConfig+0x9e>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4a19      	ldr	r2, [pc, #100]	@ (800808c <TIM_OC2_SetConfig+0xf8>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d003      	beq.n	8008032 <TIM_OC2_SetConfig+0x9e>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4a18      	ldr	r2, [pc, #96]	@ (8008090 <TIM_OC2_SetConfig+0xfc>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d113      	bne.n	800805a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	4a17      	ldr	r2, [pc, #92]	@ (8008094 <TIM_OC2_SetConfig+0x100>)
 8008036:	4013      	ands	r3, r2
 8008038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	4a16      	ldr	r2, [pc, #88]	@ (8008098 <TIM_OC2_SetConfig+0x104>)
 800803e:	4013      	ands	r3, r2
 8008040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	4313      	orrs	r3, r2
 800804c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	693a      	ldr	r2, [r7, #16]
 8008056:	4313      	orrs	r3, r2
 8008058:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	693a      	ldr	r2, [r7, #16]
 800805e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	685a      	ldr	r2, [r3, #4]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	697a      	ldr	r2, [r7, #20]
 8008072:	621a      	str	r2, [r3, #32]
}
 8008074:	46c0      	nop			@ (mov r8, r8)
 8008076:	46bd      	mov	sp, r7
 8008078:	b006      	add	sp, #24
 800807a:	bd80      	pop	{r7, pc}
 800807c:	feff8fff 	.word	0xfeff8fff
 8008080:	fffffcff 	.word	0xfffffcff
 8008084:	40012c00 	.word	0x40012c00
 8008088:	40014000 	.word	0x40014000
 800808c:	40014400 	.word	0x40014400
 8008090:	40014800 	.word	0x40014800
 8008094:	fffffbff 	.word	0xfffffbff
 8008098:	fffff7ff 	.word	0xfffff7ff

0800809c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a1b      	ldr	r3, [r3, #32]
 80080aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6a1b      	ldr	r3, [r3, #32]
 80080b0:	4a33      	ldr	r2, [pc, #204]	@ (8008180 <TIM_OC3_SetConfig+0xe4>)
 80080b2:	401a      	ands	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	69db      	ldr	r3, [r3, #28]
 80080c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	4a2f      	ldr	r2, [pc, #188]	@ (8008184 <TIM_OC3_SetConfig+0xe8>)
 80080c8:	4013      	ands	r3, r2
 80080ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2203      	movs	r2, #3
 80080d0:	4393      	bics	r3, r2
 80080d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	4313      	orrs	r3, r2
 80080dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	4a29      	ldr	r2, [pc, #164]	@ (8008188 <TIM_OC3_SetConfig+0xec>)
 80080e2:	4013      	ands	r3, r2
 80080e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	021b      	lsls	r3, r3, #8
 80080ec:	697a      	ldr	r2, [r7, #20]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a25      	ldr	r2, [pc, #148]	@ (800818c <TIM_OC3_SetConfig+0xf0>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d10d      	bne.n	8008116 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	4a24      	ldr	r2, [pc, #144]	@ (8008190 <TIM_OC3_SetConfig+0xf4>)
 80080fe:	4013      	ands	r3, r2
 8008100:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	021b      	lsls	r3, r3, #8
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	4313      	orrs	r3, r2
 800810c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	4a20      	ldr	r2, [pc, #128]	@ (8008194 <TIM_OC3_SetConfig+0xf8>)
 8008112:	4013      	ands	r3, r2
 8008114:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a1c      	ldr	r2, [pc, #112]	@ (800818c <TIM_OC3_SetConfig+0xf0>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d00b      	beq.n	8008136 <TIM_OC3_SetConfig+0x9a>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a1d      	ldr	r2, [pc, #116]	@ (8008198 <TIM_OC3_SetConfig+0xfc>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d007      	beq.n	8008136 <TIM_OC3_SetConfig+0x9a>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a1c      	ldr	r2, [pc, #112]	@ (800819c <TIM_OC3_SetConfig+0x100>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d003      	beq.n	8008136 <TIM_OC3_SetConfig+0x9a>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a1b      	ldr	r2, [pc, #108]	@ (80081a0 <TIM_OC3_SetConfig+0x104>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d113      	bne.n	800815e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	4a1a      	ldr	r2, [pc, #104]	@ (80081a4 <TIM_OC3_SetConfig+0x108>)
 800813a:	4013      	ands	r3, r2
 800813c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	4a19      	ldr	r2, [pc, #100]	@ (80081a8 <TIM_OC3_SetConfig+0x10c>)
 8008142:	4013      	ands	r3, r2
 8008144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	695b      	ldr	r3, [r3, #20]
 800814a:	011b      	lsls	r3, r3, #4
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	4313      	orrs	r3, r2
 8008150:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	011b      	lsls	r3, r3, #4
 8008158:	693a      	ldr	r2, [r7, #16]
 800815a:	4313      	orrs	r3, r2
 800815c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	693a      	ldr	r2, [r7, #16]
 8008162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	685a      	ldr	r2, [r3, #4]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	697a      	ldr	r2, [r7, #20]
 8008176:	621a      	str	r2, [r3, #32]
}
 8008178:	46c0      	nop			@ (mov r8, r8)
 800817a:	46bd      	mov	sp, r7
 800817c:	b006      	add	sp, #24
 800817e:	bd80      	pop	{r7, pc}
 8008180:	fffffeff 	.word	0xfffffeff
 8008184:	fffeff8f 	.word	0xfffeff8f
 8008188:	fffffdff 	.word	0xfffffdff
 800818c:	40012c00 	.word	0x40012c00
 8008190:	fffff7ff 	.word	0xfffff7ff
 8008194:	fffffbff 	.word	0xfffffbff
 8008198:	40014000 	.word	0x40014000
 800819c:	40014400 	.word	0x40014400
 80081a0:	40014800 	.word	0x40014800
 80081a4:	ffffefff 	.word	0xffffefff
 80081a8:	ffffdfff 	.word	0xffffdfff

080081ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a1b      	ldr	r3, [r3, #32]
 80081ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a1b      	ldr	r3, [r3, #32]
 80081c0:	4a26      	ldr	r2, [pc, #152]	@ (800825c <TIM_OC4_SetConfig+0xb0>)
 80081c2:	401a      	ands	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	69db      	ldr	r3, [r3, #28]
 80081d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	4a22      	ldr	r2, [pc, #136]	@ (8008260 <TIM_OC4_SetConfig+0xb4>)
 80081d8:	4013      	ands	r3, r2
 80081da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	4a21      	ldr	r2, [pc, #132]	@ (8008264 <TIM_OC4_SetConfig+0xb8>)
 80081e0:	4013      	ands	r3, r2
 80081e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	021b      	lsls	r3, r3, #8
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	4a1d      	ldr	r2, [pc, #116]	@ (8008268 <TIM_OC4_SetConfig+0xbc>)
 80081f4:	4013      	ands	r3, r2
 80081f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	031b      	lsls	r3, r3, #12
 80081fe:	693a      	ldr	r2, [r7, #16]
 8008200:	4313      	orrs	r3, r2
 8008202:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a19      	ldr	r2, [pc, #100]	@ (800826c <TIM_OC4_SetConfig+0xc0>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d00b      	beq.n	8008224 <TIM_OC4_SetConfig+0x78>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a18      	ldr	r2, [pc, #96]	@ (8008270 <TIM_OC4_SetConfig+0xc4>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d007      	beq.n	8008224 <TIM_OC4_SetConfig+0x78>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a17      	ldr	r2, [pc, #92]	@ (8008274 <TIM_OC4_SetConfig+0xc8>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d003      	beq.n	8008224 <TIM_OC4_SetConfig+0x78>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a16      	ldr	r2, [pc, #88]	@ (8008278 <TIM_OC4_SetConfig+0xcc>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d109      	bne.n	8008238 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	4a15      	ldr	r2, [pc, #84]	@ (800827c <TIM_OC4_SetConfig+0xd0>)
 8008228:	4013      	ands	r3, r2
 800822a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	695b      	ldr	r3, [r3, #20]
 8008230:	019b      	lsls	r3, r3, #6
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	4313      	orrs	r3, r2
 8008236:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	697a      	ldr	r2, [r7, #20]
 800823c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	693a      	ldr	r2, [r7, #16]
 8008250:	621a      	str	r2, [r3, #32]
}
 8008252:	46c0      	nop			@ (mov r8, r8)
 8008254:	46bd      	mov	sp, r7
 8008256:	b006      	add	sp, #24
 8008258:	bd80      	pop	{r7, pc}
 800825a:	46c0      	nop			@ (mov r8, r8)
 800825c:	ffffefff 	.word	0xffffefff
 8008260:	feff8fff 	.word	0xfeff8fff
 8008264:	fffffcff 	.word	0xfffffcff
 8008268:	ffffdfff 	.word	0xffffdfff
 800826c:	40012c00 	.word	0x40012c00
 8008270:	40014000 	.word	0x40014000
 8008274:	40014400 	.word	0x40014400
 8008278:	40014800 	.word	0x40014800
 800827c:	ffffbfff 	.word	0xffffbfff

08008280 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b086      	sub	sp, #24
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a1b      	ldr	r3, [r3, #32]
 800828e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6a1b      	ldr	r3, [r3, #32]
 8008294:	4a23      	ldr	r2, [pc, #140]	@ (8008324 <TIM_OC5_SetConfig+0xa4>)
 8008296:	401a      	ands	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	4a1f      	ldr	r2, [pc, #124]	@ (8008328 <TIM_OC5_SetConfig+0xa8>)
 80082ac:	4013      	ands	r3, r2
 80082ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	4a1b      	ldr	r2, [pc, #108]	@ (800832c <TIM_OC5_SetConfig+0xac>)
 80082be:	4013      	ands	r3, r2
 80082c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	041b      	lsls	r3, r3, #16
 80082c8:	693a      	ldr	r2, [r7, #16]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a17      	ldr	r2, [pc, #92]	@ (8008330 <TIM_OC5_SetConfig+0xb0>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d00b      	beq.n	80082ee <TIM_OC5_SetConfig+0x6e>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a16      	ldr	r2, [pc, #88]	@ (8008334 <TIM_OC5_SetConfig+0xb4>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d007      	beq.n	80082ee <TIM_OC5_SetConfig+0x6e>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a15      	ldr	r2, [pc, #84]	@ (8008338 <TIM_OC5_SetConfig+0xb8>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d003      	beq.n	80082ee <TIM_OC5_SetConfig+0x6e>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a14      	ldr	r2, [pc, #80]	@ (800833c <TIM_OC5_SetConfig+0xbc>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d109      	bne.n	8008302 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	4a0c      	ldr	r2, [pc, #48]	@ (8008324 <TIM_OC5_SetConfig+0xa4>)
 80082f2:	4013      	ands	r3, r2
 80082f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	695b      	ldr	r3, [r3, #20]
 80082fa:	021b      	lsls	r3, r3, #8
 80082fc:	697a      	ldr	r2, [r7, #20]
 80082fe:	4313      	orrs	r3, r2
 8008300:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	697a      	ldr	r2, [r7, #20]
 8008306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	685a      	ldr	r2, [r3, #4]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	621a      	str	r2, [r3, #32]
}
 800831c:	46c0      	nop			@ (mov r8, r8)
 800831e:	46bd      	mov	sp, r7
 8008320:	b006      	add	sp, #24
 8008322:	bd80      	pop	{r7, pc}
 8008324:	fffeffff 	.word	0xfffeffff
 8008328:	fffeff8f 	.word	0xfffeff8f
 800832c:	fffdffff 	.word	0xfffdffff
 8008330:	40012c00 	.word	0x40012c00
 8008334:	40014000 	.word	0x40014000
 8008338:	40014400 	.word	0x40014400
 800833c:	40014800 	.word	0x40014800

08008340 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a1b      	ldr	r3, [r3, #32]
 800834e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a1b      	ldr	r3, [r3, #32]
 8008354:	4a24      	ldr	r2, [pc, #144]	@ (80083e8 <TIM_OC6_SetConfig+0xa8>)
 8008356:	401a      	ands	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	4a20      	ldr	r2, [pc, #128]	@ (80083ec <TIM_OC6_SetConfig+0xac>)
 800836c:	4013      	ands	r3, r2
 800836e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	021b      	lsls	r3, r3, #8
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	4313      	orrs	r3, r2
 800837a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	4a1c      	ldr	r2, [pc, #112]	@ (80083f0 <TIM_OC6_SetConfig+0xb0>)
 8008380:	4013      	ands	r3, r2
 8008382:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	051b      	lsls	r3, r3, #20
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	4313      	orrs	r3, r2
 800838e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a18      	ldr	r2, [pc, #96]	@ (80083f4 <TIM_OC6_SetConfig+0xb4>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d00b      	beq.n	80083b0 <TIM_OC6_SetConfig+0x70>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a17      	ldr	r2, [pc, #92]	@ (80083f8 <TIM_OC6_SetConfig+0xb8>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d007      	beq.n	80083b0 <TIM_OC6_SetConfig+0x70>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a16      	ldr	r2, [pc, #88]	@ (80083fc <TIM_OC6_SetConfig+0xbc>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d003      	beq.n	80083b0 <TIM_OC6_SetConfig+0x70>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a15      	ldr	r2, [pc, #84]	@ (8008400 <TIM_OC6_SetConfig+0xc0>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d109      	bne.n	80083c4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	4a14      	ldr	r2, [pc, #80]	@ (8008404 <TIM_OC6_SetConfig+0xc4>)
 80083b4:	4013      	ands	r3, r2
 80083b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	695b      	ldr	r3, [r3, #20]
 80083bc:	029b      	lsls	r3, r3, #10
 80083be:	697a      	ldr	r2, [r7, #20]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	697a      	ldr	r2, [r7, #20]
 80083c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	685a      	ldr	r2, [r3, #4]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	693a      	ldr	r2, [r7, #16]
 80083dc:	621a      	str	r2, [r3, #32]
}
 80083de:	46c0      	nop			@ (mov r8, r8)
 80083e0:	46bd      	mov	sp, r7
 80083e2:	b006      	add	sp, #24
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	46c0      	nop			@ (mov r8, r8)
 80083e8:	ffefffff 	.word	0xffefffff
 80083ec:	feff8fff 	.word	0xfeff8fff
 80083f0:	ffdfffff 	.word	0xffdfffff
 80083f4:	40012c00 	.word	0x40012c00
 80083f8:	40014000 	.word	0x40014000
 80083fc:	40014400 	.word	0x40014400
 8008400:	40014800 	.word	0x40014800
 8008404:	fffbffff 	.word	0xfffbffff

08008408 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b086      	sub	sp, #24
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6a1b      	ldr	r3, [r3, #32]
 8008418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6a1b      	ldr	r3, [r3, #32]
 800841e:	2201      	movs	r2, #1
 8008420:	4393      	bics	r3, r2
 8008422:	001a      	movs	r2, r3
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	699b      	ldr	r3, [r3, #24]
 800842c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	22f0      	movs	r2, #240	@ 0xf0
 8008432:	4393      	bics	r3, r2
 8008434:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	011b      	lsls	r3, r3, #4
 800843a:	693a      	ldr	r2, [r7, #16]
 800843c:	4313      	orrs	r3, r2
 800843e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	220a      	movs	r2, #10
 8008444:	4393      	bics	r3, r2
 8008446:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008448:	697a      	ldr	r2, [r7, #20]
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	4313      	orrs	r3, r2
 800844e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	621a      	str	r2, [r3, #32]
}
 800845c:	46c0      	nop			@ (mov r8, r8)
 800845e:	46bd      	mov	sp, r7
 8008460:	b006      	add	sp, #24
 8008462:	bd80      	pop	{r7, pc}

08008464 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6a1b      	ldr	r3, [r3, #32]
 8008474:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6a1b      	ldr	r3, [r3, #32]
 800847a:	2210      	movs	r2, #16
 800847c:	4393      	bics	r3, r2
 800847e:	001a      	movs	r2, r3
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	4a0d      	ldr	r2, [pc, #52]	@ (80084c4 <TIM_TI2_ConfigInputStage+0x60>)
 800848e:	4013      	ands	r3, r2
 8008490:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	031b      	lsls	r3, r3, #12
 8008496:	693a      	ldr	r2, [r7, #16]
 8008498:	4313      	orrs	r3, r2
 800849a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	22a0      	movs	r2, #160	@ 0xa0
 80084a0:	4393      	bics	r3, r2
 80084a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	011b      	lsls	r3, r3, #4
 80084a8:	697a      	ldr	r2, [r7, #20]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	697a      	ldr	r2, [r7, #20]
 80084b8:	621a      	str	r2, [r3, #32]
}
 80084ba:	46c0      	nop			@ (mov r8, r8)
 80084bc:	46bd      	mov	sp, r7
 80084be:	b006      	add	sp, #24
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	46c0      	nop			@ (mov r8, r8)
 80084c4:	ffff0fff 	.word	0xffff0fff

080084c8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	4a08      	ldr	r2, [pc, #32]	@ (80084fc <TIM_ITRx_SetConfig+0x34>)
 80084dc:	4013      	ands	r3, r2
 80084de:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084e0:	683a      	ldr	r2, [r7, #0]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	2207      	movs	r2, #7
 80084e8:	4313      	orrs	r3, r2
 80084ea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	609a      	str	r2, [r3, #8]
}
 80084f2:	46c0      	nop			@ (mov r8, r8)
 80084f4:	46bd      	mov	sp, r7
 80084f6:	b004      	add	sp, #16
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	46c0      	nop			@ (mov r8, r8)
 80084fc:	ffcfff8f 	.word	0xffcfff8f

08008500 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b086      	sub	sp, #24
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	607a      	str	r2, [r7, #4]
 800850c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	4a09      	ldr	r2, [pc, #36]	@ (800853c <TIM_ETR_SetConfig+0x3c>)
 8008518:	4013      	ands	r3, r2
 800851a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	021a      	lsls	r2, r3, #8
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	431a      	orrs	r2, r3
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	4313      	orrs	r3, r2
 8008528:	697a      	ldr	r2, [r7, #20]
 800852a:	4313      	orrs	r3, r2
 800852c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	697a      	ldr	r2, [r7, #20]
 8008532:	609a      	str	r2, [r3, #8]
}
 8008534:	46c0      	nop			@ (mov r8, r8)
 8008536:	46bd      	mov	sp, r7
 8008538:	b006      	add	sp, #24
 800853a:	bd80      	pop	{r7, pc}
 800853c:	ffff00ff 	.word	0xffff00ff

08008540 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b086      	sub	sp, #24
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	221f      	movs	r2, #31
 8008550:	4013      	ands	r3, r2
 8008552:	2201      	movs	r2, #1
 8008554:	409a      	lsls	r2, r3
 8008556:	0013      	movs	r3, r2
 8008558:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6a1b      	ldr	r3, [r3, #32]
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	43d2      	mvns	r2, r2
 8008562:	401a      	ands	r2, r3
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6a1a      	ldr	r2, [r3, #32]
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	211f      	movs	r1, #31
 8008570:	400b      	ands	r3, r1
 8008572:	6879      	ldr	r1, [r7, #4]
 8008574:	4099      	lsls	r1, r3
 8008576:	000b      	movs	r3, r1
 8008578:	431a      	orrs	r2, r3
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	621a      	str	r2, [r3, #32]
}
 800857e:	46c0      	nop			@ (mov r8, r8)
 8008580:	46bd      	mov	sp, r7
 8008582:	b006      	add	sp, #24
 8008584:	bd80      	pop	{r7, pc}
	...

08008588 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	223c      	movs	r2, #60	@ 0x3c
 8008596:	5c9b      	ldrb	r3, [r3, r2]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d101      	bne.n	80085a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800859c:	2302      	movs	r3, #2
 800859e:	e04f      	b.n	8008640 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	223c      	movs	r2, #60	@ 0x3c
 80085a4:	2101      	movs	r1, #1
 80085a6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	223d      	movs	r2, #61	@ 0x3d
 80085ac:	2102      	movs	r1, #2
 80085ae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a20      	ldr	r2, [pc, #128]	@ (8008648 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d108      	bne.n	80085dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	4a1f      	ldr	r2, [pc, #124]	@ (800864c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80085ce:	4013      	ands	r3, r2
 80085d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	4313      	orrs	r3, r2
 80085da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2270      	movs	r2, #112	@ 0x70
 80085e0:	4393      	bics	r3, r2
 80085e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	68fa      	ldr	r2, [r7, #12]
 80085f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a13      	ldr	r2, [pc, #76]	@ (8008648 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d009      	beq.n	8008614 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a12      	ldr	r2, [pc, #72]	@ (8008650 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d004      	beq.n	8008614 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a11      	ldr	r2, [pc, #68]	@ (8008654 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d10c      	bne.n	800862e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	2280      	movs	r2, #128	@ 0x80
 8008618:	4393      	bics	r3, r2
 800861a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	68ba      	ldr	r2, [r7, #8]
 8008622:	4313      	orrs	r3, r2
 8008624:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68ba      	ldr	r2, [r7, #8]
 800862c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	223d      	movs	r2, #61	@ 0x3d
 8008632:	2101      	movs	r1, #1
 8008634:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	223c      	movs	r2, #60	@ 0x3c
 800863a:	2100      	movs	r1, #0
 800863c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	0018      	movs	r0, r3
 8008642:	46bd      	mov	sp, r7
 8008644:	b004      	add	sp, #16
 8008646:	bd80      	pop	{r7, pc}
 8008648:	40012c00 	.word	0x40012c00
 800864c:	ff0fffff 	.word	0xff0fffff
 8008650:	40000400 	.word	0x40000400
 8008654:	40014000 	.word	0x40014000

08008658 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008662:	2300      	movs	r3, #0
 8008664:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	223c      	movs	r2, #60	@ 0x3c
 800866a:	5c9b      	ldrb	r3, [r3, r2]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d101      	bne.n	8008674 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008670:	2302      	movs	r3, #2
 8008672:	e06f      	b.n	8008754 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	223c      	movs	r2, #60	@ 0x3c
 8008678:	2101      	movs	r1, #1
 800867a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	22ff      	movs	r2, #255	@ 0xff
 8008680:	4393      	bics	r3, r2
 8008682:	001a      	movs	r2, r3
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	4313      	orrs	r3, r2
 800868a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	4a33      	ldr	r2, [pc, #204]	@ (800875c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8008690:	401a      	ands	r2, r3
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	4313      	orrs	r3, r2
 8008698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	4a30      	ldr	r2, [pc, #192]	@ (8008760 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800869e:	401a      	ands	r2, r3
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	4a2e      	ldr	r2, [pc, #184]	@ (8008764 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80086ac:	401a      	ands	r2, r3
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	4a2b      	ldr	r2, [pc, #172]	@ (8008768 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80086ba:	401a      	ands	r2, r3
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	691b      	ldr	r3, [r3, #16]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	4a29      	ldr	r2, [pc, #164]	@ (800876c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80086c8:	401a      	ands	r2, r3
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	695b      	ldr	r3, [r3, #20]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	4a26      	ldr	r2, [pc, #152]	@ (8008770 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80086d6:	401a      	ands	r2, r3
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086dc:	4313      	orrs	r3, r2
 80086de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	4a24      	ldr	r2, [pc, #144]	@ (8008774 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80086e4:	401a      	ands	r2, r3
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	699b      	ldr	r3, [r3, #24]
 80086ea:	041b      	lsls	r3, r3, #16
 80086ec:	4313      	orrs	r3, r2
 80086ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	4a21      	ldr	r2, [pc, #132]	@ (8008778 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80086f4:	401a      	ands	r2, r3
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	69db      	ldr	r3, [r3, #28]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a1e      	ldr	r2, [pc, #120]	@ (800877c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d11c      	bne.n	8008742 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	4a1d      	ldr	r2, [pc, #116]	@ (8008780 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800870c:	401a      	ands	r2, r3
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008712:	051b      	lsls	r3, r3, #20
 8008714:	4313      	orrs	r3, r2
 8008716:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	4a1a      	ldr	r2, [pc, #104]	@ (8008784 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800871c:	401a      	ands	r2, r3
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	6a1b      	ldr	r3, [r3, #32]
 8008722:	4313      	orrs	r3, r2
 8008724:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	4a17      	ldr	r2, [pc, #92]	@ (8008788 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800872a:	401a      	ands	r2, r3
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008730:	4313      	orrs	r3, r2
 8008732:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	4a15      	ldr	r2, [pc, #84]	@ (800878c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008738:	401a      	ands	r2, r3
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800873e:	4313      	orrs	r3, r2
 8008740:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	223c      	movs	r2, #60	@ 0x3c
 800874e:	2100      	movs	r1, #0
 8008750:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	0018      	movs	r0, r3
 8008756:	46bd      	mov	sp, r7
 8008758:	b004      	add	sp, #16
 800875a:	bd80      	pop	{r7, pc}
 800875c:	fffffcff 	.word	0xfffffcff
 8008760:	fffffbff 	.word	0xfffffbff
 8008764:	fffff7ff 	.word	0xfffff7ff
 8008768:	ffffefff 	.word	0xffffefff
 800876c:	ffffdfff 	.word	0xffffdfff
 8008770:	ffffbfff 	.word	0xffffbfff
 8008774:	fff0ffff 	.word	0xfff0ffff
 8008778:	efffffff 	.word	0xefffffff
 800877c:	40012c00 	.word	0x40012c00
 8008780:	ff0fffff 	.word	0xff0fffff
 8008784:	feffffff 	.word	0xfeffffff
 8008788:	fdffffff 	.word	0xfdffffff
 800878c:	dfffffff 	.word	0xdfffffff

08008790 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d101      	bne.n	80087a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	e046      	b.n	8008830 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2288      	movs	r2, #136	@ 0x88
 80087a6:	589b      	ldr	r3, [r3, r2]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d107      	bne.n	80087bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2284      	movs	r2, #132	@ 0x84
 80087b0:	2100      	movs	r1, #0
 80087b2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	0018      	movs	r0, r3
 80087b8:	f7fb fb30 	bl	8003e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2288      	movs	r2, #136	@ 0x88
 80087c0:	2124      	movs	r1, #36	@ 0x24
 80087c2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2101      	movs	r1, #1
 80087d0:	438a      	bics	r2, r1
 80087d2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d003      	beq.n	80087e4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	0018      	movs	r0, r3
 80087e0:	f000 fa74 	bl	8008ccc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	0018      	movs	r0, r3
 80087e8:	f000 f8cc 	bl	8008984 <UART_SetConfig>
 80087ec:	0003      	movs	r3, r0
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d101      	bne.n	80087f6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e01c      	b.n	8008830 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	685a      	ldr	r2, [r3, #4]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	490d      	ldr	r1, [pc, #52]	@ (8008838 <HAL_UART_Init+0xa8>)
 8008802:	400a      	ands	r2, r1
 8008804:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	689a      	ldr	r2, [r3, #8]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	212a      	movs	r1, #42	@ 0x2a
 8008812:	438a      	bics	r2, r1
 8008814:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2101      	movs	r1, #1
 8008822:	430a      	orrs	r2, r1
 8008824:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	0018      	movs	r0, r3
 800882a:	f000 fb03 	bl	8008e34 <UART_CheckIdleState>
 800882e:	0003      	movs	r3, r0
}
 8008830:	0018      	movs	r0, r3
 8008832:	46bd      	mov	sp, r7
 8008834:	b002      	add	sp, #8
 8008836:	bd80      	pop	{r7, pc}
 8008838:	ffffb7ff 	.word	0xffffb7ff

0800883c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b08a      	sub	sp, #40	@ 0x28
 8008840:	af02      	add	r7, sp, #8
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	603b      	str	r3, [r7, #0]
 8008848:	1dbb      	adds	r3, r7, #6
 800884a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2288      	movs	r2, #136	@ 0x88
 8008850:	589b      	ldr	r3, [r3, r2]
 8008852:	2b20      	cmp	r3, #32
 8008854:	d000      	beq.n	8008858 <HAL_UART_Transmit+0x1c>
 8008856:	e090      	b.n	800897a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d003      	beq.n	8008866 <HAL_UART_Transmit+0x2a>
 800885e:	1dbb      	adds	r3, r7, #6
 8008860:	881b      	ldrh	r3, [r3, #0]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d101      	bne.n	800886a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e088      	b.n	800897c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	689a      	ldr	r2, [r3, #8]
 800886e:	2380      	movs	r3, #128	@ 0x80
 8008870:	015b      	lsls	r3, r3, #5
 8008872:	429a      	cmp	r2, r3
 8008874:	d109      	bne.n	800888a <HAL_UART_Transmit+0x4e>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d105      	bne.n	800888a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	2201      	movs	r2, #1
 8008882:	4013      	ands	r3, r2
 8008884:	d001      	beq.n	800888a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e078      	b.n	800897c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2290      	movs	r2, #144	@ 0x90
 800888e:	2100      	movs	r1, #0
 8008890:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2288      	movs	r2, #136	@ 0x88
 8008896:	2121      	movs	r1, #33	@ 0x21
 8008898:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800889a:	f7fb fcaf 	bl	80041fc <HAL_GetTick>
 800889e:	0003      	movs	r3, r0
 80088a0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	1dba      	adds	r2, r7, #6
 80088a6:	2154      	movs	r1, #84	@ 0x54
 80088a8:	8812      	ldrh	r2, [r2, #0]
 80088aa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	1dba      	adds	r2, r7, #6
 80088b0:	2156      	movs	r1, #86	@ 0x56
 80088b2:	8812      	ldrh	r2, [r2, #0]
 80088b4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	689a      	ldr	r2, [r3, #8]
 80088ba:	2380      	movs	r3, #128	@ 0x80
 80088bc:	015b      	lsls	r3, r3, #5
 80088be:	429a      	cmp	r2, r3
 80088c0:	d108      	bne.n	80088d4 <HAL_UART_Transmit+0x98>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d104      	bne.n	80088d4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80088ca:	2300      	movs	r3, #0
 80088cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	61bb      	str	r3, [r7, #24]
 80088d2:	e003      	b.n	80088dc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088d8:	2300      	movs	r3, #0
 80088da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80088dc:	e030      	b.n	8008940 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088de:	697a      	ldr	r2, [r7, #20]
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	9300      	str	r3, [sp, #0]
 80088e6:	0013      	movs	r3, r2
 80088e8:	2200      	movs	r2, #0
 80088ea:	2180      	movs	r1, #128	@ 0x80
 80088ec:	f000 fb4c 	bl	8008f88 <UART_WaitOnFlagUntilTimeout>
 80088f0:	1e03      	subs	r3, r0, #0
 80088f2:	d005      	beq.n	8008900 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2288      	movs	r2, #136	@ 0x88
 80088f8:	2120      	movs	r1, #32
 80088fa:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80088fc:	2303      	movs	r3, #3
 80088fe:	e03d      	b.n	800897c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d10b      	bne.n	800891e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	881b      	ldrh	r3, [r3, #0]
 800890a:	001a      	movs	r2, r3
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	05d2      	lsls	r2, r2, #23
 8008912:	0dd2      	lsrs	r2, r2, #23
 8008914:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	3302      	adds	r3, #2
 800891a:	61bb      	str	r3, [r7, #24]
 800891c:	e007      	b.n	800892e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	781a      	ldrb	r2, [r3, #0]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	3301      	adds	r3, #1
 800892c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2256      	movs	r2, #86	@ 0x56
 8008932:	5a9b      	ldrh	r3, [r3, r2]
 8008934:	b29b      	uxth	r3, r3
 8008936:	3b01      	subs	r3, #1
 8008938:	b299      	uxth	r1, r3
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2256      	movs	r2, #86	@ 0x56
 800893e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2256      	movs	r2, #86	@ 0x56
 8008944:	5a9b      	ldrh	r3, [r3, r2]
 8008946:	b29b      	uxth	r3, r3
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1c8      	bne.n	80088de <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800894c:	697a      	ldr	r2, [r7, #20]
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	9300      	str	r3, [sp, #0]
 8008954:	0013      	movs	r3, r2
 8008956:	2200      	movs	r2, #0
 8008958:	2140      	movs	r1, #64	@ 0x40
 800895a:	f000 fb15 	bl	8008f88 <UART_WaitOnFlagUntilTimeout>
 800895e:	1e03      	subs	r3, r0, #0
 8008960:	d005      	beq.n	800896e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2288      	movs	r2, #136	@ 0x88
 8008966:	2120      	movs	r1, #32
 8008968:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800896a:	2303      	movs	r3, #3
 800896c:	e006      	b.n	800897c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2288      	movs	r2, #136	@ 0x88
 8008972:	2120      	movs	r1, #32
 8008974:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8008976:	2300      	movs	r3, #0
 8008978:	e000      	b.n	800897c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800897a:	2302      	movs	r3, #2
  }
}
 800897c:	0018      	movs	r0, r3
 800897e:	46bd      	mov	sp, r7
 8008980:	b008      	add	sp, #32
 8008982:	bd80      	pop	{r7, pc}

08008984 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b088      	sub	sp, #32
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800898c:	231a      	movs	r3, #26
 800898e:	18fb      	adds	r3, r7, r3
 8008990:	2200      	movs	r2, #0
 8008992:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	689a      	ldr	r2, [r3, #8]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	691b      	ldr	r3, [r3, #16]
 800899c:	431a      	orrs	r2, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	695b      	ldr	r3, [r3, #20]
 80089a2:	431a      	orrs	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	69db      	ldr	r3, [r3, #28]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4abc      	ldr	r2, [pc, #752]	@ (8008ca4 <UART_SetConfig+0x320>)
 80089b4:	4013      	ands	r3, r2
 80089b6:	0019      	movs	r1, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	69fa      	ldr	r2, [r7, #28]
 80089be:	430a      	orrs	r2, r1
 80089c0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	4ab7      	ldr	r2, [pc, #732]	@ (8008ca8 <UART_SetConfig+0x324>)
 80089ca:	4013      	ands	r3, r2
 80089cc:	0019      	movs	r1, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	68da      	ldr	r2, [r3, #12]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	430a      	orrs	r2, r1
 80089d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	699b      	ldr	r3, [r3, #24]
 80089de:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a1b      	ldr	r3, [r3, #32]
 80089e4:	69fa      	ldr	r2, [r7, #28]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	4aae      	ldr	r2, [pc, #696]	@ (8008cac <UART_SetConfig+0x328>)
 80089f2:	4013      	ands	r3, r2
 80089f4:	0019      	movs	r1, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	69fa      	ldr	r2, [r7, #28]
 80089fc:	430a      	orrs	r2, r1
 80089fe:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a06:	220f      	movs	r2, #15
 8008a08:	4393      	bics	r3, r2
 8008a0a:	0019      	movs	r1, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	430a      	orrs	r2, r1
 8008a16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4aa4      	ldr	r2, [pc, #656]	@ (8008cb0 <UART_SetConfig+0x32c>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d127      	bne.n	8008a72 <UART_SetConfig+0xee>
 8008a22:	4ba4      	ldr	r3, [pc, #656]	@ (8008cb4 <UART_SetConfig+0x330>)
 8008a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a26:	2203      	movs	r2, #3
 8008a28:	4013      	ands	r3, r2
 8008a2a:	2b03      	cmp	r3, #3
 8008a2c:	d017      	beq.n	8008a5e <UART_SetConfig+0xda>
 8008a2e:	d81b      	bhi.n	8008a68 <UART_SetConfig+0xe4>
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d00a      	beq.n	8008a4a <UART_SetConfig+0xc6>
 8008a34:	d818      	bhi.n	8008a68 <UART_SetConfig+0xe4>
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d002      	beq.n	8008a40 <UART_SetConfig+0xbc>
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d00a      	beq.n	8008a54 <UART_SetConfig+0xd0>
 8008a3e:	e013      	b.n	8008a68 <UART_SetConfig+0xe4>
 8008a40:	231b      	movs	r3, #27
 8008a42:	18fb      	adds	r3, r7, r3
 8008a44:	2200      	movs	r2, #0
 8008a46:	701a      	strb	r2, [r3, #0]
 8008a48:	e058      	b.n	8008afc <UART_SetConfig+0x178>
 8008a4a:	231b      	movs	r3, #27
 8008a4c:	18fb      	adds	r3, r7, r3
 8008a4e:	2202      	movs	r2, #2
 8008a50:	701a      	strb	r2, [r3, #0]
 8008a52:	e053      	b.n	8008afc <UART_SetConfig+0x178>
 8008a54:	231b      	movs	r3, #27
 8008a56:	18fb      	adds	r3, r7, r3
 8008a58:	2204      	movs	r2, #4
 8008a5a:	701a      	strb	r2, [r3, #0]
 8008a5c:	e04e      	b.n	8008afc <UART_SetConfig+0x178>
 8008a5e:	231b      	movs	r3, #27
 8008a60:	18fb      	adds	r3, r7, r3
 8008a62:	2208      	movs	r2, #8
 8008a64:	701a      	strb	r2, [r3, #0]
 8008a66:	e049      	b.n	8008afc <UART_SetConfig+0x178>
 8008a68:	231b      	movs	r3, #27
 8008a6a:	18fb      	adds	r3, r7, r3
 8008a6c:	2210      	movs	r2, #16
 8008a6e:	701a      	strb	r2, [r3, #0]
 8008a70:	e044      	b.n	8008afc <UART_SetConfig+0x178>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a90      	ldr	r2, [pc, #576]	@ (8008cb8 <UART_SetConfig+0x334>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d127      	bne.n	8008acc <UART_SetConfig+0x148>
 8008a7c:	4b8d      	ldr	r3, [pc, #564]	@ (8008cb4 <UART_SetConfig+0x330>)
 8008a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a80:	220c      	movs	r2, #12
 8008a82:	4013      	ands	r3, r2
 8008a84:	2b0c      	cmp	r3, #12
 8008a86:	d017      	beq.n	8008ab8 <UART_SetConfig+0x134>
 8008a88:	d81b      	bhi.n	8008ac2 <UART_SetConfig+0x13e>
 8008a8a:	2b08      	cmp	r3, #8
 8008a8c:	d00a      	beq.n	8008aa4 <UART_SetConfig+0x120>
 8008a8e:	d818      	bhi.n	8008ac2 <UART_SetConfig+0x13e>
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d002      	beq.n	8008a9a <UART_SetConfig+0x116>
 8008a94:	2b04      	cmp	r3, #4
 8008a96:	d00a      	beq.n	8008aae <UART_SetConfig+0x12a>
 8008a98:	e013      	b.n	8008ac2 <UART_SetConfig+0x13e>
 8008a9a:	231b      	movs	r3, #27
 8008a9c:	18fb      	adds	r3, r7, r3
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	701a      	strb	r2, [r3, #0]
 8008aa2:	e02b      	b.n	8008afc <UART_SetConfig+0x178>
 8008aa4:	231b      	movs	r3, #27
 8008aa6:	18fb      	adds	r3, r7, r3
 8008aa8:	2202      	movs	r2, #2
 8008aaa:	701a      	strb	r2, [r3, #0]
 8008aac:	e026      	b.n	8008afc <UART_SetConfig+0x178>
 8008aae:	231b      	movs	r3, #27
 8008ab0:	18fb      	adds	r3, r7, r3
 8008ab2:	2204      	movs	r2, #4
 8008ab4:	701a      	strb	r2, [r3, #0]
 8008ab6:	e021      	b.n	8008afc <UART_SetConfig+0x178>
 8008ab8:	231b      	movs	r3, #27
 8008aba:	18fb      	adds	r3, r7, r3
 8008abc:	2208      	movs	r2, #8
 8008abe:	701a      	strb	r2, [r3, #0]
 8008ac0:	e01c      	b.n	8008afc <UART_SetConfig+0x178>
 8008ac2:	231b      	movs	r3, #27
 8008ac4:	18fb      	adds	r3, r7, r3
 8008ac6:	2210      	movs	r2, #16
 8008ac8:	701a      	strb	r2, [r3, #0]
 8008aca:	e017      	b.n	8008afc <UART_SetConfig+0x178>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a7a      	ldr	r2, [pc, #488]	@ (8008cbc <UART_SetConfig+0x338>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d104      	bne.n	8008ae0 <UART_SetConfig+0x15c>
 8008ad6:	231b      	movs	r3, #27
 8008ad8:	18fb      	adds	r3, r7, r3
 8008ada:	2200      	movs	r2, #0
 8008adc:	701a      	strb	r2, [r3, #0]
 8008ade:	e00d      	b.n	8008afc <UART_SetConfig+0x178>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a76      	ldr	r2, [pc, #472]	@ (8008cc0 <UART_SetConfig+0x33c>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d104      	bne.n	8008af4 <UART_SetConfig+0x170>
 8008aea:	231b      	movs	r3, #27
 8008aec:	18fb      	adds	r3, r7, r3
 8008aee:	2200      	movs	r2, #0
 8008af0:	701a      	strb	r2, [r3, #0]
 8008af2:	e003      	b.n	8008afc <UART_SetConfig+0x178>
 8008af4:	231b      	movs	r3, #27
 8008af6:	18fb      	adds	r3, r7, r3
 8008af8:	2210      	movs	r2, #16
 8008afa:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	69da      	ldr	r2, [r3, #28]
 8008b00:	2380      	movs	r3, #128	@ 0x80
 8008b02:	021b      	lsls	r3, r3, #8
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d000      	beq.n	8008b0a <UART_SetConfig+0x186>
 8008b08:	e065      	b.n	8008bd6 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8008b0a:	231b      	movs	r3, #27
 8008b0c:	18fb      	adds	r3, r7, r3
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	2b08      	cmp	r3, #8
 8008b12:	d015      	beq.n	8008b40 <UART_SetConfig+0x1bc>
 8008b14:	dc18      	bgt.n	8008b48 <UART_SetConfig+0x1c4>
 8008b16:	2b04      	cmp	r3, #4
 8008b18:	d00d      	beq.n	8008b36 <UART_SetConfig+0x1b2>
 8008b1a:	dc15      	bgt.n	8008b48 <UART_SetConfig+0x1c4>
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d002      	beq.n	8008b26 <UART_SetConfig+0x1a2>
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d005      	beq.n	8008b30 <UART_SetConfig+0x1ac>
 8008b24:	e010      	b.n	8008b48 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b26:	f7fe fc6b 	bl	8007400 <HAL_RCC_GetPCLK1Freq>
 8008b2a:	0003      	movs	r3, r0
 8008b2c:	617b      	str	r3, [r7, #20]
        break;
 8008b2e:	e012      	b.n	8008b56 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b30:	4b64      	ldr	r3, [pc, #400]	@ (8008cc4 <UART_SetConfig+0x340>)
 8008b32:	617b      	str	r3, [r7, #20]
        break;
 8008b34:	e00f      	b.n	8008b56 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b36:	f7fe fbd7 	bl	80072e8 <HAL_RCC_GetSysClockFreq>
 8008b3a:	0003      	movs	r3, r0
 8008b3c:	617b      	str	r3, [r7, #20]
        break;
 8008b3e:	e00a      	b.n	8008b56 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b40:	2380      	movs	r3, #128	@ 0x80
 8008b42:	021b      	lsls	r3, r3, #8
 8008b44:	617b      	str	r3, [r7, #20]
        break;
 8008b46:	e006      	b.n	8008b56 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008b4c:	231a      	movs	r3, #26
 8008b4e:	18fb      	adds	r3, r7, r3
 8008b50:	2201      	movs	r2, #1
 8008b52:	701a      	strb	r2, [r3, #0]
        break;
 8008b54:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d100      	bne.n	8008b5e <UART_SetConfig+0x1da>
 8008b5c:	e08d      	b.n	8008c7a <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b62:	4b59      	ldr	r3, [pc, #356]	@ (8008cc8 <UART_SetConfig+0x344>)
 8008b64:	0052      	lsls	r2, r2, #1
 8008b66:	5ad3      	ldrh	r3, [r2, r3]
 8008b68:	0019      	movs	r1, r3
 8008b6a:	6978      	ldr	r0, [r7, #20]
 8008b6c:	f7f7 fae4 	bl	8000138 <__udivsi3>
 8008b70:	0003      	movs	r3, r0
 8008b72:	005a      	lsls	r2, r3, #1
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	085b      	lsrs	r3, r3, #1
 8008b7a:	18d2      	adds	r2, r2, r3
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	0019      	movs	r1, r3
 8008b82:	0010      	movs	r0, r2
 8008b84:	f7f7 fad8 	bl	8000138 <__udivsi3>
 8008b88:	0003      	movs	r3, r0
 8008b8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	2b0f      	cmp	r3, #15
 8008b90:	d91c      	bls.n	8008bcc <UART_SetConfig+0x248>
 8008b92:	693a      	ldr	r2, [r7, #16]
 8008b94:	2380      	movs	r3, #128	@ 0x80
 8008b96:	025b      	lsls	r3, r3, #9
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d217      	bcs.n	8008bcc <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	b29a      	uxth	r2, r3
 8008ba0:	200e      	movs	r0, #14
 8008ba2:	183b      	adds	r3, r7, r0
 8008ba4:	210f      	movs	r1, #15
 8008ba6:	438a      	bics	r2, r1
 8008ba8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	085b      	lsrs	r3, r3, #1
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	2207      	movs	r2, #7
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	b299      	uxth	r1, r3
 8008bb6:	183b      	adds	r3, r7, r0
 8008bb8:	183a      	adds	r2, r7, r0
 8008bba:	8812      	ldrh	r2, [r2, #0]
 8008bbc:	430a      	orrs	r2, r1
 8008bbe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	183a      	adds	r2, r7, r0
 8008bc6:	8812      	ldrh	r2, [r2, #0]
 8008bc8:	60da      	str	r2, [r3, #12]
 8008bca:	e056      	b.n	8008c7a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8008bcc:	231a      	movs	r3, #26
 8008bce:	18fb      	adds	r3, r7, r3
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	701a      	strb	r2, [r3, #0]
 8008bd4:	e051      	b.n	8008c7a <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008bd6:	231b      	movs	r3, #27
 8008bd8:	18fb      	adds	r3, r7, r3
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	2b08      	cmp	r3, #8
 8008bde:	d015      	beq.n	8008c0c <UART_SetConfig+0x288>
 8008be0:	dc18      	bgt.n	8008c14 <UART_SetConfig+0x290>
 8008be2:	2b04      	cmp	r3, #4
 8008be4:	d00d      	beq.n	8008c02 <UART_SetConfig+0x27e>
 8008be6:	dc15      	bgt.n	8008c14 <UART_SetConfig+0x290>
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d002      	beq.n	8008bf2 <UART_SetConfig+0x26e>
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d005      	beq.n	8008bfc <UART_SetConfig+0x278>
 8008bf0:	e010      	b.n	8008c14 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bf2:	f7fe fc05 	bl	8007400 <HAL_RCC_GetPCLK1Freq>
 8008bf6:	0003      	movs	r3, r0
 8008bf8:	617b      	str	r3, [r7, #20]
        break;
 8008bfa:	e012      	b.n	8008c22 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bfc:	4b31      	ldr	r3, [pc, #196]	@ (8008cc4 <UART_SetConfig+0x340>)
 8008bfe:	617b      	str	r3, [r7, #20]
        break;
 8008c00:	e00f      	b.n	8008c22 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c02:	f7fe fb71 	bl	80072e8 <HAL_RCC_GetSysClockFreq>
 8008c06:	0003      	movs	r3, r0
 8008c08:	617b      	str	r3, [r7, #20]
        break;
 8008c0a:	e00a      	b.n	8008c22 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c0c:	2380      	movs	r3, #128	@ 0x80
 8008c0e:	021b      	lsls	r3, r3, #8
 8008c10:	617b      	str	r3, [r7, #20]
        break;
 8008c12:	e006      	b.n	8008c22 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8008c14:	2300      	movs	r3, #0
 8008c16:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008c18:	231a      	movs	r3, #26
 8008c1a:	18fb      	adds	r3, r7, r3
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	701a      	strb	r2, [r3, #0]
        break;
 8008c20:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d028      	beq.n	8008c7a <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008c2c:	4b26      	ldr	r3, [pc, #152]	@ (8008cc8 <UART_SetConfig+0x344>)
 8008c2e:	0052      	lsls	r2, r2, #1
 8008c30:	5ad3      	ldrh	r3, [r2, r3]
 8008c32:	0019      	movs	r1, r3
 8008c34:	6978      	ldr	r0, [r7, #20]
 8008c36:	f7f7 fa7f 	bl	8000138 <__udivsi3>
 8008c3a:	0003      	movs	r3, r0
 8008c3c:	001a      	movs	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	085b      	lsrs	r3, r3, #1
 8008c44:	18d2      	adds	r2, r2, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	0019      	movs	r1, r3
 8008c4c:	0010      	movs	r0, r2
 8008c4e:	f7f7 fa73 	bl	8000138 <__udivsi3>
 8008c52:	0003      	movs	r3, r0
 8008c54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	2b0f      	cmp	r3, #15
 8008c5a:	d90a      	bls.n	8008c72 <UART_SetConfig+0x2ee>
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	2380      	movs	r3, #128	@ 0x80
 8008c60:	025b      	lsls	r3, r3, #9
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d205      	bcs.n	8008c72 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	b29a      	uxth	r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	60da      	str	r2, [r3, #12]
 8008c70:	e003      	b.n	8008c7a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8008c72:	231a      	movs	r3, #26
 8008c74:	18fb      	adds	r3, r7, r3
 8008c76:	2201      	movs	r2, #1
 8008c78:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	226a      	movs	r2, #106	@ 0x6a
 8008c7e:	2101      	movs	r1, #1
 8008c80:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2268      	movs	r2, #104	@ 0x68
 8008c86:	2101      	movs	r1, #1
 8008c88:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008c96:	231a      	movs	r3, #26
 8008c98:	18fb      	adds	r3, r7, r3
 8008c9a:	781b      	ldrb	r3, [r3, #0]
}
 8008c9c:	0018      	movs	r0, r3
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	b008      	add	sp, #32
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	cfff69f3 	.word	0xcfff69f3
 8008ca8:	ffffcfff 	.word	0xffffcfff
 8008cac:	11fff4ff 	.word	0x11fff4ff
 8008cb0:	40013800 	.word	0x40013800
 8008cb4:	40021000 	.word	0x40021000
 8008cb8:	40004400 	.word	0x40004400
 8008cbc:	40004800 	.word	0x40004800
 8008cc0:	40004c00 	.word	0x40004c00
 8008cc4:	00f42400 	.word	0x00f42400
 8008cc8:	0800c3b0 	.word	0x0800c3b0

08008ccc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cd8:	2208      	movs	r2, #8
 8008cda:	4013      	ands	r3, r2
 8008cdc:	d00b      	beq.n	8008cf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	4a4a      	ldr	r2, [pc, #296]	@ (8008e10 <UART_AdvFeatureConfig+0x144>)
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	0019      	movs	r1, r3
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	430a      	orrs	r2, r1
 8008cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	d00b      	beq.n	8008d18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	4a43      	ldr	r2, [pc, #268]	@ (8008e14 <UART_AdvFeatureConfig+0x148>)
 8008d08:	4013      	ands	r3, r2
 8008d0a:	0019      	movs	r1, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	430a      	orrs	r2, r1
 8008d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d1c:	2202      	movs	r2, #2
 8008d1e:	4013      	ands	r3, r2
 8008d20:	d00b      	beq.n	8008d3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	4a3b      	ldr	r2, [pc, #236]	@ (8008e18 <UART_AdvFeatureConfig+0x14c>)
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	0019      	movs	r1, r3
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	430a      	orrs	r2, r1
 8008d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d3e:	2204      	movs	r2, #4
 8008d40:	4013      	ands	r3, r2
 8008d42:	d00b      	beq.n	8008d5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	4a34      	ldr	r2, [pc, #208]	@ (8008e1c <UART_AdvFeatureConfig+0x150>)
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	0019      	movs	r1, r3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	430a      	orrs	r2, r1
 8008d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d60:	2210      	movs	r2, #16
 8008d62:	4013      	ands	r3, r2
 8008d64:	d00b      	beq.n	8008d7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	4a2c      	ldr	r2, [pc, #176]	@ (8008e20 <UART_AdvFeatureConfig+0x154>)
 8008d6e:	4013      	ands	r3, r2
 8008d70:	0019      	movs	r1, r3
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	430a      	orrs	r2, r1
 8008d7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d82:	2220      	movs	r2, #32
 8008d84:	4013      	ands	r3, r2
 8008d86:	d00b      	beq.n	8008da0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	4a25      	ldr	r2, [pc, #148]	@ (8008e24 <UART_AdvFeatureConfig+0x158>)
 8008d90:	4013      	ands	r3, r2
 8008d92:	0019      	movs	r1, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	430a      	orrs	r2, r1
 8008d9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008da4:	2240      	movs	r2, #64	@ 0x40
 8008da6:	4013      	ands	r3, r2
 8008da8:	d01d      	beq.n	8008de6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	4a1d      	ldr	r2, [pc, #116]	@ (8008e28 <UART_AdvFeatureConfig+0x15c>)
 8008db2:	4013      	ands	r3, r2
 8008db4:	0019      	movs	r1, r3
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	430a      	orrs	r2, r1
 8008dc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008dc6:	2380      	movs	r3, #128	@ 0x80
 8008dc8:	035b      	lsls	r3, r3, #13
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d10b      	bne.n	8008de6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	4a15      	ldr	r2, [pc, #84]	@ (8008e2c <UART_AdvFeatureConfig+0x160>)
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	0019      	movs	r1, r3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	430a      	orrs	r2, r1
 8008de4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dea:	2280      	movs	r2, #128	@ 0x80
 8008dec:	4013      	ands	r3, r2
 8008dee:	d00b      	beq.n	8008e08 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	4a0e      	ldr	r2, [pc, #56]	@ (8008e30 <UART_AdvFeatureConfig+0x164>)
 8008df8:	4013      	ands	r3, r2
 8008dfa:	0019      	movs	r1, r3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	430a      	orrs	r2, r1
 8008e06:	605a      	str	r2, [r3, #4]
  }
}
 8008e08:	46c0      	nop			@ (mov r8, r8)
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	b002      	add	sp, #8
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	ffff7fff 	.word	0xffff7fff
 8008e14:	fffdffff 	.word	0xfffdffff
 8008e18:	fffeffff 	.word	0xfffeffff
 8008e1c:	fffbffff 	.word	0xfffbffff
 8008e20:	ffffefff 	.word	0xffffefff
 8008e24:	ffffdfff 	.word	0xffffdfff
 8008e28:	ffefffff 	.word	0xffefffff
 8008e2c:	ff9fffff 	.word	0xff9fffff
 8008e30:	fff7ffff 	.word	0xfff7ffff

08008e34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b092      	sub	sp, #72	@ 0x48
 8008e38:	af02      	add	r7, sp, #8
 8008e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2290      	movs	r2, #144	@ 0x90
 8008e40:	2100      	movs	r1, #0
 8008e42:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e44:	f7fb f9da 	bl	80041fc <HAL_GetTick>
 8008e48:	0003      	movs	r3, r0
 8008e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2208      	movs	r2, #8
 8008e54:	4013      	ands	r3, r2
 8008e56:	2b08      	cmp	r3, #8
 8008e58:	d12d      	bne.n	8008eb6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e5c:	2280      	movs	r2, #128	@ 0x80
 8008e5e:	0391      	lsls	r1, r2, #14
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	4a47      	ldr	r2, [pc, #284]	@ (8008f80 <UART_CheckIdleState+0x14c>)
 8008e64:	9200      	str	r2, [sp, #0]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f000 f88e 	bl	8008f88 <UART_WaitOnFlagUntilTimeout>
 8008e6c:	1e03      	subs	r3, r0, #0
 8008e6e:	d022      	beq.n	8008eb6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e70:	f3ef 8310 	mrs	r3, PRIMASK
 8008e74:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008e78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e80:	f383 8810 	msr	PRIMASK, r3
}
 8008e84:	46c0      	nop			@ (mov r8, r8)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2180      	movs	r1, #128	@ 0x80
 8008e92:	438a      	bics	r2, r1
 8008e94:	601a      	str	r2, [r3, #0]
 8008e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e9c:	f383 8810 	msr	PRIMASK, r3
}
 8008ea0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2288      	movs	r2, #136	@ 0x88
 8008ea6:	2120      	movs	r1, #32
 8008ea8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2284      	movs	r2, #132	@ 0x84
 8008eae:	2100      	movs	r1, #0
 8008eb0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	e060      	b.n	8008f78 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2204      	movs	r2, #4
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	2b04      	cmp	r3, #4
 8008ec2:	d146      	bne.n	8008f52 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ec6:	2280      	movs	r2, #128	@ 0x80
 8008ec8:	03d1      	lsls	r1, r2, #15
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	4a2c      	ldr	r2, [pc, #176]	@ (8008f80 <UART_CheckIdleState+0x14c>)
 8008ece:	9200      	str	r2, [sp, #0]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f000 f859 	bl	8008f88 <UART_WaitOnFlagUntilTimeout>
 8008ed6:	1e03      	subs	r3, r0, #0
 8008ed8:	d03b      	beq.n	8008f52 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008eda:	f3ef 8310 	mrs	r3, PRIMASK
 8008ede:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ee2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	f383 8810 	msr	PRIMASK, r3
}
 8008eee:	46c0      	nop			@ (mov r8, r8)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4922      	ldr	r1, [pc, #136]	@ (8008f84 <UART_CheckIdleState+0x150>)
 8008efc:	400a      	ands	r2, r1
 8008efe:	601a      	str	r2, [r3, #0]
 8008f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	f383 8810 	msr	PRIMASK, r3
}
 8008f0a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f0c:	f3ef 8310 	mrs	r3, PRIMASK
 8008f10:	61bb      	str	r3, [r7, #24]
  return(result);
 8008f12:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f14:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f16:	2301      	movs	r3, #1
 8008f18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	f383 8810 	msr	PRIMASK, r3
}
 8008f20:	46c0      	nop			@ (mov r8, r8)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	689a      	ldr	r2, [r3, #8]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2101      	movs	r1, #1
 8008f2e:	438a      	bics	r2, r1
 8008f30:	609a      	str	r2, [r3, #8]
 8008f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f34:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f36:	6a3b      	ldr	r3, [r7, #32]
 8008f38:	f383 8810 	msr	PRIMASK, r3
}
 8008f3c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	228c      	movs	r2, #140	@ 0x8c
 8008f42:	2120      	movs	r1, #32
 8008f44:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2284      	movs	r2, #132	@ 0x84
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f4e:	2303      	movs	r3, #3
 8008f50:	e012      	b.n	8008f78 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2288      	movs	r2, #136	@ 0x88
 8008f56:	2120      	movs	r1, #32
 8008f58:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	228c      	movs	r2, #140	@ 0x8c
 8008f5e:	2120      	movs	r1, #32
 8008f60:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2200      	movs	r2, #0
 8008f66:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2284      	movs	r2, #132	@ 0x84
 8008f72:	2100      	movs	r1, #0
 8008f74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	0018      	movs	r0, r3
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	b010      	add	sp, #64	@ 0x40
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	01ffffff 	.word	0x01ffffff
 8008f84:	fffffedf 	.word	0xfffffedf

08008f88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	603b      	str	r3, [r7, #0]
 8008f94:	1dfb      	adds	r3, r7, #7
 8008f96:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f98:	e051      	b.n	800903e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	d04e      	beq.n	800903e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fa0:	f7fb f92c 	bl	80041fc <HAL_GetTick>
 8008fa4:	0002      	movs	r2, r0
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	1ad3      	subs	r3, r2, r3
 8008faa:	69ba      	ldr	r2, [r7, #24]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d302      	bcc.n	8008fb6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d101      	bne.n	8008fba <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	e051      	b.n	800905e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2204      	movs	r2, #4
 8008fc2:	4013      	ands	r3, r2
 8008fc4:	d03b      	beq.n	800903e <UART_WaitOnFlagUntilTimeout+0xb6>
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	2b80      	cmp	r3, #128	@ 0x80
 8008fca:	d038      	beq.n	800903e <UART_WaitOnFlagUntilTimeout+0xb6>
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	2b40      	cmp	r3, #64	@ 0x40
 8008fd0:	d035      	beq.n	800903e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	69db      	ldr	r3, [r3, #28]
 8008fd8:	2208      	movs	r2, #8
 8008fda:	4013      	ands	r3, r2
 8008fdc:	2b08      	cmp	r3, #8
 8008fde:	d111      	bne.n	8009004 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	2208      	movs	r2, #8
 8008fe6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	0018      	movs	r0, r3
 8008fec:	f000 f83c 	bl	8009068 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2290      	movs	r2, #144	@ 0x90
 8008ff4:	2108      	movs	r1, #8
 8008ff6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2284      	movs	r2, #132	@ 0x84
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	e02c      	b.n	800905e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	69da      	ldr	r2, [r3, #28]
 800900a:	2380      	movs	r3, #128	@ 0x80
 800900c:	011b      	lsls	r3, r3, #4
 800900e:	401a      	ands	r2, r3
 8009010:	2380      	movs	r3, #128	@ 0x80
 8009012:	011b      	lsls	r3, r3, #4
 8009014:	429a      	cmp	r2, r3
 8009016:	d112      	bne.n	800903e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2280      	movs	r2, #128	@ 0x80
 800901e:	0112      	lsls	r2, r2, #4
 8009020:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	0018      	movs	r0, r3
 8009026:	f000 f81f 	bl	8009068 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2290      	movs	r2, #144	@ 0x90
 800902e:	2120      	movs	r1, #32
 8009030:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2284      	movs	r2, #132	@ 0x84
 8009036:	2100      	movs	r1, #0
 8009038:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800903a:	2303      	movs	r3, #3
 800903c:	e00f      	b.n	800905e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	69db      	ldr	r3, [r3, #28]
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	4013      	ands	r3, r2
 8009048:	68ba      	ldr	r2, [r7, #8]
 800904a:	1ad3      	subs	r3, r2, r3
 800904c:	425a      	negs	r2, r3
 800904e:	4153      	adcs	r3, r2
 8009050:	b2db      	uxtb	r3, r3
 8009052:	001a      	movs	r2, r3
 8009054:	1dfb      	adds	r3, r7, #7
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	429a      	cmp	r2, r3
 800905a:	d09e      	beq.n	8008f9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	0018      	movs	r0, r3
 8009060:	46bd      	mov	sp, r7
 8009062:	b004      	add	sp, #16
 8009064:	bd80      	pop	{r7, pc}
	...

08009068 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b08e      	sub	sp, #56	@ 0x38
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009070:	f3ef 8310 	mrs	r3, PRIMASK
 8009074:	617b      	str	r3, [r7, #20]
  return(result);
 8009076:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009078:	637b      	str	r3, [r7, #52]	@ 0x34
 800907a:	2301      	movs	r3, #1
 800907c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	f383 8810 	msr	PRIMASK, r3
}
 8009084:	46c0      	nop			@ (mov r8, r8)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4926      	ldr	r1, [pc, #152]	@ (800912c <UART_EndRxTransfer+0xc4>)
 8009092:	400a      	ands	r2, r1
 8009094:	601a      	str	r2, [r3, #0]
 8009096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009098:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	f383 8810 	msr	PRIMASK, r3
}
 80090a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090a2:	f3ef 8310 	mrs	r3, PRIMASK
 80090a6:	623b      	str	r3, [r7, #32]
  return(result);
 80090a8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80090ac:	2301      	movs	r3, #1
 80090ae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b2:	f383 8810 	msr	PRIMASK, r3
}
 80090b6:	46c0      	nop			@ (mov r8, r8)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	689a      	ldr	r2, [r3, #8]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	491b      	ldr	r1, [pc, #108]	@ (8009130 <UART_EndRxTransfer+0xc8>)
 80090c4:	400a      	ands	r2, r1
 80090c6:	609a      	str	r2, [r3, #8]
 80090c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ce:	f383 8810 	msr	PRIMASK, r3
}
 80090d2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d118      	bne.n	800910e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090dc:	f3ef 8310 	mrs	r3, PRIMASK
 80090e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80090e2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090e6:	2301      	movs	r3, #1
 80090e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f383 8810 	msr	PRIMASK, r3
}
 80090f0:	46c0      	nop			@ (mov r8, r8)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2110      	movs	r1, #16
 80090fe:	438a      	bics	r2, r1
 8009100:	601a      	str	r2, [r3, #0]
 8009102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009104:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	f383 8810 	msr	PRIMASK, r3
}
 800910c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	228c      	movs	r2, #140	@ 0x8c
 8009112:	2120      	movs	r1, #32
 8009114:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009122:	46c0      	nop			@ (mov r8, r8)
 8009124:	46bd      	mov	sp, r7
 8009126:	b00e      	add	sp, #56	@ 0x38
 8009128:	bd80      	pop	{r7, pc}
 800912a:	46c0      	nop			@ (mov r8, r8)
 800912c:	fffffedf 	.word	0xfffffedf
 8009130:	effffffe 	.word	0xeffffffe

08009134 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2284      	movs	r2, #132	@ 0x84
 8009140:	5c9b      	ldrb	r3, [r3, r2]
 8009142:	2b01      	cmp	r3, #1
 8009144:	d101      	bne.n	800914a <HAL_UARTEx_DisableFifoMode+0x16>
 8009146:	2302      	movs	r3, #2
 8009148:	e027      	b.n	800919a <HAL_UARTEx_DisableFifoMode+0x66>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2284      	movs	r2, #132	@ 0x84
 800914e:	2101      	movs	r1, #1
 8009150:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2288      	movs	r2, #136	@ 0x88
 8009156:	2124      	movs	r1, #36	@ 0x24
 8009158:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	681a      	ldr	r2, [r3, #0]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2101      	movs	r1, #1
 800916e:	438a      	bics	r2, r1
 8009170:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	4a0b      	ldr	r2, [pc, #44]	@ (80091a4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8009176:	4013      	ands	r3, r2
 8009178:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2288      	movs	r2, #136	@ 0x88
 800918c:	2120      	movs	r1, #32
 800918e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2284      	movs	r2, #132	@ 0x84
 8009194:	2100      	movs	r1, #0
 8009196:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	0018      	movs	r0, r3
 800919c:	46bd      	mov	sp, r7
 800919e:	b004      	add	sp, #16
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	46c0      	nop			@ (mov r8, r8)
 80091a4:	dfffffff 	.word	0xdfffffff

080091a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2284      	movs	r2, #132	@ 0x84
 80091b6:	5c9b      	ldrb	r3, [r3, r2]
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d101      	bne.n	80091c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80091bc:	2302      	movs	r3, #2
 80091be:	e02e      	b.n	800921e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2284      	movs	r2, #132	@ 0x84
 80091c4:	2101      	movs	r1, #1
 80091c6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2288      	movs	r2, #136	@ 0x88
 80091cc:	2124      	movs	r1, #36	@ 0x24
 80091ce:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2101      	movs	r1, #1
 80091e4:	438a      	bics	r2, r1
 80091e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	00db      	lsls	r3, r3, #3
 80091f0:	08d9      	lsrs	r1, r3, #3
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	683a      	ldr	r2, [r7, #0]
 80091f8:	430a      	orrs	r2, r1
 80091fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	0018      	movs	r0, r3
 8009200:	f000 f854 	bl	80092ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2288      	movs	r2, #136	@ 0x88
 8009210:	2120      	movs	r1, #32
 8009212:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2284      	movs	r2, #132	@ 0x84
 8009218:	2100      	movs	r1, #0
 800921a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	0018      	movs	r0, r3
 8009220:	46bd      	mov	sp, r7
 8009222:	b004      	add	sp, #16
 8009224:	bd80      	pop	{r7, pc}
	...

08009228 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2284      	movs	r2, #132	@ 0x84
 8009236:	5c9b      	ldrb	r3, [r3, r2]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d101      	bne.n	8009240 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800923c:	2302      	movs	r3, #2
 800923e:	e02f      	b.n	80092a0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2284      	movs	r2, #132	@ 0x84
 8009244:	2101      	movs	r1, #1
 8009246:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2288      	movs	r2, #136	@ 0x88
 800924c:	2124      	movs	r1, #36	@ 0x24
 800924e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2101      	movs	r1, #1
 8009264:	438a      	bics	r2, r1
 8009266:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	4a0e      	ldr	r2, [pc, #56]	@ (80092a8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009270:	4013      	ands	r3, r2
 8009272:	0019      	movs	r1, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	683a      	ldr	r2, [r7, #0]
 800927a:	430a      	orrs	r2, r1
 800927c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	0018      	movs	r0, r3
 8009282:	f000 f813 	bl	80092ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2288      	movs	r2, #136	@ 0x88
 8009292:	2120      	movs	r1, #32
 8009294:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2284      	movs	r2, #132	@ 0x84
 800929a:	2100      	movs	r1, #0
 800929c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800929e:	2300      	movs	r3, #0
}
 80092a0:	0018      	movs	r0, r3
 80092a2:	46bd      	mov	sp, r7
 80092a4:	b004      	add	sp, #16
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	f1ffffff 	.word	0xf1ffffff

080092ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80092ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092ae:	b085      	sub	sp, #20
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d108      	bne.n	80092ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	226a      	movs	r2, #106	@ 0x6a
 80092c0:	2101      	movs	r1, #1
 80092c2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2268      	movs	r2, #104	@ 0x68
 80092c8:	2101      	movs	r1, #1
 80092ca:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80092cc:	e043      	b.n	8009356 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80092ce:	260f      	movs	r6, #15
 80092d0:	19bb      	adds	r3, r7, r6
 80092d2:	2208      	movs	r2, #8
 80092d4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80092d6:	200e      	movs	r0, #14
 80092d8:	183b      	adds	r3, r7, r0
 80092da:	2208      	movs	r2, #8
 80092dc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	0e5b      	lsrs	r3, r3, #25
 80092e6:	b2da      	uxtb	r2, r3
 80092e8:	240d      	movs	r4, #13
 80092ea:	193b      	adds	r3, r7, r4
 80092ec:	2107      	movs	r1, #7
 80092ee:	400a      	ands	r2, r1
 80092f0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	0f5b      	lsrs	r3, r3, #29
 80092fa:	b2da      	uxtb	r2, r3
 80092fc:	250c      	movs	r5, #12
 80092fe:	197b      	adds	r3, r7, r5
 8009300:	2107      	movs	r1, #7
 8009302:	400a      	ands	r2, r1
 8009304:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009306:	183b      	adds	r3, r7, r0
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	197a      	adds	r2, r7, r5
 800930c:	7812      	ldrb	r2, [r2, #0]
 800930e:	4914      	ldr	r1, [pc, #80]	@ (8009360 <UARTEx_SetNbDataToProcess+0xb4>)
 8009310:	5c8a      	ldrb	r2, [r1, r2]
 8009312:	435a      	muls	r2, r3
 8009314:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8009316:	197b      	adds	r3, r7, r5
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	4a12      	ldr	r2, [pc, #72]	@ (8009364 <UARTEx_SetNbDataToProcess+0xb8>)
 800931c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800931e:	0019      	movs	r1, r3
 8009320:	f7f6 ff94 	bl	800024c <__divsi3>
 8009324:	0003      	movs	r3, r0
 8009326:	b299      	uxth	r1, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	226a      	movs	r2, #106	@ 0x6a
 800932c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800932e:	19bb      	adds	r3, r7, r6
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	193a      	adds	r2, r7, r4
 8009334:	7812      	ldrb	r2, [r2, #0]
 8009336:	490a      	ldr	r1, [pc, #40]	@ (8009360 <UARTEx_SetNbDataToProcess+0xb4>)
 8009338:	5c8a      	ldrb	r2, [r1, r2]
 800933a:	435a      	muls	r2, r3
 800933c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800933e:	193b      	adds	r3, r7, r4
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	4a08      	ldr	r2, [pc, #32]	@ (8009364 <UARTEx_SetNbDataToProcess+0xb8>)
 8009344:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009346:	0019      	movs	r1, r3
 8009348:	f7f6 ff80 	bl	800024c <__divsi3>
 800934c:	0003      	movs	r3, r0
 800934e:	b299      	uxth	r1, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2268      	movs	r2, #104	@ 0x68
 8009354:	5299      	strh	r1, [r3, r2]
}
 8009356:	46c0      	nop			@ (mov r8, r8)
 8009358:	46bd      	mov	sp, r7
 800935a:	b005      	add	sp, #20
 800935c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800935e:	46c0      	nop			@ (mov r8, r8)
 8009360:	0800c3c8 	.word	0x0800c3c8
 8009364:	0800c3d0 	.word	0x0800c3d0

08009368 <__cvt>:
 8009368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800936a:	001f      	movs	r7, r3
 800936c:	2300      	movs	r3, #0
 800936e:	0016      	movs	r6, r2
 8009370:	b08b      	sub	sp, #44	@ 0x2c
 8009372:	429f      	cmp	r7, r3
 8009374:	da04      	bge.n	8009380 <__cvt+0x18>
 8009376:	2180      	movs	r1, #128	@ 0x80
 8009378:	0609      	lsls	r1, r1, #24
 800937a:	187b      	adds	r3, r7, r1
 800937c:	001f      	movs	r7, r3
 800937e:	232d      	movs	r3, #45	@ 0x2d
 8009380:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009382:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8009384:	7013      	strb	r3, [r2, #0]
 8009386:	2320      	movs	r3, #32
 8009388:	2203      	movs	r2, #3
 800938a:	439d      	bics	r5, r3
 800938c:	2d46      	cmp	r5, #70	@ 0x46
 800938e:	d007      	beq.n	80093a0 <__cvt+0x38>
 8009390:	002b      	movs	r3, r5
 8009392:	3b45      	subs	r3, #69	@ 0x45
 8009394:	4259      	negs	r1, r3
 8009396:	414b      	adcs	r3, r1
 8009398:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800939a:	3a01      	subs	r2, #1
 800939c:	18cb      	adds	r3, r1, r3
 800939e:	9310      	str	r3, [sp, #64]	@ 0x40
 80093a0:	ab09      	add	r3, sp, #36	@ 0x24
 80093a2:	9304      	str	r3, [sp, #16]
 80093a4:	ab08      	add	r3, sp, #32
 80093a6:	9303      	str	r3, [sp, #12]
 80093a8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80093aa:	9200      	str	r2, [sp, #0]
 80093ac:	9302      	str	r3, [sp, #8]
 80093ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80093b0:	0032      	movs	r2, r6
 80093b2:	9301      	str	r3, [sp, #4]
 80093b4:	003b      	movs	r3, r7
 80093b6:	f000 fdef 	bl	8009f98 <_dtoa_r>
 80093ba:	0004      	movs	r4, r0
 80093bc:	2d47      	cmp	r5, #71	@ 0x47
 80093be:	d11b      	bne.n	80093f8 <__cvt+0x90>
 80093c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80093c2:	07db      	lsls	r3, r3, #31
 80093c4:	d511      	bpl.n	80093ea <__cvt+0x82>
 80093c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80093c8:	18c3      	adds	r3, r0, r3
 80093ca:	9307      	str	r3, [sp, #28]
 80093cc:	2200      	movs	r2, #0
 80093ce:	2300      	movs	r3, #0
 80093d0:	0030      	movs	r0, r6
 80093d2:	0039      	movs	r1, r7
 80093d4:	f7f7 f836 	bl	8000444 <__aeabi_dcmpeq>
 80093d8:	2800      	cmp	r0, #0
 80093da:	d001      	beq.n	80093e0 <__cvt+0x78>
 80093dc:	9b07      	ldr	r3, [sp, #28]
 80093de:	9309      	str	r3, [sp, #36]	@ 0x24
 80093e0:	2230      	movs	r2, #48	@ 0x30
 80093e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093e4:	9907      	ldr	r1, [sp, #28]
 80093e6:	428b      	cmp	r3, r1
 80093e8:	d320      	bcc.n	800942c <__cvt+0xc4>
 80093ea:	0020      	movs	r0, r4
 80093ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093ee:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80093f0:	1b1b      	subs	r3, r3, r4
 80093f2:	6013      	str	r3, [r2, #0]
 80093f4:	b00b      	add	sp, #44	@ 0x2c
 80093f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80093fa:	18c3      	adds	r3, r0, r3
 80093fc:	9307      	str	r3, [sp, #28]
 80093fe:	2d46      	cmp	r5, #70	@ 0x46
 8009400:	d1e4      	bne.n	80093cc <__cvt+0x64>
 8009402:	7803      	ldrb	r3, [r0, #0]
 8009404:	2b30      	cmp	r3, #48	@ 0x30
 8009406:	d10c      	bne.n	8009422 <__cvt+0xba>
 8009408:	2200      	movs	r2, #0
 800940a:	2300      	movs	r3, #0
 800940c:	0030      	movs	r0, r6
 800940e:	0039      	movs	r1, r7
 8009410:	f7f7 f818 	bl	8000444 <__aeabi_dcmpeq>
 8009414:	2800      	cmp	r0, #0
 8009416:	d104      	bne.n	8009422 <__cvt+0xba>
 8009418:	2301      	movs	r3, #1
 800941a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800941c:	1a9b      	subs	r3, r3, r2
 800941e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009420:	6013      	str	r3, [r2, #0]
 8009422:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009424:	9a07      	ldr	r2, [sp, #28]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	18d3      	adds	r3, r2, r3
 800942a:	e7ce      	b.n	80093ca <__cvt+0x62>
 800942c:	1c59      	adds	r1, r3, #1
 800942e:	9109      	str	r1, [sp, #36]	@ 0x24
 8009430:	701a      	strb	r2, [r3, #0]
 8009432:	e7d6      	b.n	80093e2 <__cvt+0x7a>

08009434 <__exponent>:
 8009434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009436:	232b      	movs	r3, #43	@ 0x2b
 8009438:	0005      	movs	r5, r0
 800943a:	000c      	movs	r4, r1
 800943c:	b085      	sub	sp, #20
 800943e:	7002      	strb	r2, [r0, #0]
 8009440:	2900      	cmp	r1, #0
 8009442:	da01      	bge.n	8009448 <__exponent+0x14>
 8009444:	424c      	negs	r4, r1
 8009446:	3302      	adds	r3, #2
 8009448:	706b      	strb	r3, [r5, #1]
 800944a:	2c09      	cmp	r4, #9
 800944c:	dd2c      	ble.n	80094a8 <__exponent+0x74>
 800944e:	ab02      	add	r3, sp, #8
 8009450:	1dde      	adds	r6, r3, #7
 8009452:	0020      	movs	r0, r4
 8009454:	210a      	movs	r1, #10
 8009456:	f7f6 ffdf 	bl	8000418 <__aeabi_idivmod>
 800945a:	0037      	movs	r7, r6
 800945c:	3130      	adds	r1, #48	@ 0x30
 800945e:	3e01      	subs	r6, #1
 8009460:	0020      	movs	r0, r4
 8009462:	7031      	strb	r1, [r6, #0]
 8009464:	210a      	movs	r1, #10
 8009466:	9401      	str	r4, [sp, #4]
 8009468:	f7f6 fef0 	bl	800024c <__divsi3>
 800946c:	9b01      	ldr	r3, [sp, #4]
 800946e:	0004      	movs	r4, r0
 8009470:	2b63      	cmp	r3, #99	@ 0x63
 8009472:	dcee      	bgt.n	8009452 <__exponent+0x1e>
 8009474:	1eba      	subs	r2, r7, #2
 8009476:	1ca8      	adds	r0, r5, #2
 8009478:	0001      	movs	r1, r0
 800947a:	0013      	movs	r3, r2
 800947c:	3430      	adds	r4, #48	@ 0x30
 800947e:	7014      	strb	r4, [r2, #0]
 8009480:	ac02      	add	r4, sp, #8
 8009482:	3407      	adds	r4, #7
 8009484:	429c      	cmp	r4, r3
 8009486:	d80a      	bhi.n	800949e <__exponent+0x6a>
 8009488:	2300      	movs	r3, #0
 800948a:	42a2      	cmp	r2, r4
 800948c:	d803      	bhi.n	8009496 <__exponent+0x62>
 800948e:	3309      	adds	r3, #9
 8009490:	aa02      	add	r2, sp, #8
 8009492:	189b      	adds	r3, r3, r2
 8009494:	1bdb      	subs	r3, r3, r7
 8009496:	18c0      	adds	r0, r0, r3
 8009498:	1b40      	subs	r0, r0, r5
 800949a:	b005      	add	sp, #20
 800949c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800949e:	781c      	ldrb	r4, [r3, #0]
 80094a0:	3301      	adds	r3, #1
 80094a2:	700c      	strb	r4, [r1, #0]
 80094a4:	3101      	adds	r1, #1
 80094a6:	e7eb      	b.n	8009480 <__exponent+0x4c>
 80094a8:	2330      	movs	r3, #48	@ 0x30
 80094aa:	18e4      	adds	r4, r4, r3
 80094ac:	70ab      	strb	r3, [r5, #2]
 80094ae:	1d28      	adds	r0, r5, #4
 80094b0:	70ec      	strb	r4, [r5, #3]
 80094b2:	e7f1      	b.n	8009498 <__exponent+0x64>

080094b4 <_printf_float>:
 80094b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094b6:	b097      	sub	sp, #92	@ 0x5c
 80094b8:	000d      	movs	r5, r1
 80094ba:	920a      	str	r2, [sp, #40]	@ 0x28
 80094bc:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80094be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094c0:	9009      	str	r0, [sp, #36]	@ 0x24
 80094c2:	f000 fc9f 	bl	8009e04 <_localeconv_r>
 80094c6:	6803      	ldr	r3, [r0, #0]
 80094c8:	0018      	movs	r0, r3
 80094ca:	930d      	str	r3, [sp, #52]	@ 0x34
 80094cc:	f7f6 fe18 	bl	8000100 <strlen>
 80094d0:	2300      	movs	r3, #0
 80094d2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80094d4:	9314      	str	r3, [sp, #80]	@ 0x50
 80094d6:	7e2b      	ldrb	r3, [r5, #24]
 80094d8:	2207      	movs	r2, #7
 80094da:	930c      	str	r3, [sp, #48]	@ 0x30
 80094dc:	682b      	ldr	r3, [r5, #0]
 80094de:	930e      	str	r3, [sp, #56]	@ 0x38
 80094e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80094e2:	6823      	ldr	r3, [r4, #0]
 80094e4:	05c9      	lsls	r1, r1, #23
 80094e6:	d545      	bpl.n	8009574 <_printf_float+0xc0>
 80094e8:	189b      	adds	r3, r3, r2
 80094ea:	4393      	bics	r3, r2
 80094ec:	001a      	movs	r2, r3
 80094ee:	3208      	adds	r2, #8
 80094f0:	6022      	str	r2, [r4, #0]
 80094f2:	2201      	movs	r2, #1
 80094f4:	681e      	ldr	r6, [r3, #0]
 80094f6:	685f      	ldr	r7, [r3, #4]
 80094f8:	007b      	lsls	r3, r7, #1
 80094fa:	085b      	lsrs	r3, r3, #1
 80094fc:	9311      	str	r3, [sp, #68]	@ 0x44
 80094fe:	9610      	str	r6, [sp, #64]	@ 0x40
 8009500:	64ae      	str	r6, [r5, #72]	@ 0x48
 8009502:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8009504:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009506:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009508:	4ba7      	ldr	r3, [pc, #668]	@ (80097a8 <_printf_float+0x2f4>)
 800950a:	4252      	negs	r2, r2
 800950c:	f7f8 fff2 	bl	80024f4 <__aeabi_dcmpun>
 8009510:	2800      	cmp	r0, #0
 8009512:	d131      	bne.n	8009578 <_printf_float+0xc4>
 8009514:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009516:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009518:	2201      	movs	r2, #1
 800951a:	4ba3      	ldr	r3, [pc, #652]	@ (80097a8 <_printf_float+0x2f4>)
 800951c:	4252      	negs	r2, r2
 800951e:	f7f6 ffa1 	bl	8000464 <__aeabi_dcmple>
 8009522:	2800      	cmp	r0, #0
 8009524:	d128      	bne.n	8009578 <_printf_float+0xc4>
 8009526:	2200      	movs	r2, #0
 8009528:	2300      	movs	r3, #0
 800952a:	0030      	movs	r0, r6
 800952c:	0039      	movs	r1, r7
 800952e:	f7f6 ff8f 	bl	8000450 <__aeabi_dcmplt>
 8009532:	2800      	cmp	r0, #0
 8009534:	d003      	beq.n	800953e <_printf_float+0x8a>
 8009536:	002b      	movs	r3, r5
 8009538:	222d      	movs	r2, #45	@ 0x2d
 800953a:	3343      	adds	r3, #67	@ 0x43
 800953c:	701a      	strb	r2, [r3, #0]
 800953e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009540:	4f9a      	ldr	r7, [pc, #616]	@ (80097ac <_printf_float+0x2f8>)
 8009542:	2b47      	cmp	r3, #71	@ 0x47
 8009544:	d900      	bls.n	8009548 <_printf_float+0x94>
 8009546:	4f9a      	ldr	r7, [pc, #616]	@ (80097b0 <_printf_float+0x2fc>)
 8009548:	2303      	movs	r3, #3
 800954a:	2400      	movs	r4, #0
 800954c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800954e:	612b      	str	r3, [r5, #16]
 8009550:	3301      	adds	r3, #1
 8009552:	439a      	bics	r2, r3
 8009554:	602a      	str	r2, [r5, #0]
 8009556:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009558:	0029      	movs	r1, r5
 800955a:	9300      	str	r3, [sp, #0]
 800955c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800955e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009560:	aa15      	add	r2, sp, #84	@ 0x54
 8009562:	f000 f9e5 	bl	8009930 <_printf_common>
 8009566:	3001      	adds	r0, #1
 8009568:	d000      	beq.n	800956c <_printf_float+0xb8>
 800956a:	e09f      	b.n	80096ac <_printf_float+0x1f8>
 800956c:	2001      	movs	r0, #1
 800956e:	4240      	negs	r0, r0
 8009570:	b017      	add	sp, #92	@ 0x5c
 8009572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009574:	3307      	adds	r3, #7
 8009576:	e7b8      	b.n	80094ea <_printf_float+0x36>
 8009578:	0032      	movs	r2, r6
 800957a:	003b      	movs	r3, r7
 800957c:	0030      	movs	r0, r6
 800957e:	0039      	movs	r1, r7
 8009580:	f7f8 ffb8 	bl	80024f4 <__aeabi_dcmpun>
 8009584:	2800      	cmp	r0, #0
 8009586:	d00b      	beq.n	80095a0 <_printf_float+0xec>
 8009588:	2f00      	cmp	r7, #0
 800958a:	da03      	bge.n	8009594 <_printf_float+0xe0>
 800958c:	002b      	movs	r3, r5
 800958e:	222d      	movs	r2, #45	@ 0x2d
 8009590:	3343      	adds	r3, #67	@ 0x43
 8009592:	701a      	strb	r2, [r3, #0]
 8009594:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009596:	4f87      	ldr	r7, [pc, #540]	@ (80097b4 <_printf_float+0x300>)
 8009598:	2b47      	cmp	r3, #71	@ 0x47
 800959a:	d9d5      	bls.n	8009548 <_printf_float+0x94>
 800959c:	4f86      	ldr	r7, [pc, #536]	@ (80097b8 <_printf_float+0x304>)
 800959e:	e7d3      	b.n	8009548 <_printf_float+0x94>
 80095a0:	2220      	movs	r2, #32
 80095a2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80095a4:	686b      	ldr	r3, [r5, #4]
 80095a6:	4394      	bics	r4, r2
 80095a8:	1c5a      	adds	r2, r3, #1
 80095aa:	d146      	bne.n	800963a <_printf_float+0x186>
 80095ac:	3307      	adds	r3, #7
 80095ae:	606b      	str	r3, [r5, #4]
 80095b0:	2380      	movs	r3, #128	@ 0x80
 80095b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095b4:	00db      	lsls	r3, r3, #3
 80095b6:	4313      	orrs	r3, r2
 80095b8:	2200      	movs	r2, #0
 80095ba:	602b      	str	r3, [r5, #0]
 80095bc:	9206      	str	r2, [sp, #24]
 80095be:	aa14      	add	r2, sp, #80	@ 0x50
 80095c0:	9205      	str	r2, [sp, #20]
 80095c2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80095c4:	a90a      	add	r1, sp, #40	@ 0x28
 80095c6:	9204      	str	r2, [sp, #16]
 80095c8:	aa13      	add	r2, sp, #76	@ 0x4c
 80095ca:	9203      	str	r2, [sp, #12]
 80095cc:	2223      	movs	r2, #35	@ 0x23
 80095ce:	1852      	adds	r2, r2, r1
 80095d0:	9202      	str	r2, [sp, #8]
 80095d2:	9301      	str	r3, [sp, #4]
 80095d4:	686b      	ldr	r3, [r5, #4]
 80095d6:	0032      	movs	r2, r6
 80095d8:	9300      	str	r3, [sp, #0]
 80095da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80095dc:	003b      	movs	r3, r7
 80095de:	f7ff fec3 	bl	8009368 <__cvt>
 80095e2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80095e4:	0007      	movs	r7, r0
 80095e6:	2c47      	cmp	r4, #71	@ 0x47
 80095e8:	d12d      	bne.n	8009646 <_printf_float+0x192>
 80095ea:	1cd3      	adds	r3, r2, #3
 80095ec:	db02      	blt.n	80095f4 <_printf_float+0x140>
 80095ee:	686b      	ldr	r3, [r5, #4]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	dd48      	ble.n	8009686 <_printf_float+0x1d2>
 80095f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80095f6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80095f8:	3b02      	subs	r3, #2
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80095fe:	0028      	movs	r0, r5
 8009600:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009602:	3901      	subs	r1, #1
 8009604:	3050      	adds	r0, #80	@ 0x50
 8009606:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009608:	f7ff ff14 	bl	8009434 <__exponent>
 800960c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800960e:	0004      	movs	r4, r0
 8009610:	1813      	adds	r3, r2, r0
 8009612:	612b      	str	r3, [r5, #16]
 8009614:	2a01      	cmp	r2, #1
 8009616:	dc02      	bgt.n	800961e <_printf_float+0x16a>
 8009618:	682a      	ldr	r2, [r5, #0]
 800961a:	07d2      	lsls	r2, r2, #31
 800961c:	d501      	bpl.n	8009622 <_printf_float+0x16e>
 800961e:	3301      	adds	r3, #1
 8009620:	612b      	str	r3, [r5, #16]
 8009622:	2323      	movs	r3, #35	@ 0x23
 8009624:	aa0a      	add	r2, sp, #40	@ 0x28
 8009626:	189b      	adds	r3, r3, r2
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d100      	bne.n	8009630 <_printf_float+0x17c>
 800962e:	e792      	b.n	8009556 <_printf_float+0xa2>
 8009630:	002b      	movs	r3, r5
 8009632:	222d      	movs	r2, #45	@ 0x2d
 8009634:	3343      	adds	r3, #67	@ 0x43
 8009636:	701a      	strb	r2, [r3, #0]
 8009638:	e78d      	b.n	8009556 <_printf_float+0xa2>
 800963a:	2c47      	cmp	r4, #71	@ 0x47
 800963c:	d1b8      	bne.n	80095b0 <_printf_float+0xfc>
 800963e:	2b00      	cmp	r3, #0
 8009640:	d1b6      	bne.n	80095b0 <_printf_float+0xfc>
 8009642:	3301      	adds	r3, #1
 8009644:	e7b3      	b.n	80095ae <_printf_float+0xfa>
 8009646:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009648:	0011      	movs	r1, r2
 800964a:	2b65      	cmp	r3, #101	@ 0x65
 800964c:	d9d7      	bls.n	80095fe <_printf_float+0x14a>
 800964e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009650:	2b66      	cmp	r3, #102	@ 0x66
 8009652:	d11a      	bne.n	800968a <_printf_float+0x1d6>
 8009654:	686b      	ldr	r3, [r5, #4]
 8009656:	2a00      	cmp	r2, #0
 8009658:	dd09      	ble.n	800966e <_printf_float+0x1ba>
 800965a:	612a      	str	r2, [r5, #16]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d102      	bne.n	8009666 <_printf_float+0x1b2>
 8009660:	6829      	ldr	r1, [r5, #0]
 8009662:	07c9      	lsls	r1, r1, #31
 8009664:	d50b      	bpl.n	800967e <_printf_float+0x1ca>
 8009666:	3301      	adds	r3, #1
 8009668:	189b      	adds	r3, r3, r2
 800966a:	612b      	str	r3, [r5, #16]
 800966c:	e007      	b.n	800967e <_printf_float+0x1ca>
 800966e:	2b00      	cmp	r3, #0
 8009670:	d103      	bne.n	800967a <_printf_float+0x1c6>
 8009672:	2201      	movs	r2, #1
 8009674:	6829      	ldr	r1, [r5, #0]
 8009676:	4211      	tst	r1, r2
 8009678:	d000      	beq.n	800967c <_printf_float+0x1c8>
 800967a:	1c9a      	adds	r2, r3, #2
 800967c:	612a      	str	r2, [r5, #16]
 800967e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009680:	2400      	movs	r4, #0
 8009682:	65ab      	str	r3, [r5, #88]	@ 0x58
 8009684:	e7cd      	b.n	8009622 <_printf_float+0x16e>
 8009686:	2367      	movs	r3, #103	@ 0x67
 8009688:	930c      	str	r3, [sp, #48]	@ 0x30
 800968a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800968c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800968e:	4299      	cmp	r1, r3
 8009690:	db06      	blt.n	80096a0 <_printf_float+0x1ec>
 8009692:	682b      	ldr	r3, [r5, #0]
 8009694:	6129      	str	r1, [r5, #16]
 8009696:	07db      	lsls	r3, r3, #31
 8009698:	d5f1      	bpl.n	800967e <_printf_float+0x1ca>
 800969a:	3101      	adds	r1, #1
 800969c:	6129      	str	r1, [r5, #16]
 800969e:	e7ee      	b.n	800967e <_printf_float+0x1ca>
 80096a0:	2201      	movs	r2, #1
 80096a2:	2900      	cmp	r1, #0
 80096a4:	dce0      	bgt.n	8009668 <_printf_float+0x1b4>
 80096a6:	1892      	adds	r2, r2, r2
 80096a8:	1a52      	subs	r2, r2, r1
 80096aa:	e7dd      	b.n	8009668 <_printf_float+0x1b4>
 80096ac:	682a      	ldr	r2, [r5, #0]
 80096ae:	0553      	lsls	r3, r2, #21
 80096b0:	d408      	bmi.n	80096c4 <_printf_float+0x210>
 80096b2:	692b      	ldr	r3, [r5, #16]
 80096b4:	003a      	movs	r2, r7
 80096b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80096b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80096ba:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80096bc:	47a0      	blx	r4
 80096be:	3001      	adds	r0, #1
 80096c0:	d129      	bne.n	8009716 <_printf_float+0x262>
 80096c2:	e753      	b.n	800956c <_printf_float+0xb8>
 80096c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80096c6:	2b65      	cmp	r3, #101	@ 0x65
 80096c8:	d800      	bhi.n	80096cc <_printf_float+0x218>
 80096ca:	e0da      	b.n	8009882 <_printf_float+0x3ce>
 80096cc:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80096ce:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80096d0:	2200      	movs	r2, #0
 80096d2:	2300      	movs	r3, #0
 80096d4:	f7f6 feb6 	bl	8000444 <__aeabi_dcmpeq>
 80096d8:	2800      	cmp	r0, #0
 80096da:	d033      	beq.n	8009744 <_printf_float+0x290>
 80096dc:	2301      	movs	r3, #1
 80096de:	4a37      	ldr	r2, [pc, #220]	@ (80097bc <_printf_float+0x308>)
 80096e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80096e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80096e4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80096e6:	47a0      	blx	r4
 80096e8:	3001      	adds	r0, #1
 80096ea:	d100      	bne.n	80096ee <_printf_float+0x23a>
 80096ec:	e73e      	b.n	800956c <_printf_float+0xb8>
 80096ee:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80096f0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80096f2:	42b3      	cmp	r3, r6
 80096f4:	db02      	blt.n	80096fc <_printf_float+0x248>
 80096f6:	682b      	ldr	r3, [r5, #0]
 80096f8:	07db      	lsls	r3, r3, #31
 80096fa:	d50c      	bpl.n	8009716 <_printf_float+0x262>
 80096fc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80096fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009700:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009702:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009704:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009706:	47a0      	blx	r4
 8009708:	2400      	movs	r4, #0
 800970a:	3001      	adds	r0, #1
 800970c:	d100      	bne.n	8009710 <_printf_float+0x25c>
 800970e:	e72d      	b.n	800956c <_printf_float+0xb8>
 8009710:	1e73      	subs	r3, r6, #1
 8009712:	42a3      	cmp	r3, r4
 8009714:	dc0a      	bgt.n	800972c <_printf_float+0x278>
 8009716:	682b      	ldr	r3, [r5, #0]
 8009718:	079b      	lsls	r3, r3, #30
 800971a:	d500      	bpl.n	800971e <_printf_float+0x26a>
 800971c:	e105      	b.n	800992a <_printf_float+0x476>
 800971e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009720:	68e8      	ldr	r0, [r5, #12]
 8009722:	4298      	cmp	r0, r3
 8009724:	db00      	blt.n	8009728 <_printf_float+0x274>
 8009726:	e723      	b.n	8009570 <_printf_float+0xbc>
 8009728:	0018      	movs	r0, r3
 800972a:	e721      	b.n	8009570 <_printf_float+0xbc>
 800972c:	002a      	movs	r2, r5
 800972e:	2301      	movs	r3, #1
 8009730:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009732:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009734:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009736:	321a      	adds	r2, #26
 8009738:	47b8      	blx	r7
 800973a:	3001      	adds	r0, #1
 800973c:	d100      	bne.n	8009740 <_printf_float+0x28c>
 800973e:	e715      	b.n	800956c <_printf_float+0xb8>
 8009740:	3401      	adds	r4, #1
 8009742:	e7e5      	b.n	8009710 <_printf_float+0x25c>
 8009744:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009746:	2b00      	cmp	r3, #0
 8009748:	dc3a      	bgt.n	80097c0 <_printf_float+0x30c>
 800974a:	2301      	movs	r3, #1
 800974c:	4a1b      	ldr	r2, [pc, #108]	@ (80097bc <_printf_float+0x308>)
 800974e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009750:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009752:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009754:	47a0      	blx	r4
 8009756:	3001      	adds	r0, #1
 8009758:	d100      	bne.n	800975c <_printf_float+0x2a8>
 800975a:	e707      	b.n	800956c <_printf_float+0xb8>
 800975c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800975e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009760:	4333      	orrs	r3, r6
 8009762:	d102      	bne.n	800976a <_printf_float+0x2b6>
 8009764:	682b      	ldr	r3, [r5, #0]
 8009766:	07db      	lsls	r3, r3, #31
 8009768:	d5d5      	bpl.n	8009716 <_printf_float+0x262>
 800976a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800976c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800976e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009770:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009772:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009774:	47a0      	blx	r4
 8009776:	2300      	movs	r3, #0
 8009778:	3001      	adds	r0, #1
 800977a:	d100      	bne.n	800977e <_printf_float+0x2ca>
 800977c:	e6f6      	b.n	800956c <_printf_float+0xb8>
 800977e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009780:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009782:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009784:	425b      	negs	r3, r3
 8009786:	4293      	cmp	r3, r2
 8009788:	dc01      	bgt.n	800978e <_printf_float+0x2da>
 800978a:	0033      	movs	r3, r6
 800978c:	e792      	b.n	80096b4 <_printf_float+0x200>
 800978e:	002a      	movs	r2, r5
 8009790:	2301      	movs	r3, #1
 8009792:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009794:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009796:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009798:	321a      	adds	r2, #26
 800979a:	47a0      	blx	r4
 800979c:	3001      	adds	r0, #1
 800979e:	d100      	bne.n	80097a2 <_printf_float+0x2ee>
 80097a0:	e6e4      	b.n	800956c <_printf_float+0xb8>
 80097a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097a4:	3301      	adds	r3, #1
 80097a6:	e7ea      	b.n	800977e <_printf_float+0x2ca>
 80097a8:	7fefffff 	.word	0x7fefffff
 80097ac:	0800c3d8 	.word	0x0800c3d8
 80097b0:	0800c3dc 	.word	0x0800c3dc
 80097b4:	0800c3e0 	.word	0x0800c3e0
 80097b8:	0800c3e4 	.word	0x0800c3e4
 80097bc:	0800c3e8 	.word	0x0800c3e8
 80097c0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80097c2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80097c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80097c6:	429e      	cmp	r6, r3
 80097c8:	dd00      	ble.n	80097cc <_printf_float+0x318>
 80097ca:	001e      	movs	r6, r3
 80097cc:	2e00      	cmp	r6, #0
 80097ce:	dc31      	bgt.n	8009834 <_printf_float+0x380>
 80097d0:	43f3      	mvns	r3, r6
 80097d2:	2400      	movs	r4, #0
 80097d4:	17db      	asrs	r3, r3, #31
 80097d6:	4033      	ands	r3, r6
 80097d8:	930e      	str	r3, [sp, #56]	@ 0x38
 80097da:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80097dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097de:	1af3      	subs	r3, r6, r3
 80097e0:	42a3      	cmp	r3, r4
 80097e2:	dc30      	bgt.n	8009846 <_printf_float+0x392>
 80097e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80097e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80097e8:	429a      	cmp	r2, r3
 80097ea:	dc38      	bgt.n	800985e <_printf_float+0x3aa>
 80097ec:	682b      	ldr	r3, [r5, #0]
 80097ee:	07db      	lsls	r3, r3, #31
 80097f0:	d435      	bmi.n	800985e <_printf_float+0x3aa>
 80097f2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80097f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097f6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80097f8:	1b9b      	subs	r3, r3, r6
 80097fa:	1b14      	subs	r4, r2, r4
 80097fc:	429c      	cmp	r4, r3
 80097fe:	dd00      	ble.n	8009802 <_printf_float+0x34e>
 8009800:	001c      	movs	r4, r3
 8009802:	2c00      	cmp	r4, #0
 8009804:	dc34      	bgt.n	8009870 <_printf_float+0x3bc>
 8009806:	43e3      	mvns	r3, r4
 8009808:	2600      	movs	r6, #0
 800980a:	17db      	asrs	r3, r3, #31
 800980c:	401c      	ands	r4, r3
 800980e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009810:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009812:	1ad3      	subs	r3, r2, r3
 8009814:	1b1b      	subs	r3, r3, r4
 8009816:	42b3      	cmp	r3, r6
 8009818:	dc00      	bgt.n	800981c <_printf_float+0x368>
 800981a:	e77c      	b.n	8009716 <_printf_float+0x262>
 800981c:	002a      	movs	r2, r5
 800981e:	2301      	movs	r3, #1
 8009820:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009822:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009824:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009826:	321a      	adds	r2, #26
 8009828:	47b8      	blx	r7
 800982a:	3001      	adds	r0, #1
 800982c:	d100      	bne.n	8009830 <_printf_float+0x37c>
 800982e:	e69d      	b.n	800956c <_printf_float+0xb8>
 8009830:	3601      	adds	r6, #1
 8009832:	e7ec      	b.n	800980e <_printf_float+0x35a>
 8009834:	0033      	movs	r3, r6
 8009836:	003a      	movs	r2, r7
 8009838:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800983a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800983c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800983e:	47a0      	blx	r4
 8009840:	3001      	adds	r0, #1
 8009842:	d1c5      	bne.n	80097d0 <_printf_float+0x31c>
 8009844:	e692      	b.n	800956c <_printf_float+0xb8>
 8009846:	002a      	movs	r2, r5
 8009848:	2301      	movs	r3, #1
 800984a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800984c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800984e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009850:	321a      	adds	r2, #26
 8009852:	47b0      	blx	r6
 8009854:	3001      	adds	r0, #1
 8009856:	d100      	bne.n	800985a <_printf_float+0x3a6>
 8009858:	e688      	b.n	800956c <_printf_float+0xb8>
 800985a:	3401      	adds	r4, #1
 800985c:	e7bd      	b.n	80097da <_printf_float+0x326>
 800985e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009860:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009862:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009864:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009866:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009868:	47a0      	blx	r4
 800986a:	3001      	adds	r0, #1
 800986c:	d1c1      	bne.n	80097f2 <_printf_float+0x33e>
 800986e:	e67d      	b.n	800956c <_printf_float+0xb8>
 8009870:	19ba      	adds	r2, r7, r6
 8009872:	0023      	movs	r3, r4
 8009874:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009876:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009878:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800987a:	47b0      	blx	r6
 800987c:	3001      	adds	r0, #1
 800987e:	d1c2      	bne.n	8009806 <_printf_float+0x352>
 8009880:	e674      	b.n	800956c <_printf_float+0xb8>
 8009882:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009884:	930c      	str	r3, [sp, #48]	@ 0x30
 8009886:	2b01      	cmp	r3, #1
 8009888:	dc02      	bgt.n	8009890 <_printf_float+0x3dc>
 800988a:	2301      	movs	r3, #1
 800988c:	421a      	tst	r2, r3
 800988e:	d039      	beq.n	8009904 <_printf_float+0x450>
 8009890:	2301      	movs	r3, #1
 8009892:	003a      	movs	r2, r7
 8009894:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009896:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009898:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800989a:	47b0      	blx	r6
 800989c:	3001      	adds	r0, #1
 800989e:	d100      	bne.n	80098a2 <_printf_float+0x3ee>
 80098a0:	e664      	b.n	800956c <_printf_float+0xb8>
 80098a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80098a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80098a8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098aa:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80098ac:	47b0      	blx	r6
 80098ae:	3001      	adds	r0, #1
 80098b0:	d100      	bne.n	80098b4 <_printf_float+0x400>
 80098b2:	e65b      	b.n	800956c <_printf_float+0xb8>
 80098b4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80098b6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80098b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098ba:	2200      	movs	r2, #0
 80098bc:	3b01      	subs	r3, #1
 80098be:	930c      	str	r3, [sp, #48]	@ 0x30
 80098c0:	2300      	movs	r3, #0
 80098c2:	f7f6 fdbf 	bl	8000444 <__aeabi_dcmpeq>
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d11a      	bne.n	8009900 <_printf_float+0x44c>
 80098ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098cc:	1c7a      	adds	r2, r7, #1
 80098ce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80098d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098d2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80098d4:	47b0      	blx	r6
 80098d6:	3001      	adds	r0, #1
 80098d8:	d10e      	bne.n	80098f8 <_printf_float+0x444>
 80098da:	e647      	b.n	800956c <_printf_float+0xb8>
 80098dc:	002a      	movs	r2, r5
 80098de:	2301      	movs	r3, #1
 80098e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80098e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098e4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80098e6:	321a      	adds	r2, #26
 80098e8:	47b8      	blx	r7
 80098ea:	3001      	adds	r0, #1
 80098ec:	d100      	bne.n	80098f0 <_printf_float+0x43c>
 80098ee:	e63d      	b.n	800956c <_printf_float+0xb8>
 80098f0:	3601      	adds	r6, #1
 80098f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098f4:	429e      	cmp	r6, r3
 80098f6:	dbf1      	blt.n	80098dc <_printf_float+0x428>
 80098f8:	002a      	movs	r2, r5
 80098fa:	0023      	movs	r3, r4
 80098fc:	3250      	adds	r2, #80	@ 0x50
 80098fe:	e6da      	b.n	80096b6 <_printf_float+0x202>
 8009900:	2600      	movs	r6, #0
 8009902:	e7f6      	b.n	80098f2 <_printf_float+0x43e>
 8009904:	003a      	movs	r2, r7
 8009906:	e7e2      	b.n	80098ce <_printf_float+0x41a>
 8009908:	002a      	movs	r2, r5
 800990a:	2301      	movs	r3, #1
 800990c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800990e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009910:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009912:	3219      	adds	r2, #25
 8009914:	47b0      	blx	r6
 8009916:	3001      	adds	r0, #1
 8009918:	d100      	bne.n	800991c <_printf_float+0x468>
 800991a:	e627      	b.n	800956c <_printf_float+0xb8>
 800991c:	3401      	adds	r4, #1
 800991e:	68eb      	ldr	r3, [r5, #12]
 8009920:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009922:	1a9b      	subs	r3, r3, r2
 8009924:	42a3      	cmp	r3, r4
 8009926:	dcef      	bgt.n	8009908 <_printf_float+0x454>
 8009928:	e6f9      	b.n	800971e <_printf_float+0x26a>
 800992a:	2400      	movs	r4, #0
 800992c:	e7f7      	b.n	800991e <_printf_float+0x46a>
 800992e:	46c0      	nop			@ (mov r8, r8)

08009930 <_printf_common>:
 8009930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009932:	0016      	movs	r6, r2
 8009934:	9301      	str	r3, [sp, #4]
 8009936:	688a      	ldr	r2, [r1, #8]
 8009938:	690b      	ldr	r3, [r1, #16]
 800993a:	000c      	movs	r4, r1
 800993c:	9000      	str	r0, [sp, #0]
 800993e:	4293      	cmp	r3, r2
 8009940:	da00      	bge.n	8009944 <_printf_common+0x14>
 8009942:	0013      	movs	r3, r2
 8009944:	0022      	movs	r2, r4
 8009946:	6033      	str	r3, [r6, #0]
 8009948:	3243      	adds	r2, #67	@ 0x43
 800994a:	7812      	ldrb	r2, [r2, #0]
 800994c:	2a00      	cmp	r2, #0
 800994e:	d001      	beq.n	8009954 <_printf_common+0x24>
 8009950:	3301      	adds	r3, #1
 8009952:	6033      	str	r3, [r6, #0]
 8009954:	6823      	ldr	r3, [r4, #0]
 8009956:	069b      	lsls	r3, r3, #26
 8009958:	d502      	bpl.n	8009960 <_printf_common+0x30>
 800995a:	6833      	ldr	r3, [r6, #0]
 800995c:	3302      	adds	r3, #2
 800995e:	6033      	str	r3, [r6, #0]
 8009960:	6822      	ldr	r2, [r4, #0]
 8009962:	2306      	movs	r3, #6
 8009964:	0015      	movs	r5, r2
 8009966:	401d      	ands	r5, r3
 8009968:	421a      	tst	r2, r3
 800996a:	d027      	beq.n	80099bc <_printf_common+0x8c>
 800996c:	0023      	movs	r3, r4
 800996e:	3343      	adds	r3, #67	@ 0x43
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	1e5a      	subs	r2, r3, #1
 8009974:	4193      	sbcs	r3, r2
 8009976:	6822      	ldr	r2, [r4, #0]
 8009978:	0692      	lsls	r2, r2, #26
 800997a:	d430      	bmi.n	80099de <_printf_common+0xae>
 800997c:	0022      	movs	r2, r4
 800997e:	9901      	ldr	r1, [sp, #4]
 8009980:	9800      	ldr	r0, [sp, #0]
 8009982:	9d08      	ldr	r5, [sp, #32]
 8009984:	3243      	adds	r2, #67	@ 0x43
 8009986:	47a8      	blx	r5
 8009988:	3001      	adds	r0, #1
 800998a:	d025      	beq.n	80099d8 <_printf_common+0xa8>
 800998c:	2206      	movs	r2, #6
 800998e:	6823      	ldr	r3, [r4, #0]
 8009990:	2500      	movs	r5, #0
 8009992:	4013      	ands	r3, r2
 8009994:	2b04      	cmp	r3, #4
 8009996:	d105      	bne.n	80099a4 <_printf_common+0x74>
 8009998:	6833      	ldr	r3, [r6, #0]
 800999a:	68e5      	ldr	r5, [r4, #12]
 800999c:	1aed      	subs	r5, r5, r3
 800999e:	43eb      	mvns	r3, r5
 80099a0:	17db      	asrs	r3, r3, #31
 80099a2:	401d      	ands	r5, r3
 80099a4:	68a3      	ldr	r3, [r4, #8]
 80099a6:	6922      	ldr	r2, [r4, #16]
 80099a8:	4293      	cmp	r3, r2
 80099aa:	dd01      	ble.n	80099b0 <_printf_common+0x80>
 80099ac:	1a9b      	subs	r3, r3, r2
 80099ae:	18ed      	adds	r5, r5, r3
 80099b0:	2600      	movs	r6, #0
 80099b2:	42b5      	cmp	r5, r6
 80099b4:	d120      	bne.n	80099f8 <_printf_common+0xc8>
 80099b6:	2000      	movs	r0, #0
 80099b8:	e010      	b.n	80099dc <_printf_common+0xac>
 80099ba:	3501      	adds	r5, #1
 80099bc:	68e3      	ldr	r3, [r4, #12]
 80099be:	6832      	ldr	r2, [r6, #0]
 80099c0:	1a9b      	subs	r3, r3, r2
 80099c2:	42ab      	cmp	r3, r5
 80099c4:	ddd2      	ble.n	800996c <_printf_common+0x3c>
 80099c6:	0022      	movs	r2, r4
 80099c8:	2301      	movs	r3, #1
 80099ca:	9901      	ldr	r1, [sp, #4]
 80099cc:	9800      	ldr	r0, [sp, #0]
 80099ce:	9f08      	ldr	r7, [sp, #32]
 80099d0:	3219      	adds	r2, #25
 80099d2:	47b8      	blx	r7
 80099d4:	3001      	adds	r0, #1
 80099d6:	d1f0      	bne.n	80099ba <_printf_common+0x8a>
 80099d8:	2001      	movs	r0, #1
 80099da:	4240      	negs	r0, r0
 80099dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80099de:	2030      	movs	r0, #48	@ 0x30
 80099e0:	18e1      	adds	r1, r4, r3
 80099e2:	3143      	adds	r1, #67	@ 0x43
 80099e4:	7008      	strb	r0, [r1, #0]
 80099e6:	0021      	movs	r1, r4
 80099e8:	1c5a      	adds	r2, r3, #1
 80099ea:	3145      	adds	r1, #69	@ 0x45
 80099ec:	7809      	ldrb	r1, [r1, #0]
 80099ee:	18a2      	adds	r2, r4, r2
 80099f0:	3243      	adds	r2, #67	@ 0x43
 80099f2:	3302      	adds	r3, #2
 80099f4:	7011      	strb	r1, [r2, #0]
 80099f6:	e7c1      	b.n	800997c <_printf_common+0x4c>
 80099f8:	0022      	movs	r2, r4
 80099fa:	2301      	movs	r3, #1
 80099fc:	9901      	ldr	r1, [sp, #4]
 80099fe:	9800      	ldr	r0, [sp, #0]
 8009a00:	9f08      	ldr	r7, [sp, #32]
 8009a02:	321a      	adds	r2, #26
 8009a04:	47b8      	blx	r7
 8009a06:	3001      	adds	r0, #1
 8009a08:	d0e6      	beq.n	80099d8 <_printf_common+0xa8>
 8009a0a:	3601      	adds	r6, #1
 8009a0c:	e7d1      	b.n	80099b2 <_printf_common+0x82>
	...

08009a10 <_printf_i>:
 8009a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a12:	b08b      	sub	sp, #44	@ 0x2c
 8009a14:	9206      	str	r2, [sp, #24]
 8009a16:	000a      	movs	r2, r1
 8009a18:	3243      	adds	r2, #67	@ 0x43
 8009a1a:	9307      	str	r3, [sp, #28]
 8009a1c:	9005      	str	r0, [sp, #20]
 8009a1e:	9203      	str	r2, [sp, #12]
 8009a20:	7e0a      	ldrb	r2, [r1, #24]
 8009a22:	000c      	movs	r4, r1
 8009a24:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009a26:	2a78      	cmp	r2, #120	@ 0x78
 8009a28:	d809      	bhi.n	8009a3e <_printf_i+0x2e>
 8009a2a:	2a62      	cmp	r2, #98	@ 0x62
 8009a2c:	d80b      	bhi.n	8009a46 <_printf_i+0x36>
 8009a2e:	2a00      	cmp	r2, #0
 8009a30:	d100      	bne.n	8009a34 <_printf_i+0x24>
 8009a32:	e0bc      	b.n	8009bae <_printf_i+0x19e>
 8009a34:	497b      	ldr	r1, [pc, #492]	@ (8009c24 <_printf_i+0x214>)
 8009a36:	9104      	str	r1, [sp, #16]
 8009a38:	2a58      	cmp	r2, #88	@ 0x58
 8009a3a:	d100      	bne.n	8009a3e <_printf_i+0x2e>
 8009a3c:	e090      	b.n	8009b60 <_printf_i+0x150>
 8009a3e:	0025      	movs	r5, r4
 8009a40:	3542      	adds	r5, #66	@ 0x42
 8009a42:	702a      	strb	r2, [r5, #0]
 8009a44:	e022      	b.n	8009a8c <_printf_i+0x7c>
 8009a46:	0010      	movs	r0, r2
 8009a48:	3863      	subs	r0, #99	@ 0x63
 8009a4a:	2815      	cmp	r0, #21
 8009a4c:	d8f7      	bhi.n	8009a3e <_printf_i+0x2e>
 8009a4e:	f7f6 fb69 	bl	8000124 <__gnu_thumb1_case_shi>
 8009a52:	0016      	.short	0x0016
 8009a54:	fff6001f 	.word	0xfff6001f
 8009a58:	fff6fff6 	.word	0xfff6fff6
 8009a5c:	001ffff6 	.word	0x001ffff6
 8009a60:	fff6fff6 	.word	0xfff6fff6
 8009a64:	fff6fff6 	.word	0xfff6fff6
 8009a68:	003600a1 	.word	0x003600a1
 8009a6c:	fff60080 	.word	0xfff60080
 8009a70:	00b2fff6 	.word	0x00b2fff6
 8009a74:	0036fff6 	.word	0x0036fff6
 8009a78:	fff6fff6 	.word	0xfff6fff6
 8009a7c:	0084      	.short	0x0084
 8009a7e:	0025      	movs	r5, r4
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	3542      	adds	r5, #66	@ 0x42
 8009a84:	1d11      	adds	r1, r2, #4
 8009a86:	6019      	str	r1, [r3, #0]
 8009a88:	6813      	ldr	r3, [r2, #0]
 8009a8a:	702b      	strb	r3, [r5, #0]
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	e0a0      	b.n	8009bd2 <_printf_i+0x1c2>
 8009a90:	6818      	ldr	r0, [r3, #0]
 8009a92:	6809      	ldr	r1, [r1, #0]
 8009a94:	1d02      	adds	r2, r0, #4
 8009a96:	060d      	lsls	r5, r1, #24
 8009a98:	d50b      	bpl.n	8009ab2 <_printf_i+0xa2>
 8009a9a:	6806      	ldr	r6, [r0, #0]
 8009a9c:	601a      	str	r2, [r3, #0]
 8009a9e:	2e00      	cmp	r6, #0
 8009aa0:	da03      	bge.n	8009aaa <_printf_i+0x9a>
 8009aa2:	232d      	movs	r3, #45	@ 0x2d
 8009aa4:	9a03      	ldr	r2, [sp, #12]
 8009aa6:	4276      	negs	r6, r6
 8009aa8:	7013      	strb	r3, [r2, #0]
 8009aaa:	4b5e      	ldr	r3, [pc, #376]	@ (8009c24 <_printf_i+0x214>)
 8009aac:	270a      	movs	r7, #10
 8009aae:	9304      	str	r3, [sp, #16]
 8009ab0:	e018      	b.n	8009ae4 <_printf_i+0xd4>
 8009ab2:	6806      	ldr	r6, [r0, #0]
 8009ab4:	601a      	str	r2, [r3, #0]
 8009ab6:	0649      	lsls	r1, r1, #25
 8009ab8:	d5f1      	bpl.n	8009a9e <_printf_i+0x8e>
 8009aba:	b236      	sxth	r6, r6
 8009abc:	e7ef      	b.n	8009a9e <_printf_i+0x8e>
 8009abe:	6808      	ldr	r0, [r1, #0]
 8009ac0:	6819      	ldr	r1, [r3, #0]
 8009ac2:	c940      	ldmia	r1!, {r6}
 8009ac4:	0605      	lsls	r5, r0, #24
 8009ac6:	d402      	bmi.n	8009ace <_printf_i+0xbe>
 8009ac8:	0640      	lsls	r0, r0, #25
 8009aca:	d500      	bpl.n	8009ace <_printf_i+0xbe>
 8009acc:	b2b6      	uxth	r6, r6
 8009ace:	6019      	str	r1, [r3, #0]
 8009ad0:	4b54      	ldr	r3, [pc, #336]	@ (8009c24 <_printf_i+0x214>)
 8009ad2:	270a      	movs	r7, #10
 8009ad4:	9304      	str	r3, [sp, #16]
 8009ad6:	2a6f      	cmp	r2, #111	@ 0x6f
 8009ad8:	d100      	bne.n	8009adc <_printf_i+0xcc>
 8009ada:	3f02      	subs	r7, #2
 8009adc:	0023      	movs	r3, r4
 8009ade:	2200      	movs	r2, #0
 8009ae0:	3343      	adds	r3, #67	@ 0x43
 8009ae2:	701a      	strb	r2, [r3, #0]
 8009ae4:	6863      	ldr	r3, [r4, #4]
 8009ae6:	60a3      	str	r3, [r4, #8]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	db03      	blt.n	8009af4 <_printf_i+0xe4>
 8009aec:	2104      	movs	r1, #4
 8009aee:	6822      	ldr	r2, [r4, #0]
 8009af0:	438a      	bics	r2, r1
 8009af2:	6022      	str	r2, [r4, #0]
 8009af4:	2e00      	cmp	r6, #0
 8009af6:	d102      	bne.n	8009afe <_printf_i+0xee>
 8009af8:	9d03      	ldr	r5, [sp, #12]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00c      	beq.n	8009b18 <_printf_i+0x108>
 8009afe:	9d03      	ldr	r5, [sp, #12]
 8009b00:	0030      	movs	r0, r6
 8009b02:	0039      	movs	r1, r7
 8009b04:	f7f6 fb9e 	bl	8000244 <__aeabi_uidivmod>
 8009b08:	9b04      	ldr	r3, [sp, #16]
 8009b0a:	3d01      	subs	r5, #1
 8009b0c:	5c5b      	ldrb	r3, [r3, r1]
 8009b0e:	702b      	strb	r3, [r5, #0]
 8009b10:	0033      	movs	r3, r6
 8009b12:	0006      	movs	r6, r0
 8009b14:	429f      	cmp	r7, r3
 8009b16:	d9f3      	bls.n	8009b00 <_printf_i+0xf0>
 8009b18:	2f08      	cmp	r7, #8
 8009b1a:	d109      	bne.n	8009b30 <_printf_i+0x120>
 8009b1c:	6823      	ldr	r3, [r4, #0]
 8009b1e:	07db      	lsls	r3, r3, #31
 8009b20:	d506      	bpl.n	8009b30 <_printf_i+0x120>
 8009b22:	6862      	ldr	r2, [r4, #4]
 8009b24:	6923      	ldr	r3, [r4, #16]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	dc02      	bgt.n	8009b30 <_printf_i+0x120>
 8009b2a:	2330      	movs	r3, #48	@ 0x30
 8009b2c:	3d01      	subs	r5, #1
 8009b2e:	702b      	strb	r3, [r5, #0]
 8009b30:	9b03      	ldr	r3, [sp, #12]
 8009b32:	1b5b      	subs	r3, r3, r5
 8009b34:	6123      	str	r3, [r4, #16]
 8009b36:	9b07      	ldr	r3, [sp, #28]
 8009b38:	0021      	movs	r1, r4
 8009b3a:	9300      	str	r3, [sp, #0]
 8009b3c:	9805      	ldr	r0, [sp, #20]
 8009b3e:	9b06      	ldr	r3, [sp, #24]
 8009b40:	aa09      	add	r2, sp, #36	@ 0x24
 8009b42:	f7ff fef5 	bl	8009930 <_printf_common>
 8009b46:	3001      	adds	r0, #1
 8009b48:	d148      	bne.n	8009bdc <_printf_i+0x1cc>
 8009b4a:	2001      	movs	r0, #1
 8009b4c:	4240      	negs	r0, r0
 8009b4e:	b00b      	add	sp, #44	@ 0x2c
 8009b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b52:	2220      	movs	r2, #32
 8009b54:	6809      	ldr	r1, [r1, #0]
 8009b56:	430a      	orrs	r2, r1
 8009b58:	6022      	str	r2, [r4, #0]
 8009b5a:	2278      	movs	r2, #120	@ 0x78
 8009b5c:	4932      	ldr	r1, [pc, #200]	@ (8009c28 <_printf_i+0x218>)
 8009b5e:	9104      	str	r1, [sp, #16]
 8009b60:	0021      	movs	r1, r4
 8009b62:	3145      	adds	r1, #69	@ 0x45
 8009b64:	700a      	strb	r2, [r1, #0]
 8009b66:	6819      	ldr	r1, [r3, #0]
 8009b68:	6822      	ldr	r2, [r4, #0]
 8009b6a:	c940      	ldmia	r1!, {r6}
 8009b6c:	0610      	lsls	r0, r2, #24
 8009b6e:	d402      	bmi.n	8009b76 <_printf_i+0x166>
 8009b70:	0650      	lsls	r0, r2, #25
 8009b72:	d500      	bpl.n	8009b76 <_printf_i+0x166>
 8009b74:	b2b6      	uxth	r6, r6
 8009b76:	6019      	str	r1, [r3, #0]
 8009b78:	07d3      	lsls	r3, r2, #31
 8009b7a:	d502      	bpl.n	8009b82 <_printf_i+0x172>
 8009b7c:	2320      	movs	r3, #32
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	6023      	str	r3, [r4, #0]
 8009b82:	2e00      	cmp	r6, #0
 8009b84:	d001      	beq.n	8009b8a <_printf_i+0x17a>
 8009b86:	2710      	movs	r7, #16
 8009b88:	e7a8      	b.n	8009adc <_printf_i+0xcc>
 8009b8a:	2220      	movs	r2, #32
 8009b8c:	6823      	ldr	r3, [r4, #0]
 8009b8e:	4393      	bics	r3, r2
 8009b90:	6023      	str	r3, [r4, #0]
 8009b92:	e7f8      	b.n	8009b86 <_printf_i+0x176>
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	680d      	ldr	r5, [r1, #0]
 8009b98:	1d10      	adds	r0, r2, #4
 8009b9a:	6949      	ldr	r1, [r1, #20]
 8009b9c:	6018      	str	r0, [r3, #0]
 8009b9e:	6813      	ldr	r3, [r2, #0]
 8009ba0:	062e      	lsls	r6, r5, #24
 8009ba2:	d501      	bpl.n	8009ba8 <_printf_i+0x198>
 8009ba4:	6019      	str	r1, [r3, #0]
 8009ba6:	e002      	b.n	8009bae <_printf_i+0x19e>
 8009ba8:	066d      	lsls	r5, r5, #25
 8009baa:	d5fb      	bpl.n	8009ba4 <_printf_i+0x194>
 8009bac:	8019      	strh	r1, [r3, #0]
 8009bae:	2300      	movs	r3, #0
 8009bb0:	9d03      	ldr	r5, [sp, #12]
 8009bb2:	6123      	str	r3, [r4, #16]
 8009bb4:	e7bf      	b.n	8009b36 <_printf_i+0x126>
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	1d11      	adds	r1, r2, #4
 8009bba:	6019      	str	r1, [r3, #0]
 8009bbc:	6815      	ldr	r5, [r2, #0]
 8009bbe:	2100      	movs	r1, #0
 8009bc0:	0028      	movs	r0, r5
 8009bc2:	6862      	ldr	r2, [r4, #4]
 8009bc4:	f000 f94f 	bl	8009e66 <memchr>
 8009bc8:	2800      	cmp	r0, #0
 8009bca:	d001      	beq.n	8009bd0 <_printf_i+0x1c0>
 8009bcc:	1b40      	subs	r0, r0, r5
 8009bce:	6060      	str	r0, [r4, #4]
 8009bd0:	6863      	ldr	r3, [r4, #4]
 8009bd2:	6123      	str	r3, [r4, #16]
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	9a03      	ldr	r2, [sp, #12]
 8009bd8:	7013      	strb	r3, [r2, #0]
 8009bda:	e7ac      	b.n	8009b36 <_printf_i+0x126>
 8009bdc:	002a      	movs	r2, r5
 8009bde:	6923      	ldr	r3, [r4, #16]
 8009be0:	9906      	ldr	r1, [sp, #24]
 8009be2:	9805      	ldr	r0, [sp, #20]
 8009be4:	9d07      	ldr	r5, [sp, #28]
 8009be6:	47a8      	blx	r5
 8009be8:	3001      	adds	r0, #1
 8009bea:	d0ae      	beq.n	8009b4a <_printf_i+0x13a>
 8009bec:	6823      	ldr	r3, [r4, #0]
 8009bee:	079b      	lsls	r3, r3, #30
 8009bf0:	d415      	bmi.n	8009c1e <_printf_i+0x20e>
 8009bf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bf4:	68e0      	ldr	r0, [r4, #12]
 8009bf6:	4298      	cmp	r0, r3
 8009bf8:	daa9      	bge.n	8009b4e <_printf_i+0x13e>
 8009bfa:	0018      	movs	r0, r3
 8009bfc:	e7a7      	b.n	8009b4e <_printf_i+0x13e>
 8009bfe:	0022      	movs	r2, r4
 8009c00:	2301      	movs	r3, #1
 8009c02:	9906      	ldr	r1, [sp, #24]
 8009c04:	9805      	ldr	r0, [sp, #20]
 8009c06:	9e07      	ldr	r6, [sp, #28]
 8009c08:	3219      	adds	r2, #25
 8009c0a:	47b0      	blx	r6
 8009c0c:	3001      	adds	r0, #1
 8009c0e:	d09c      	beq.n	8009b4a <_printf_i+0x13a>
 8009c10:	3501      	adds	r5, #1
 8009c12:	68e3      	ldr	r3, [r4, #12]
 8009c14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c16:	1a9b      	subs	r3, r3, r2
 8009c18:	42ab      	cmp	r3, r5
 8009c1a:	dcf0      	bgt.n	8009bfe <_printf_i+0x1ee>
 8009c1c:	e7e9      	b.n	8009bf2 <_printf_i+0x1e2>
 8009c1e:	2500      	movs	r5, #0
 8009c20:	e7f7      	b.n	8009c12 <_printf_i+0x202>
 8009c22:	46c0      	nop			@ (mov r8, r8)
 8009c24:	0800c3ea 	.word	0x0800c3ea
 8009c28:	0800c3fb 	.word	0x0800c3fb

08009c2c <siprintf>:
 8009c2c:	b40e      	push	{r1, r2, r3}
 8009c2e:	b500      	push	{lr}
 8009c30:	490b      	ldr	r1, [pc, #44]	@ (8009c60 <siprintf+0x34>)
 8009c32:	b09c      	sub	sp, #112	@ 0x70
 8009c34:	ab1d      	add	r3, sp, #116	@ 0x74
 8009c36:	9002      	str	r0, [sp, #8]
 8009c38:	9006      	str	r0, [sp, #24]
 8009c3a:	9107      	str	r1, [sp, #28]
 8009c3c:	9104      	str	r1, [sp, #16]
 8009c3e:	4809      	ldr	r0, [pc, #36]	@ (8009c64 <siprintf+0x38>)
 8009c40:	4909      	ldr	r1, [pc, #36]	@ (8009c68 <siprintf+0x3c>)
 8009c42:	cb04      	ldmia	r3!, {r2}
 8009c44:	9105      	str	r1, [sp, #20]
 8009c46:	6800      	ldr	r0, [r0, #0]
 8009c48:	a902      	add	r1, sp, #8
 8009c4a:	9301      	str	r3, [sp, #4]
 8009c4c:	f000 fff8 	bl	800ac40 <_svfiprintf_r>
 8009c50:	2200      	movs	r2, #0
 8009c52:	9b02      	ldr	r3, [sp, #8]
 8009c54:	701a      	strb	r2, [r3, #0]
 8009c56:	b01c      	add	sp, #112	@ 0x70
 8009c58:	bc08      	pop	{r3}
 8009c5a:	b003      	add	sp, #12
 8009c5c:	4718      	bx	r3
 8009c5e:	46c0      	nop			@ (mov r8, r8)
 8009c60:	7fffffff 	.word	0x7fffffff
 8009c64:	20000018 	.word	0x20000018
 8009c68:	ffff0208 	.word	0xffff0208

08009c6c <std>:
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	b510      	push	{r4, lr}
 8009c70:	0004      	movs	r4, r0
 8009c72:	6003      	str	r3, [r0, #0]
 8009c74:	6043      	str	r3, [r0, #4]
 8009c76:	6083      	str	r3, [r0, #8]
 8009c78:	8181      	strh	r1, [r0, #12]
 8009c7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8009c7c:	81c2      	strh	r2, [r0, #14]
 8009c7e:	6103      	str	r3, [r0, #16]
 8009c80:	6143      	str	r3, [r0, #20]
 8009c82:	6183      	str	r3, [r0, #24]
 8009c84:	0019      	movs	r1, r3
 8009c86:	2208      	movs	r2, #8
 8009c88:	305c      	adds	r0, #92	@ 0x5c
 8009c8a:	f000 f8b3 	bl	8009df4 <memset>
 8009c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8009cbc <std+0x50>)
 8009c90:	6224      	str	r4, [r4, #32]
 8009c92:	6263      	str	r3, [r4, #36]	@ 0x24
 8009c94:	4b0a      	ldr	r3, [pc, #40]	@ (8009cc0 <std+0x54>)
 8009c96:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009c98:	4b0a      	ldr	r3, [pc, #40]	@ (8009cc4 <std+0x58>)
 8009c9a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8009cc8 <std+0x5c>)
 8009c9e:	6323      	str	r3, [r4, #48]	@ 0x30
 8009ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8009ccc <std+0x60>)
 8009ca2:	429c      	cmp	r4, r3
 8009ca4:	d005      	beq.n	8009cb2 <std+0x46>
 8009ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8009cd0 <std+0x64>)
 8009ca8:	429c      	cmp	r4, r3
 8009caa:	d002      	beq.n	8009cb2 <std+0x46>
 8009cac:	4b09      	ldr	r3, [pc, #36]	@ (8009cd4 <std+0x68>)
 8009cae:	429c      	cmp	r4, r3
 8009cb0:	d103      	bne.n	8009cba <std+0x4e>
 8009cb2:	0020      	movs	r0, r4
 8009cb4:	3058      	adds	r0, #88	@ 0x58
 8009cb6:	f000 f8d3 	bl	8009e60 <__retarget_lock_init_recursive>
 8009cba:	bd10      	pop	{r4, pc}
 8009cbc:	0800b861 	.word	0x0800b861
 8009cc0:	0800b889 	.word	0x0800b889
 8009cc4:	0800b8c1 	.word	0x0800b8c1
 8009cc8:	0800b8ed 	.word	0x0800b8ed
 8009ccc:	2000053c 	.word	0x2000053c
 8009cd0:	200005a4 	.word	0x200005a4
 8009cd4:	2000060c 	.word	0x2000060c

08009cd8 <stdio_exit_handler>:
 8009cd8:	b510      	push	{r4, lr}
 8009cda:	4a03      	ldr	r2, [pc, #12]	@ (8009ce8 <stdio_exit_handler+0x10>)
 8009cdc:	4903      	ldr	r1, [pc, #12]	@ (8009cec <stdio_exit_handler+0x14>)
 8009cde:	4804      	ldr	r0, [pc, #16]	@ (8009cf0 <stdio_exit_handler+0x18>)
 8009ce0:	f000 f86c 	bl	8009dbc <_fwalk_sglue>
 8009ce4:	bd10      	pop	{r4, pc}
 8009ce6:	46c0      	nop			@ (mov r8, r8)
 8009ce8:	2000000c 	.word	0x2000000c
 8009cec:	0800b0a1 	.word	0x0800b0a1
 8009cf0:	2000001c 	.word	0x2000001c

08009cf4 <cleanup_stdio>:
 8009cf4:	6841      	ldr	r1, [r0, #4]
 8009cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8009d24 <cleanup_stdio+0x30>)
 8009cf8:	b510      	push	{r4, lr}
 8009cfa:	0004      	movs	r4, r0
 8009cfc:	4299      	cmp	r1, r3
 8009cfe:	d001      	beq.n	8009d04 <cleanup_stdio+0x10>
 8009d00:	f001 f9ce 	bl	800b0a0 <_fflush_r>
 8009d04:	68a1      	ldr	r1, [r4, #8]
 8009d06:	4b08      	ldr	r3, [pc, #32]	@ (8009d28 <cleanup_stdio+0x34>)
 8009d08:	4299      	cmp	r1, r3
 8009d0a:	d002      	beq.n	8009d12 <cleanup_stdio+0x1e>
 8009d0c:	0020      	movs	r0, r4
 8009d0e:	f001 f9c7 	bl	800b0a0 <_fflush_r>
 8009d12:	68e1      	ldr	r1, [r4, #12]
 8009d14:	4b05      	ldr	r3, [pc, #20]	@ (8009d2c <cleanup_stdio+0x38>)
 8009d16:	4299      	cmp	r1, r3
 8009d18:	d002      	beq.n	8009d20 <cleanup_stdio+0x2c>
 8009d1a:	0020      	movs	r0, r4
 8009d1c:	f001 f9c0 	bl	800b0a0 <_fflush_r>
 8009d20:	bd10      	pop	{r4, pc}
 8009d22:	46c0      	nop			@ (mov r8, r8)
 8009d24:	2000053c 	.word	0x2000053c
 8009d28:	200005a4 	.word	0x200005a4
 8009d2c:	2000060c 	.word	0x2000060c

08009d30 <global_stdio_init.part.0>:
 8009d30:	b510      	push	{r4, lr}
 8009d32:	4b09      	ldr	r3, [pc, #36]	@ (8009d58 <global_stdio_init.part.0+0x28>)
 8009d34:	4a09      	ldr	r2, [pc, #36]	@ (8009d5c <global_stdio_init.part.0+0x2c>)
 8009d36:	2104      	movs	r1, #4
 8009d38:	601a      	str	r2, [r3, #0]
 8009d3a:	4809      	ldr	r0, [pc, #36]	@ (8009d60 <global_stdio_init.part.0+0x30>)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f7ff ff95 	bl	8009c6c <std>
 8009d42:	2201      	movs	r2, #1
 8009d44:	2109      	movs	r1, #9
 8009d46:	4807      	ldr	r0, [pc, #28]	@ (8009d64 <global_stdio_init.part.0+0x34>)
 8009d48:	f7ff ff90 	bl	8009c6c <std>
 8009d4c:	2202      	movs	r2, #2
 8009d4e:	2112      	movs	r1, #18
 8009d50:	4805      	ldr	r0, [pc, #20]	@ (8009d68 <global_stdio_init.part.0+0x38>)
 8009d52:	f7ff ff8b 	bl	8009c6c <std>
 8009d56:	bd10      	pop	{r4, pc}
 8009d58:	20000674 	.word	0x20000674
 8009d5c:	08009cd9 	.word	0x08009cd9
 8009d60:	2000053c 	.word	0x2000053c
 8009d64:	200005a4 	.word	0x200005a4
 8009d68:	2000060c 	.word	0x2000060c

08009d6c <__sfp_lock_acquire>:
 8009d6c:	b510      	push	{r4, lr}
 8009d6e:	4802      	ldr	r0, [pc, #8]	@ (8009d78 <__sfp_lock_acquire+0xc>)
 8009d70:	f000 f877 	bl	8009e62 <__retarget_lock_acquire_recursive>
 8009d74:	bd10      	pop	{r4, pc}
 8009d76:	46c0      	nop			@ (mov r8, r8)
 8009d78:	20000679 	.word	0x20000679

08009d7c <__sfp_lock_release>:
 8009d7c:	b510      	push	{r4, lr}
 8009d7e:	4802      	ldr	r0, [pc, #8]	@ (8009d88 <__sfp_lock_release+0xc>)
 8009d80:	f000 f870 	bl	8009e64 <__retarget_lock_release_recursive>
 8009d84:	bd10      	pop	{r4, pc}
 8009d86:	46c0      	nop			@ (mov r8, r8)
 8009d88:	20000679 	.word	0x20000679

08009d8c <__sinit>:
 8009d8c:	b510      	push	{r4, lr}
 8009d8e:	0004      	movs	r4, r0
 8009d90:	f7ff ffec 	bl	8009d6c <__sfp_lock_acquire>
 8009d94:	6a23      	ldr	r3, [r4, #32]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d002      	beq.n	8009da0 <__sinit+0x14>
 8009d9a:	f7ff ffef 	bl	8009d7c <__sfp_lock_release>
 8009d9e:	bd10      	pop	{r4, pc}
 8009da0:	4b04      	ldr	r3, [pc, #16]	@ (8009db4 <__sinit+0x28>)
 8009da2:	6223      	str	r3, [r4, #32]
 8009da4:	4b04      	ldr	r3, [pc, #16]	@ (8009db8 <__sinit+0x2c>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d1f6      	bne.n	8009d9a <__sinit+0xe>
 8009dac:	f7ff ffc0 	bl	8009d30 <global_stdio_init.part.0>
 8009db0:	e7f3      	b.n	8009d9a <__sinit+0xe>
 8009db2:	46c0      	nop			@ (mov r8, r8)
 8009db4:	08009cf5 	.word	0x08009cf5
 8009db8:	20000674 	.word	0x20000674

08009dbc <_fwalk_sglue>:
 8009dbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009dbe:	0014      	movs	r4, r2
 8009dc0:	2600      	movs	r6, #0
 8009dc2:	9000      	str	r0, [sp, #0]
 8009dc4:	9101      	str	r1, [sp, #4]
 8009dc6:	68a5      	ldr	r5, [r4, #8]
 8009dc8:	6867      	ldr	r7, [r4, #4]
 8009dca:	3f01      	subs	r7, #1
 8009dcc:	d504      	bpl.n	8009dd8 <_fwalk_sglue+0x1c>
 8009dce:	6824      	ldr	r4, [r4, #0]
 8009dd0:	2c00      	cmp	r4, #0
 8009dd2:	d1f8      	bne.n	8009dc6 <_fwalk_sglue+0xa>
 8009dd4:	0030      	movs	r0, r6
 8009dd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009dd8:	89ab      	ldrh	r3, [r5, #12]
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d908      	bls.n	8009df0 <_fwalk_sglue+0x34>
 8009dde:	220e      	movs	r2, #14
 8009de0:	5eab      	ldrsh	r3, [r5, r2]
 8009de2:	3301      	adds	r3, #1
 8009de4:	d004      	beq.n	8009df0 <_fwalk_sglue+0x34>
 8009de6:	0029      	movs	r1, r5
 8009de8:	9800      	ldr	r0, [sp, #0]
 8009dea:	9b01      	ldr	r3, [sp, #4]
 8009dec:	4798      	blx	r3
 8009dee:	4306      	orrs	r6, r0
 8009df0:	3568      	adds	r5, #104	@ 0x68
 8009df2:	e7ea      	b.n	8009dca <_fwalk_sglue+0xe>

08009df4 <memset>:
 8009df4:	0003      	movs	r3, r0
 8009df6:	1882      	adds	r2, r0, r2
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d100      	bne.n	8009dfe <memset+0xa>
 8009dfc:	4770      	bx	lr
 8009dfe:	7019      	strb	r1, [r3, #0]
 8009e00:	3301      	adds	r3, #1
 8009e02:	e7f9      	b.n	8009df8 <memset+0x4>

08009e04 <_localeconv_r>:
 8009e04:	4800      	ldr	r0, [pc, #0]	@ (8009e08 <_localeconv_r+0x4>)
 8009e06:	4770      	bx	lr
 8009e08:	20000158 	.word	0x20000158

08009e0c <__errno>:
 8009e0c:	4b01      	ldr	r3, [pc, #4]	@ (8009e14 <__errno+0x8>)
 8009e0e:	6818      	ldr	r0, [r3, #0]
 8009e10:	4770      	bx	lr
 8009e12:	46c0      	nop			@ (mov r8, r8)
 8009e14:	20000018 	.word	0x20000018

08009e18 <__libc_init_array>:
 8009e18:	b570      	push	{r4, r5, r6, lr}
 8009e1a:	2600      	movs	r6, #0
 8009e1c:	4c0c      	ldr	r4, [pc, #48]	@ (8009e50 <__libc_init_array+0x38>)
 8009e1e:	4d0d      	ldr	r5, [pc, #52]	@ (8009e54 <__libc_init_array+0x3c>)
 8009e20:	1b64      	subs	r4, r4, r5
 8009e22:	10a4      	asrs	r4, r4, #2
 8009e24:	42a6      	cmp	r6, r4
 8009e26:	d109      	bne.n	8009e3c <__libc_init_array+0x24>
 8009e28:	2600      	movs	r6, #0
 8009e2a:	f002 f9a3 	bl	800c174 <_init>
 8009e2e:	4c0a      	ldr	r4, [pc, #40]	@ (8009e58 <__libc_init_array+0x40>)
 8009e30:	4d0a      	ldr	r5, [pc, #40]	@ (8009e5c <__libc_init_array+0x44>)
 8009e32:	1b64      	subs	r4, r4, r5
 8009e34:	10a4      	asrs	r4, r4, #2
 8009e36:	42a6      	cmp	r6, r4
 8009e38:	d105      	bne.n	8009e46 <__libc_init_array+0x2e>
 8009e3a:	bd70      	pop	{r4, r5, r6, pc}
 8009e3c:	00b3      	lsls	r3, r6, #2
 8009e3e:	58eb      	ldr	r3, [r5, r3]
 8009e40:	4798      	blx	r3
 8009e42:	3601      	adds	r6, #1
 8009e44:	e7ee      	b.n	8009e24 <__libc_init_array+0xc>
 8009e46:	00b3      	lsls	r3, r6, #2
 8009e48:	58eb      	ldr	r3, [r5, r3]
 8009e4a:	4798      	blx	r3
 8009e4c:	3601      	adds	r6, #1
 8009e4e:	e7f2      	b.n	8009e36 <__libc_init_array+0x1e>
 8009e50:	0800c750 	.word	0x0800c750
 8009e54:	0800c750 	.word	0x0800c750
 8009e58:	0800c754 	.word	0x0800c754
 8009e5c:	0800c750 	.word	0x0800c750

08009e60 <__retarget_lock_init_recursive>:
 8009e60:	4770      	bx	lr

08009e62 <__retarget_lock_acquire_recursive>:
 8009e62:	4770      	bx	lr

08009e64 <__retarget_lock_release_recursive>:
 8009e64:	4770      	bx	lr

08009e66 <memchr>:
 8009e66:	b2c9      	uxtb	r1, r1
 8009e68:	1882      	adds	r2, r0, r2
 8009e6a:	4290      	cmp	r0, r2
 8009e6c:	d101      	bne.n	8009e72 <memchr+0xc>
 8009e6e:	2000      	movs	r0, #0
 8009e70:	4770      	bx	lr
 8009e72:	7803      	ldrb	r3, [r0, #0]
 8009e74:	428b      	cmp	r3, r1
 8009e76:	d0fb      	beq.n	8009e70 <memchr+0xa>
 8009e78:	3001      	adds	r0, #1
 8009e7a:	e7f6      	b.n	8009e6a <memchr+0x4>

08009e7c <quorem>:
 8009e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e7e:	6902      	ldr	r2, [r0, #16]
 8009e80:	690f      	ldr	r7, [r1, #16]
 8009e82:	b087      	sub	sp, #28
 8009e84:	0006      	movs	r6, r0
 8009e86:	000b      	movs	r3, r1
 8009e88:	2000      	movs	r0, #0
 8009e8a:	9102      	str	r1, [sp, #8]
 8009e8c:	42ba      	cmp	r2, r7
 8009e8e:	db6d      	blt.n	8009f6c <quorem+0xf0>
 8009e90:	3f01      	subs	r7, #1
 8009e92:	00bc      	lsls	r4, r7, #2
 8009e94:	3314      	adds	r3, #20
 8009e96:	9305      	str	r3, [sp, #20]
 8009e98:	191b      	adds	r3, r3, r4
 8009e9a:	9303      	str	r3, [sp, #12]
 8009e9c:	0033      	movs	r3, r6
 8009e9e:	3314      	adds	r3, #20
 8009ea0:	191c      	adds	r4, r3, r4
 8009ea2:	9301      	str	r3, [sp, #4]
 8009ea4:	6823      	ldr	r3, [r4, #0]
 8009ea6:	9304      	str	r3, [sp, #16]
 8009ea8:	9b03      	ldr	r3, [sp, #12]
 8009eaa:	9804      	ldr	r0, [sp, #16]
 8009eac:	681d      	ldr	r5, [r3, #0]
 8009eae:	3501      	adds	r5, #1
 8009eb0:	0029      	movs	r1, r5
 8009eb2:	f7f6 f941 	bl	8000138 <__udivsi3>
 8009eb6:	9b04      	ldr	r3, [sp, #16]
 8009eb8:	9000      	str	r0, [sp, #0]
 8009eba:	42ab      	cmp	r3, r5
 8009ebc:	d32b      	bcc.n	8009f16 <quorem+0x9a>
 8009ebe:	9b05      	ldr	r3, [sp, #20]
 8009ec0:	9d01      	ldr	r5, [sp, #4]
 8009ec2:	469c      	mov	ip, r3
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	9305      	str	r3, [sp, #20]
 8009ec8:	9304      	str	r3, [sp, #16]
 8009eca:	4662      	mov	r2, ip
 8009ecc:	ca08      	ldmia	r2!, {r3}
 8009ece:	6828      	ldr	r0, [r5, #0]
 8009ed0:	4694      	mov	ip, r2
 8009ed2:	9a00      	ldr	r2, [sp, #0]
 8009ed4:	b299      	uxth	r1, r3
 8009ed6:	4351      	muls	r1, r2
 8009ed8:	9a05      	ldr	r2, [sp, #20]
 8009eda:	0c1b      	lsrs	r3, r3, #16
 8009edc:	1889      	adds	r1, r1, r2
 8009ede:	9a00      	ldr	r2, [sp, #0]
 8009ee0:	4353      	muls	r3, r2
 8009ee2:	0c0a      	lsrs	r2, r1, #16
 8009ee4:	189b      	adds	r3, r3, r2
 8009ee6:	0c1a      	lsrs	r2, r3, #16
 8009ee8:	b289      	uxth	r1, r1
 8009eea:	9205      	str	r2, [sp, #20]
 8009eec:	b282      	uxth	r2, r0
 8009eee:	1a52      	subs	r2, r2, r1
 8009ef0:	9904      	ldr	r1, [sp, #16]
 8009ef2:	0c00      	lsrs	r0, r0, #16
 8009ef4:	1852      	adds	r2, r2, r1
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	1411      	asrs	r1, r2, #16
 8009efa:	1ac3      	subs	r3, r0, r3
 8009efc:	185b      	adds	r3, r3, r1
 8009efe:	1419      	asrs	r1, r3, #16
 8009f00:	b292      	uxth	r2, r2
 8009f02:	041b      	lsls	r3, r3, #16
 8009f04:	431a      	orrs	r2, r3
 8009f06:	9b03      	ldr	r3, [sp, #12]
 8009f08:	9104      	str	r1, [sp, #16]
 8009f0a:	c504      	stmia	r5!, {r2}
 8009f0c:	4563      	cmp	r3, ip
 8009f0e:	d2dc      	bcs.n	8009eca <quorem+0x4e>
 8009f10:	6823      	ldr	r3, [r4, #0]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d030      	beq.n	8009f78 <quorem+0xfc>
 8009f16:	0030      	movs	r0, r6
 8009f18:	9902      	ldr	r1, [sp, #8]
 8009f1a:	f001 fb8b 	bl	800b634 <__mcmp>
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	db23      	blt.n	8009f6a <quorem+0xee>
 8009f22:	0034      	movs	r4, r6
 8009f24:	2500      	movs	r5, #0
 8009f26:	9902      	ldr	r1, [sp, #8]
 8009f28:	3414      	adds	r4, #20
 8009f2a:	3114      	adds	r1, #20
 8009f2c:	6823      	ldr	r3, [r4, #0]
 8009f2e:	c901      	ldmia	r1!, {r0}
 8009f30:	9302      	str	r3, [sp, #8]
 8009f32:	466b      	mov	r3, sp
 8009f34:	891b      	ldrh	r3, [r3, #8]
 8009f36:	b282      	uxth	r2, r0
 8009f38:	1a9a      	subs	r2, r3, r2
 8009f3a:	9b02      	ldr	r3, [sp, #8]
 8009f3c:	1952      	adds	r2, r2, r5
 8009f3e:	0c00      	lsrs	r0, r0, #16
 8009f40:	0c1b      	lsrs	r3, r3, #16
 8009f42:	1a1b      	subs	r3, r3, r0
 8009f44:	1410      	asrs	r0, r2, #16
 8009f46:	181b      	adds	r3, r3, r0
 8009f48:	141d      	asrs	r5, r3, #16
 8009f4a:	b292      	uxth	r2, r2
 8009f4c:	041b      	lsls	r3, r3, #16
 8009f4e:	431a      	orrs	r2, r3
 8009f50:	9b03      	ldr	r3, [sp, #12]
 8009f52:	c404      	stmia	r4!, {r2}
 8009f54:	428b      	cmp	r3, r1
 8009f56:	d2e9      	bcs.n	8009f2c <quorem+0xb0>
 8009f58:	9a01      	ldr	r2, [sp, #4]
 8009f5a:	00bb      	lsls	r3, r7, #2
 8009f5c:	18d3      	adds	r3, r2, r3
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	2a00      	cmp	r2, #0
 8009f62:	d013      	beq.n	8009f8c <quorem+0x110>
 8009f64:	9b00      	ldr	r3, [sp, #0]
 8009f66:	3301      	adds	r3, #1
 8009f68:	9300      	str	r3, [sp, #0]
 8009f6a:	9800      	ldr	r0, [sp, #0]
 8009f6c:	b007      	add	sp, #28
 8009f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f70:	6823      	ldr	r3, [r4, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d104      	bne.n	8009f80 <quorem+0x104>
 8009f76:	3f01      	subs	r7, #1
 8009f78:	9b01      	ldr	r3, [sp, #4]
 8009f7a:	3c04      	subs	r4, #4
 8009f7c:	42a3      	cmp	r3, r4
 8009f7e:	d3f7      	bcc.n	8009f70 <quorem+0xf4>
 8009f80:	6137      	str	r7, [r6, #16]
 8009f82:	e7c8      	b.n	8009f16 <quorem+0x9a>
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	2a00      	cmp	r2, #0
 8009f88:	d104      	bne.n	8009f94 <quorem+0x118>
 8009f8a:	3f01      	subs	r7, #1
 8009f8c:	9a01      	ldr	r2, [sp, #4]
 8009f8e:	3b04      	subs	r3, #4
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d3f7      	bcc.n	8009f84 <quorem+0x108>
 8009f94:	6137      	str	r7, [r6, #16]
 8009f96:	e7e5      	b.n	8009f64 <quorem+0xe8>

08009f98 <_dtoa_r>:
 8009f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f9a:	0014      	movs	r4, r2
 8009f9c:	001d      	movs	r5, r3
 8009f9e:	69c6      	ldr	r6, [r0, #28]
 8009fa0:	b09d      	sub	sp, #116	@ 0x74
 8009fa2:	940a      	str	r4, [sp, #40]	@ 0x28
 8009fa4:	950b      	str	r5, [sp, #44]	@ 0x2c
 8009fa6:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8009fa8:	9003      	str	r0, [sp, #12]
 8009faa:	2e00      	cmp	r6, #0
 8009fac:	d10f      	bne.n	8009fce <_dtoa_r+0x36>
 8009fae:	2010      	movs	r0, #16
 8009fb0:	f000 ff44 	bl	800ae3c <malloc>
 8009fb4:	9b03      	ldr	r3, [sp, #12]
 8009fb6:	1e02      	subs	r2, r0, #0
 8009fb8:	61d8      	str	r0, [r3, #28]
 8009fba:	d104      	bne.n	8009fc6 <_dtoa_r+0x2e>
 8009fbc:	21ef      	movs	r1, #239	@ 0xef
 8009fbe:	4bc7      	ldr	r3, [pc, #796]	@ (800a2dc <_dtoa_r+0x344>)
 8009fc0:	48c7      	ldr	r0, [pc, #796]	@ (800a2e0 <_dtoa_r+0x348>)
 8009fc2:	f001 fd45 	bl	800ba50 <__assert_func>
 8009fc6:	6046      	str	r6, [r0, #4]
 8009fc8:	6086      	str	r6, [r0, #8]
 8009fca:	6006      	str	r6, [r0, #0]
 8009fcc:	60c6      	str	r6, [r0, #12]
 8009fce:	9b03      	ldr	r3, [sp, #12]
 8009fd0:	69db      	ldr	r3, [r3, #28]
 8009fd2:	6819      	ldr	r1, [r3, #0]
 8009fd4:	2900      	cmp	r1, #0
 8009fd6:	d00b      	beq.n	8009ff0 <_dtoa_r+0x58>
 8009fd8:	685a      	ldr	r2, [r3, #4]
 8009fda:	2301      	movs	r3, #1
 8009fdc:	4093      	lsls	r3, r2
 8009fde:	604a      	str	r2, [r1, #4]
 8009fe0:	608b      	str	r3, [r1, #8]
 8009fe2:	9803      	ldr	r0, [sp, #12]
 8009fe4:	f001 f8dc 	bl	800b1a0 <_Bfree>
 8009fe8:	2200      	movs	r2, #0
 8009fea:	9b03      	ldr	r3, [sp, #12]
 8009fec:	69db      	ldr	r3, [r3, #28]
 8009fee:	601a      	str	r2, [r3, #0]
 8009ff0:	2d00      	cmp	r5, #0
 8009ff2:	da1e      	bge.n	800a032 <_dtoa_r+0x9a>
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	603b      	str	r3, [r7, #0]
 8009ff8:	006b      	lsls	r3, r5, #1
 8009ffa:	085b      	lsrs	r3, r3, #1
 8009ffc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ffe:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a000:	4bb8      	ldr	r3, [pc, #736]	@ (800a2e4 <_dtoa_r+0x34c>)
 800a002:	4ab8      	ldr	r2, [pc, #736]	@ (800a2e4 <_dtoa_r+0x34c>)
 800a004:	403b      	ands	r3, r7
 800a006:	4293      	cmp	r3, r2
 800a008:	d116      	bne.n	800a038 <_dtoa_r+0xa0>
 800a00a:	4bb7      	ldr	r3, [pc, #732]	@ (800a2e8 <_dtoa_r+0x350>)
 800a00c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a00e:	6013      	str	r3, [r2, #0]
 800a010:	033b      	lsls	r3, r7, #12
 800a012:	0b1b      	lsrs	r3, r3, #12
 800a014:	4323      	orrs	r3, r4
 800a016:	d101      	bne.n	800a01c <_dtoa_r+0x84>
 800a018:	f000 fd83 	bl	800ab22 <_dtoa_r+0xb8a>
 800a01c:	4bb3      	ldr	r3, [pc, #716]	@ (800a2ec <_dtoa_r+0x354>)
 800a01e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a020:	9308      	str	r3, [sp, #32]
 800a022:	2a00      	cmp	r2, #0
 800a024:	d002      	beq.n	800a02c <_dtoa_r+0x94>
 800a026:	4bb2      	ldr	r3, [pc, #712]	@ (800a2f0 <_dtoa_r+0x358>)
 800a028:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a02a:	6013      	str	r3, [r2, #0]
 800a02c:	9808      	ldr	r0, [sp, #32]
 800a02e:	b01d      	add	sp, #116	@ 0x74
 800a030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a032:	2300      	movs	r3, #0
 800a034:	603b      	str	r3, [r7, #0]
 800a036:	e7e2      	b.n	8009ffe <_dtoa_r+0x66>
 800a038:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a03a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a03c:	9212      	str	r2, [sp, #72]	@ 0x48
 800a03e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a040:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a042:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a044:	2200      	movs	r2, #0
 800a046:	2300      	movs	r3, #0
 800a048:	f7f6 f9fc 	bl	8000444 <__aeabi_dcmpeq>
 800a04c:	1e06      	subs	r6, r0, #0
 800a04e:	d00b      	beq.n	800a068 <_dtoa_r+0xd0>
 800a050:	2301      	movs	r3, #1
 800a052:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a054:	6013      	str	r3, [r2, #0]
 800a056:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d002      	beq.n	800a062 <_dtoa_r+0xca>
 800a05c:	4ba5      	ldr	r3, [pc, #660]	@ (800a2f4 <_dtoa_r+0x35c>)
 800a05e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a060:	6013      	str	r3, [r2, #0]
 800a062:	4ba5      	ldr	r3, [pc, #660]	@ (800a2f8 <_dtoa_r+0x360>)
 800a064:	9308      	str	r3, [sp, #32]
 800a066:	e7e1      	b.n	800a02c <_dtoa_r+0x94>
 800a068:	ab1a      	add	r3, sp, #104	@ 0x68
 800a06a:	9301      	str	r3, [sp, #4]
 800a06c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a06e:	9300      	str	r3, [sp, #0]
 800a070:	9803      	ldr	r0, [sp, #12]
 800a072:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a074:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a076:	f001 fb93 	bl	800b7a0 <__d2b>
 800a07a:	007a      	lsls	r2, r7, #1
 800a07c:	9005      	str	r0, [sp, #20]
 800a07e:	0d52      	lsrs	r2, r2, #21
 800a080:	d100      	bne.n	800a084 <_dtoa_r+0xec>
 800a082:	e07b      	b.n	800a17c <_dtoa_r+0x1e4>
 800a084:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a086:	9618      	str	r6, [sp, #96]	@ 0x60
 800a088:	0319      	lsls	r1, r3, #12
 800a08a:	4b9c      	ldr	r3, [pc, #624]	@ (800a2fc <_dtoa_r+0x364>)
 800a08c:	0b09      	lsrs	r1, r1, #12
 800a08e:	430b      	orrs	r3, r1
 800a090:	499b      	ldr	r1, [pc, #620]	@ (800a300 <_dtoa_r+0x368>)
 800a092:	1857      	adds	r7, r2, r1
 800a094:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a096:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a098:	0019      	movs	r1, r3
 800a09a:	2200      	movs	r2, #0
 800a09c:	4b99      	ldr	r3, [pc, #612]	@ (800a304 <_dtoa_r+0x36c>)
 800a09e:	f7f7 fe8d 	bl	8001dbc <__aeabi_dsub>
 800a0a2:	4a99      	ldr	r2, [pc, #612]	@ (800a308 <_dtoa_r+0x370>)
 800a0a4:	4b99      	ldr	r3, [pc, #612]	@ (800a30c <_dtoa_r+0x374>)
 800a0a6:	f7f7 fbc1 	bl	800182c <__aeabi_dmul>
 800a0aa:	4a99      	ldr	r2, [pc, #612]	@ (800a310 <_dtoa_r+0x378>)
 800a0ac:	4b99      	ldr	r3, [pc, #612]	@ (800a314 <_dtoa_r+0x37c>)
 800a0ae:	f7f6 fc15 	bl	80008dc <__aeabi_dadd>
 800a0b2:	0004      	movs	r4, r0
 800a0b4:	0038      	movs	r0, r7
 800a0b6:	000d      	movs	r5, r1
 800a0b8:	f7f8 fa7a 	bl	80025b0 <__aeabi_i2d>
 800a0bc:	4a96      	ldr	r2, [pc, #600]	@ (800a318 <_dtoa_r+0x380>)
 800a0be:	4b97      	ldr	r3, [pc, #604]	@ (800a31c <_dtoa_r+0x384>)
 800a0c0:	f7f7 fbb4 	bl	800182c <__aeabi_dmul>
 800a0c4:	0002      	movs	r2, r0
 800a0c6:	000b      	movs	r3, r1
 800a0c8:	0020      	movs	r0, r4
 800a0ca:	0029      	movs	r1, r5
 800a0cc:	f7f6 fc06 	bl	80008dc <__aeabi_dadd>
 800a0d0:	0004      	movs	r4, r0
 800a0d2:	000d      	movs	r5, r1
 800a0d4:	f7f8 fa30 	bl	8002538 <__aeabi_d2iz>
 800a0d8:	2200      	movs	r2, #0
 800a0da:	9004      	str	r0, [sp, #16]
 800a0dc:	2300      	movs	r3, #0
 800a0de:	0020      	movs	r0, r4
 800a0e0:	0029      	movs	r1, r5
 800a0e2:	f7f6 f9b5 	bl	8000450 <__aeabi_dcmplt>
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	d00b      	beq.n	800a102 <_dtoa_r+0x16a>
 800a0ea:	9804      	ldr	r0, [sp, #16]
 800a0ec:	f7f8 fa60 	bl	80025b0 <__aeabi_i2d>
 800a0f0:	002b      	movs	r3, r5
 800a0f2:	0022      	movs	r2, r4
 800a0f4:	f7f6 f9a6 	bl	8000444 <__aeabi_dcmpeq>
 800a0f8:	4243      	negs	r3, r0
 800a0fa:	4158      	adcs	r0, r3
 800a0fc:	9b04      	ldr	r3, [sp, #16]
 800a0fe:	1a1b      	subs	r3, r3, r0
 800a100:	9304      	str	r3, [sp, #16]
 800a102:	2301      	movs	r3, #1
 800a104:	9315      	str	r3, [sp, #84]	@ 0x54
 800a106:	9b04      	ldr	r3, [sp, #16]
 800a108:	2b16      	cmp	r3, #22
 800a10a:	d810      	bhi.n	800a12e <_dtoa_r+0x196>
 800a10c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a10e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a110:	9a04      	ldr	r2, [sp, #16]
 800a112:	4b83      	ldr	r3, [pc, #524]	@ (800a320 <_dtoa_r+0x388>)
 800a114:	00d2      	lsls	r2, r2, #3
 800a116:	189b      	adds	r3, r3, r2
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	f7f6 f998 	bl	8000450 <__aeabi_dcmplt>
 800a120:	2800      	cmp	r0, #0
 800a122:	d047      	beq.n	800a1b4 <_dtoa_r+0x21c>
 800a124:	9b04      	ldr	r3, [sp, #16]
 800a126:	3b01      	subs	r3, #1
 800a128:	9304      	str	r3, [sp, #16]
 800a12a:	2300      	movs	r3, #0
 800a12c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a12e:	2200      	movs	r2, #0
 800a130:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800a132:	9206      	str	r2, [sp, #24]
 800a134:	1bdb      	subs	r3, r3, r7
 800a136:	1e5a      	subs	r2, r3, #1
 800a138:	d53e      	bpl.n	800a1b8 <_dtoa_r+0x220>
 800a13a:	2201      	movs	r2, #1
 800a13c:	1ad3      	subs	r3, r2, r3
 800a13e:	9306      	str	r3, [sp, #24]
 800a140:	2300      	movs	r3, #0
 800a142:	930d      	str	r3, [sp, #52]	@ 0x34
 800a144:	9b04      	ldr	r3, [sp, #16]
 800a146:	2b00      	cmp	r3, #0
 800a148:	db38      	blt.n	800a1bc <_dtoa_r+0x224>
 800a14a:	9a04      	ldr	r2, [sp, #16]
 800a14c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a14e:	4694      	mov	ip, r2
 800a150:	4463      	add	r3, ip
 800a152:	930d      	str	r3, [sp, #52]	@ 0x34
 800a154:	2300      	movs	r3, #0
 800a156:	9214      	str	r2, [sp, #80]	@ 0x50
 800a158:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a15a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a15c:	2401      	movs	r4, #1
 800a15e:	2b09      	cmp	r3, #9
 800a160:	d867      	bhi.n	800a232 <_dtoa_r+0x29a>
 800a162:	2b05      	cmp	r3, #5
 800a164:	dd02      	ble.n	800a16c <_dtoa_r+0x1d4>
 800a166:	2400      	movs	r4, #0
 800a168:	3b04      	subs	r3, #4
 800a16a:	9322      	str	r3, [sp, #136]	@ 0x88
 800a16c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a16e:	1e98      	subs	r0, r3, #2
 800a170:	2803      	cmp	r0, #3
 800a172:	d867      	bhi.n	800a244 <_dtoa_r+0x2ac>
 800a174:	f7f5 ffcc 	bl	8000110 <__gnu_thumb1_case_uqi>
 800a178:	5b383a2b 	.word	0x5b383a2b
 800a17c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a17e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800a180:	18f6      	adds	r6, r6, r3
 800a182:	4b68      	ldr	r3, [pc, #416]	@ (800a324 <_dtoa_r+0x38c>)
 800a184:	18f2      	adds	r2, r6, r3
 800a186:	2a20      	cmp	r2, #32
 800a188:	dd0f      	ble.n	800a1aa <_dtoa_r+0x212>
 800a18a:	2340      	movs	r3, #64	@ 0x40
 800a18c:	1a9b      	subs	r3, r3, r2
 800a18e:	409f      	lsls	r7, r3
 800a190:	4b65      	ldr	r3, [pc, #404]	@ (800a328 <_dtoa_r+0x390>)
 800a192:	0038      	movs	r0, r7
 800a194:	18f3      	adds	r3, r6, r3
 800a196:	40dc      	lsrs	r4, r3
 800a198:	4320      	orrs	r0, r4
 800a19a:	f7f8 fa37 	bl	800260c <__aeabi_ui2d>
 800a19e:	2201      	movs	r2, #1
 800a1a0:	4b62      	ldr	r3, [pc, #392]	@ (800a32c <_dtoa_r+0x394>)
 800a1a2:	1e77      	subs	r7, r6, #1
 800a1a4:	18cb      	adds	r3, r1, r3
 800a1a6:	9218      	str	r2, [sp, #96]	@ 0x60
 800a1a8:	e776      	b.n	800a098 <_dtoa_r+0x100>
 800a1aa:	2320      	movs	r3, #32
 800a1ac:	0020      	movs	r0, r4
 800a1ae:	1a9b      	subs	r3, r3, r2
 800a1b0:	4098      	lsls	r0, r3
 800a1b2:	e7f2      	b.n	800a19a <_dtoa_r+0x202>
 800a1b4:	9015      	str	r0, [sp, #84]	@ 0x54
 800a1b6:	e7ba      	b.n	800a12e <_dtoa_r+0x196>
 800a1b8:	920d      	str	r2, [sp, #52]	@ 0x34
 800a1ba:	e7c3      	b.n	800a144 <_dtoa_r+0x1ac>
 800a1bc:	9b06      	ldr	r3, [sp, #24]
 800a1be:	9a04      	ldr	r2, [sp, #16]
 800a1c0:	1a9b      	subs	r3, r3, r2
 800a1c2:	9306      	str	r3, [sp, #24]
 800a1c4:	4253      	negs	r3, r2
 800a1c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	9314      	str	r3, [sp, #80]	@ 0x50
 800a1cc:	e7c5      	b.n	800a15a <_dtoa_r+0x1c2>
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a1d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a1d4:	930e      	str	r3, [sp, #56]	@ 0x38
 800a1d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	dc13      	bgt.n	800a204 <_dtoa_r+0x26c>
 800a1dc:	2301      	movs	r3, #1
 800a1de:	001a      	movs	r2, r3
 800a1e0:	930e      	str	r3, [sp, #56]	@ 0x38
 800a1e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1e4:	9223      	str	r2, [sp, #140]	@ 0x8c
 800a1e6:	e00d      	b.n	800a204 <_dtoa_r+0x26c>
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e7f1      	b.n	800a1d0 <_dtoa_r+0x238>
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a1f0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a1f2:	4694      	mov	ip, r2
 800a1f4:	9b04      	ldr	r3, [sp, #16]
 800a1f6:	4463      	add	r3, ip
 800a1f8:	930e      	str	r3, [sp, #56]	@ 0x38
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	dc00      	bgt.n	800a204 <_dtoa_r+0x26c>
 800a202:	2301      	movs	r3, #1
 800a204:	9a03      	ldr	r2, [sp, #12]
 800a206:	2100      	movs	r1, #0
 800a208:	69d0      	ldr	r0, [r2, #28]
 800a20a:	2204      	movs	r2, #4
 800a20c:	0015      	movs	r5, r2
 800a20e:	3514      	adds	r5, #20
 800a210:	429d      	cmp	r5, r3
 800a212:	d91b      	bls.n	800a24c <_dtoa_r+0x2b4>
 800a214:	6041      	str	r1, [r0, #4]
 800a216:	9803      	ldr	r0, [sp, #12]
 800a218:	f000 ff7e 	bl	800b118 <_Balloc>
 800a21c:	9008      	str	r0, [sp, #32]
 800a21e:	2800      	cmp	r0, #0
 800a220:	d117      	bne.n	800a252 <_dtoa_r+0x2ba>
 800a222:	21b0      	movs	r1, #176	@ 0xb0
 800a224:	4b42      	ldr	r3, [pc, #264]	@ (800a330 <_dtoa_r+0x398>)
 800a226:	482e      	ldr	r0, [pc, #184]	@ (800a2e0 <_dtoa_r+0x348>)
 800a228:	9a08      	ldr	r2, [sp, #32]
 800a22a:	31ff      	adds	r1, #255	@ 0xff
 800a22c:	e6c9      	b.n	8009fc2 <_dtoa_r+0x2a>
 800a22e:	2301      	movs	r3, #1
 800a230:	e7dd      	b.n	800a1ee <_dtoa_r+0x256>
 800a232:	2300      	movs	r3, #0
 800a234:	9410      	str	r4, [sp, #64]	@ 0x40
 800a236:	9322      	str	r3, [sp, #136]	@ 0x88
 800a238:	3b01      	subs	r3, #1
 800a23a:	930e      	str	r3, [sp, #56]	@ 0x38
 800a23c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a23e:	2200      	movs	r2, #0
 800a240:	3313      	adds	r3, #19
 800a242:	e7cf      	b.n	800a1e4 <_dtoa_r+0x24c>
 800a244:	2301      	movs	r3, #1
 800a246:	9310      	str	r3, [sp, #64]	@ 0x40
 800a248:	3b02      	subs	r3, #2
 800a24a:	e7f6      	b.n	800a23a <_dtoa_r+0x2a2>
 800a24c:	3101      	adds	r1, #1
 800a24e:	0052      	lsls	r2, r2, #1
 800a250:	e7dc      	b.n	800a20c <_dtoa_r+0x274>
 800a252:	9b03      	ldr	r3, [sp, #12]
 800a254:	9a08      	ldr	r2, [sp, #32]
 800a256:	69db      	ldr	r3, [r3, #28]
 800a258:	601a      	str	r2, [r3, #0]
 800a25a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a25c:	2b0e      	cmp	r3, #14
 800a25e:	d900      	bls.n	800a262 <_dtoa_r+0x2ca>
 800a260:	e0d9      	b.n	800a416 <_dtoa_r+0x47e>
 800a262:	2c00      	cmp	r4, #0
 800a264:	d100      	bne.n	800a268 <_dtoa_r+0x2d0>
 800a266:	e0d6      	b.n	800a416 <_dtoa_r+0x47e>
 800a268:	9b04      	ldr	r3, [sp, #16]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	dd64      	ble.n	800a338 <_dtoa_r+0x3a0>
 800a26e:	210f      	movs	r1, #15
 800a270:	9a04      	ldr	r2, [sp, #16]
 800a272:	4b2b      	ldr	r3, [pc, #172]	@ (800a320 <_dtoa_r+0x388>)
 800a274:	400a      	ands	r2, r1
 800a276:	00d2      	lsls	r2, r2, #3
 800a278:	189b      	adds	r3, r3, r2
 800a27a:	681e      	ldr	r6, [r3, #0]
 800a27c:	685f      	ldr	r7, [r3, #4]
 800a27e:	9b04      	ldr	r3, [sp, #16]
 800a280:	2402      	movs	r4, #2
 800a282:	111d      	asrs	r5, r3, #4
 800a284:	05db      	lsls	r3, r3, #23
 800a286:	d50a      	bpl.n	800a29e <_dtoa_r+0x306>
 800a288:	4b2a      	ldr	r3, [pc, #168]	@ (800a334 <_dtoa_r+0x39c>)
 800a28a:	400d      	ands	r5, r1
 800a28c:	6a1a      	ldr	r2, [r3, #32]
 800a28e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a290:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a292:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a294:	f7f6 fe86 	bl	8000fa4 <__aeabi_ddiv>
 800a298:	900a      	str	r0, [sp, #40]	@ 0x28
 800a29a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a29c:	3401      	adds	r4, #1
 800a29e:	4b25      	ldr	r3, [pc, #148]	@ (800a334 <_dtoa_r+0x39c>)
 800a2a0:	930c      	str	r3, [sp, #48]	@ 0x30
 800a2a2:	2d00      	cmp	r5, #0
 800a2a4:	d108      	bne.n	800a2b8 <_dtoa_r+0x320>
 800a2a6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a2a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a2aa:	0032      	movs	r2, r6
 800a2ac:	003b      	movs	r3, r7
 800a2ae:	f7f6 fe79 	bl	8000fa4 <__aeabi_ddiv>
 800a2b2:	900a      	str	r0, [sp, #40]	@ 0x28
 800a2b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a2b6:	e05a      	b.n	800a36e <_dtoa_r+0x3d6>
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	421d      	tst	r5, r3
 800a2bc:	d009      	beq.n	800a2d2 <_dtoa_r+0x33a>
 800a2be:	18e4      	adds	r4, r4, r3
 800a2c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a2c2:	0030      	movs	r0, r6
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	0039      	movs	r1, r7
 800a2ca:	f7f7 faaf 	bl	800182c <__aeabi_dmul>
 800a2ce:	0006      	movs	r6, r0
 800a2d0:	000f      	movs	r7, r1
 800a2d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a2d4:	106d      	asrs	r5, r5, #1
 800a2d6:	3308      	adds	r3, #8
 800a2d8:	e7e2      	b.n	800a2a0 <_dtoa_r+0x308>
 800a2da:	46c0      	nop			@ (mov r8, r8)
 800a2dc:	0800c419 	.word	0x0800c419
 800a2e0:	0800c430 	.word	0x0800c430
 800a2e4:	7ff00000 	.word	0x7ff00000
 800a2e8:	0000270f 	.word	0x0000270f
 800a2ec:	0800c415 	.word	0x0800c415
 800a2f0:	0800c418 	.word	0x0800c418
 800a2f4:	0800c3e9 	.word	0x0800c3e9
 800a2f8:	0800c3e8 	.word	0x0800c3e8
 800a2fc:	3ff00000 	.word	0x3ff00000
 800a300:	fffffc01 	.word	0xfffffc01
 800a304:	3ff80000 	.word	0x3ff80000
 800a308:	636f4361 	.word	0x636f4361
 800a30c:	3fd287a7 	.word	0x3fd287a7
 800a310:	8b60c8b3 	.word	0x8b60c8b3
 800a314:	3fc68a28 	.word	0x3fc68a28
 800a318:	509f79fb 	.word	0x509f79fb
 800a31c:	3fd34413 	.word	0x3fd34413
 800a320:	0800c538 	.word	0x0800c538
 800a324:	00000432 	.word	0x00000432
 800a328:	00000412 	.word	0x00000412
 800a32c:	fe100000 	.word	0xfe100000
 800a330:	0800c488 	.word	0x0800c488
 800a334:	0800c510 	.word	0x0800c510
 800a338:	9b04      	ldr	r3, [sp, #16]
 800a33a:	2402      	movs	r4, #2
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d016      	beq.n	800a36e <_dtoa_r+0x3d6>
 800a340:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a342:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a344:	220f      	movs	r2, #15
 800a346:	425d      	negs	r5, r3
 800a348:	402a      	ands	r2, r5
 800a34a:	4bd7      	ldr	r3, [pc, #860]	@ (800a6a8 <_dtoa_r+0x710>)
 800a34c:	00d2      	lsls	r2, r2, #3
 800a34e:	189b      	adds	r3, r3, r2
 800a350:	681a      	ldr	r2, [r3, #0]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	f7f7 fa6a 	bl	800182c <__aeabi_dmul>
 800a358:	2701      	movs	r7, #1
 800a35a:	2300      	movs	r3, #0
 800a35c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a35e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a360:	4ed2      	ldr	r6, [pc, #840]	@ (800a6ac <_dtoa_r+0x714>)
 800a362:	112d      	asrs	r5, r5, #4
 800a364:	2d00      	cmp	r5, #0
 800a366:	d000      	beq.n	800a36a <_dtoa_r+0x3d2>
 800a368:	e0ba      	b.n	800a4e0 <_dtoa_r+0x548>
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1a1      	bne.n	800a2b2 <_dtoa_r+0x31a>
 800a36e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a370:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a372:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a374:	2b00      	cmp	r3, #0
 800a376:	d100      	bne.n	800a37a <_dtoa_r+0x3e2>
 800a378:	e0bd      	b.n	800a4f6 <_dtoa_r+0x55e>
 800a37a:	2200      	movs	r2, #0
 800a37c:	0030      	movs	r0, r6
 800a37e:	0039      	movs	r1, r7
 800a380:	4bcb      	ldr	r3, [pc, #812]	@ (800a6b0 <_dtoa_r+0x718>)
 800a382:	f7f6 f865 	bl	8000450 <__aeabi_dcmplt>
 800a386:	2800      	cmp	r0, #0
 800a388:	d100      	bne.n	800a38c <_dtoa_r+0x3f4>
 800a38a:	e0b4      	b.n	800a4f6 <_dtoa_r+0x55e>
 800a38c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d100      	bne.n	800a394 <_dtoa_r+0x3fc>
 800a392:	e0b0      	b.n	800a4f6 <_dtoa_r+0x55e>
 800a394:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a396:	2b00      	cmp	r3, #0
 800a398:	dd39      	ble.n	800a40e <_dtoa_r+0x476>
 800a39a:	9b04      	ldr	r3, [sp, #16]
 800a39c:	2200      	movs	r2, #0
 800a39e:	3b01      	subs	r3, #1
 800a3a0:	930c      	str	r3, [sp, #48]	@ 0x30
 800a3a2:	0030      	movs	r0, r6
 800a3a4:	4bc3      	ldr	r3, [pc, #780]	@ (800a6b4 <_dtoa_r+0x71c>)
 800a3a6:	0039      	movs	r1, r7
 800a3a8:	f7f7 fa40 	bl	800182c <__aeabi_dmul>
 800a3ac:	900a      	str	r0, [sp, #40]	@ 0x28
 800a3ae:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a3b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3b2:	3401      	adds	r4, #1
 800a3b4:	0020      	movs	r0, r4
 800a3b6:	9311      	str	r3, [sp, #68]	@ 0x44
 800a3b8:	f7f8 f8fa 	bl	80025b0 <__aeabi_i2d>
 800a3bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a3be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3c0:	f7f7 fa34 	bl	800182c <__aeabi_dmul>
 800a3c4:	4bbc      	ldr	r3, [pc, #752]	@ (800a6b8 <_dtoa_r+0x720>)
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f7f6 fa88 	bl	80008dc <__aeabi_dadd>
 800a3cc:	4bbb      	ldr	r3, [pc, #748]	@ (800a6bc <_dtoa_r+0x724>)
 800a3ce:	0006      	movs	r6, r0
 800a3d0:	18cf      	adds	r7, r1, r3
 800a3d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d000      	beq.n	800a3da <_dtoa_r+0x442>
 800a3d8:	e091      	b.n	800a4fe <_dtoa_r+0x566>
 800a3da:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a3dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a3de:	2200      	movs	r2, #0
 800a3e0:	4bb7      	ldr	r3, [pc, #732]	@ (800a6c0 <_dtoa_r+0x728>)
 800a3e2:	f7f7 fceb 	bl	8001dbc <__aeabi_dsub>
 800a3e6:	0032      	movs	r2, r6
 800a3e8:	003b      	movs	r3, r7
 800a3ea:	0004      	movs	r4, r0
 800a3ec:	000d      	movs	r5, r1
 800a3ee:	f7f6 f843 	bl	8000478 <__aeabi_dcmpgt>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	d000      	beq.n	800a3f8 <_dtoa_r+0x460>
 800a3f6:	e29d      	b.n	800a934 <_dtoa_r+0x99c>
 800a3f8:	2180      	movs	r1, #128	@ 0x80
 800a3fa:	0609      	lsls	r1, r1, #24
 800a3fc:	187b      	adds	r3, r7, r1
 800a3fe:	0032      	movs	r2, r6
 800a400:	0020      	movs	r0, r4
 800a402:	0029      	movs	r1, r5
 800a404:	f7f6 f824 	bl	8000450 <__aeabi_dcmplt>
 800a408:	2800      	cmp	r0, #0
 800a40a:	d000      	beq.n	800a40e <_dtoa_r+0x476>
 800a40c:	e130      	b.n	800a670 <_dtoa_r+0x6d8>
 800a40e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a410:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800a412:	930a      	str	r3, [sp, #40]	@ 0x28
 800a414:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a416:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a418:	2b00      	cmp	r3, #0
 800a41a:	da00      	bge.n	800a41e <_dtoa_r+0x486>
 800a41c:	e177      	b.n	800a70e <_dtoa_r+0x776>
 800a41e:	9a04      	ldr	r2, [sp, #16]
 800a420:	2a0e      	cmp	r2, #14
 800a422:	dd00      	ble.n	800a426 <_dtoa_r+0x48e>
 800a424:	e173      	b.n	800a70e <_dtoa_r+0x776>
 800a426:	4ba0      	ldr	r3, [pc, #640]	@ (800a6a8 <_dtoa_r+0x710>)
 800a428:	00d2      	lsls	r2, r2, #3
 800a42a:	189b      	adds	r3, r3, r2
 800a42c:	685c      	ldr	r4, [r3, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	9306      	str	r3, [sp, #24]
 800a432:	9407      	str	r4, [sp, #28]
 800a434:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a436:	2b00      	cmp	r3, #0
 800a438:	da03      	bge.n	800a442 <_dtoa_r+0x4aa>
 800a43a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	dc00      	bgt.n	800a442 <_dtoa_r+0x4aa>
 800a440:	e106      	b.n	800a650 <_dtoa_r+0x6b8>
 800a442:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a444:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a448:	9d08      	ldr	r5, [sp, #32]
 800a44a:	3b01      	subs	r3, #1
 800a44c:	195b      	adds	r3, r3, r5
 800a44e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a450:	9a06      	ldr	r2, [sp, #24]
 800a452:	9b07      	ldr	r3, [sp, #28]
 800a454:	0030      	movs	r0, r6
 800a456:	0039      	movs	r1, r7
 800a458:	f7f6 fda4 	bl	8000fa4 <__aeabi_ddiv>
 800a45c:	f7f8 f86c 	bl	8002538 <__aeabi_d2iz>
 800a460:	9009      	str	r0, [sp, #36]	@ 0x24
 800a462:	f7f8 f8a5 	bl	80025b0 <__aeabi_i2d>
 800a466:	9a06      	ldr	r2, [sp, #24]
 800a468:	9b07      	ldr	r3, [sp, #28]
 800a46a:	f7f7 f9df 	bl	800182c <__aeabi_dmul>
 800a46e:	0002      	movs	r2, r0
 800a470:	000b      	movs	r3, r1
 800a472:	0030      	movs	r0, r6
 800a474:	0039      	movs	r1, r7
 800a476:	f7f7 fca1 	bl	8001dbc <__aeabi_dsub>
 800a47a:	002b      	movs	r3, r5
 800a47c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a47e:	3501      	adds	r5, #1
 800a480:	3230      	adds	r2, #48	@ 0x30
 800a482:	701a      	strb	r2, [r3, #0]
 800a484:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a486:	002c      	movs	r4, r5
 800a488:	429a      	cmp	r2, r3
 800a48a:	d000      	beq.n	800a48e <_dtoa_r+0x4f6>
 800a48c:	e131      	b.n	800a6f2 <_dtoa_r+0x75a>
 800a48e:	0002      	movs	r2, r0
 800a490:	000b      	movs	r3, r1
 800a492:	f7f6 fa23 	bl	80008dc <__aeabi_dadd>
 800a496:	9a06      	ldr	r2, [sp, #24]
 800a498:	9b07      	ldr	r3, [sp, #28]
 800a49a:	0006      	movs	r6, r0
 800a49c:	000f      	movs	r7, r1
 800a49e:	f7f5 ffeb 	bl	8000478 <__aeabi_dcmpgt>
 800a4a2:	2800      	cmp	r0, #0
 800a4a4:	d000      	beq.n	800a4a8 <_dtoa_r+0x510>
 800a4a6:	e10f      	b.n	800a6c8 <_dtoa_r+0x730>
 800a4a8:	9a06      	ldr	r2, [sp, #24]
 800a4aa:	9b07      	ldr	r3, [sp, #28]
 800a4ac:	0030      	movs	r0, r6
 800a4ae:	0039      	movs	r1, r7
 800a4b0:	f7f5 ffc8 	bl	8000444 <__aeabi_dcmpeq>
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	d003      	beq.n	800a4c0 <_dtoa_r+0x528>
 800a4b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4ba:	07dd      	lsls	r5, r3, #31
 800a4bc:	d500      	bpl.n	800a4c0 <_dtoa_r+0x528>
 800a4be:	e103      	b.n	800a6c8 <_dtoa_r+0x730>
 800a4c0:	9905      	ldr	r1, [sp, #20]
 800a4c2:	9803      	ldr	r0, [sp, #12]
 800a4c4:	f000 fe6c 	bl	800b1a0 <_Bfree>
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	7023      	strb	r3, [r4, #0]
 800a4cc:	9b04      	ldr	r3, [sp, #16]
 800a4ce:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	6013      	str	r3, [r2, #0]
 800a4d4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d100      	bne.n	800a4dc <_dtoa_r+0x544>
 800a4da:	e5a7      	b.n	800a02c <_dtoa_r+0x94>
 800a4dc:	601c      	str	r4, [r3, #0]
 800a4de:	e5a5      	b.n	800a02c <_dtoa_r+0x94>
 800a4e0:	423d      	tst	r5, r7
 800a4e2:	d005      	beq.n	800a4f0 <_dtoa_r+0x558>
 800a4e4:	6832      	ldr	r2, [r6, #0]
 800a4e6:	6873      	ldr	r3, [r6, #4]
 800a4e8:	f7f7 f9a0 	bl	800182c <__aeabi_dmul>
 800a4ec:	003b      	movs	r3, r7
 800a4ee:	3401      	adds	r4, #1
 800a4f0:	106d      	asrs	r5, r5, #1
 800a4f2:	3608      	adds	r6, #8
 800a4f4:	e736      	b.n	800a364 <_dtoa_r+0x3cc>
 800a4f6:	9b04      	ldr	r3, [sp, #16]
 800a4f8:	930c      	str	r3, [sp, #48]	@ 0x30
 800a4fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4fc:	e75a      	b.n	800a3b4 <_dtoa_r+0x41c>
 800a4fe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a500:	4b69      	ldr	r3, [pc, #420]	@ (800a6a8 <_dtoa_r+0x710>)
 800a502:	3a01      	subs	r2, #1
 800a504:	00d2      	lsls	r2, r2, #3
 800a506:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800a508:	189b      	adds	r3, r3, r2
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	2900      	cmp	r1, #0
 800a510:	d04c      	beq.n	800a5ac <_dtoa_r+0x614>
 800a512:	2000      	movs	r0, #0
 800a514:	496b      	ldr	r1, [pc, #428]	@ (800a6c4 <_dtoa_r+0x72c>)
 800a516:	f7f6 fd45 	bl	8000fa4 <__aeabi_ddiv>
 800a51a:	0032      	movs	r2, r6
 800a51c:	003b      	movs	r3, r7
 800a51e:	f7f7 fc4d 	bl	8001dbc <__aeabi_dsub>
 800a522:	9a08      	ldr	r2, [sp, #32]
 800a524:	0006      	movs	r6, r0
 800a526:	4694      	mov	ip, r2
 800a528:	000f      	movs	r7, r1
 800a52a:	9b08      	ldr	r3, [sp, #32]
 800a52c:	9316      	str	r3, [sp, #88]	@ 0x58
 800a52e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a530:	4463      	add	r3, ip
 800a532:	9311      	str	r3, [sp, #68]	@ 0x44
 800a534:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a536:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a538:	f7f7 fffe 	bl	8002538 <__aeabi_d2iz>
 800a53c:	0005      	movs	r5, r0
 800a53e:	f7f8 f837 	bl	80025b0 <__aeabi_i2d>
 800a542:	0002      	movs	r2, r0
 800a544:	000b      	movs	r3, r1
 800a546:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a548:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a54a:	f7f7 fc37 	bl	8001dbc <__aeabi_dsub>
 800a54e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a550:	3530      	adds	r5, #48	@ 0x30
 800a552:	1c5c      	adds	r4, r3, #1
 800a554:	701d      	strb	r5, [r3, #0]
 800a556:	0032      	movs	r2, r6
 800a558:	003b      	movs	r3, r7
 800a55a:	900a      	str	r0, [sp, #40]	@ 0x28
 800a55c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a55e:	f7f5 ff77 	bl	8000450 <__aeabi_dcmplt>
 800a562:	2800      	cmp	r0, #0
 800a564:	d16a      	bne.n	800a63c <_dtoa_r+0x6a4>
 800a566:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a568:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a56a:	2000      	movs	r0, #0
 800a56c:	4950      	ldr	r1, [pc, #320]	@ (800a6b0 <_dtoa_r+0x718>)
 800a56e:	f7f7 fc25 	bl	8001dbc <__aeabi_dsub>
 800a572:	0032      	movs	r2, r6
 800a574:	003b      	movs	r3, r7
 800a576:	f7f5 ff6b 	bl	8000450 <__aeabi_dcmplt>
 800a57a:	2800      	cmp	r0, #0
 800a57c:	d000      	beq.n	800a580 <_dtoa_r+0x5e8>
 800a57e:	e0a5      	b.n	800a6cc <_dtoa_r+0x734>
 800a580:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a582:	42a3      	cmp	r3, r4
 800a584:	d100      	bne.n	800a588 <_dtoa_r+0x5f0>
 800a586:	e742      	b.n	800a40e <_dtoa_r+0x476>
 800a588:	2200      	movs	r2, #0
 800a58a:	0030      	movs	r0, r6
 800a58c:	0039      	movs	r1, r7
 800a58e:	4b49      	ldr	r3, [pc, #292]	@ (800a6b4 <_dtoa_r+0x71c>)
 800a590:	f7f7 f94c 	bl	800182c <__aeabi_dmul>
 800a594:	2200      	movs	r2, #0
 800a596:	0006      	movs	r6, r0
 800a598:	000f      	movs	r7, r1
 800a59a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a59c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a59e:	4b45      	ldr	r3, [pc, #276]	@ (800a6b4 <_dtoa_r+0x71c>)
 800a5a0:	f7f7 f944 	bl	800182c <__aeabi_dmul>
 800a5a4:	9416      	str	r4, [sp, #88]	@ 0x58
 800a5a6:	900a      	str	r0, [sp, #40]	@ 0x28
 800a5a8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a5aa:	e7c3      	b.n	800a534 <_dtoa_r+0x59c>
 800a5ac:	0030      	movs	r0, r6
 800a5ae:	0039      	movs	r1, r7
 800a5b0:	f7f7 f93c 	bl	800182c <__aeabi_dmul>
 800a5b4:	9d08      	ldr	r5, [sp, #32]
 800a5b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a5b8:	002b      	movs	r3, r5
 800a5ba:	4694      	mov	ip, r2
 800a5bc:	9016      	str	r0, [sp, #88]	@ 0x58
 800a5be:	9117      	str	r1, [sp, #92]	@ 0x5c
 800a5c0:	4463      	add	r3, ip
 800a5c2:	9319      	str	r3, [sp, #100]	@ 0x64
 800a5c4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a5c6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a5c8:	f7f7 ffb6 	bl	8002538 <__aeabi_d2iz>
 800a5cc:	0004      	movs	r4, r0
 800a5ce:	f7f7 ffef 	bl	80025b0 <__aeabi_i2d>
 800a5d2:	000b      	movs	r3, r1
 800a5d4:	0002      	movs	r2, r0
 800a5d6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a5d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a5da:	f7f7 fbef 	bl	8001dbc <__aeabi_dsub>
 800a5de:	3430      	adds	r4, #48	@ 0x30
 800a5e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a5e2:	702c      	strb	r4, [r5, #0]
 800a5e4:	3501      	adds	r5, #1
 800a5e6:	0006      	movs	r6, r0
 800a5e8:	000f      	movs	r7, r1
 800a5ea:	42ab      	cmp	r3, r5
 800a5ec:	d129      	bne.n	800a642 <_dtoa_r+0x6aa>
 800a5ee:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800a5f0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800a5f2:	9b08      	ldr	r3, [sp, #32]
 800a5f4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800a5f6:	469c      	mov	ip, r3
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	4b32      	ldr	r3, [pc, #200]	@ (800a6c4 <_dtoa_r+0x72c>)
 800a5fc:	4464      	add	r4, ip
 800a5fe:	f7f6 f96d 	bl	80008dc <__aeabi_dadd>
 800a602:	0002      	movs	r2, r0
 800a604:	000b      	movs	r3, r1
 800a606:	0030      	movs	r0, r6
 800a608:	0039      	movs	r1, r7
 800a60a:	f7f5 ff35 	bl	8000478 <__aeabi_dcmpgt>
 800a60e:	2800      	cmp	r0, #0
 800a610:	d15c      	bne.n	800a6cc <_dtoa_r+0x734>
 800a612:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a614:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a616:	2000      	movs	r0, #0
 800a618:	492a      	ldr	r1, [pc, #168]	@ (800a6c4 <_dtoa_r+0x72c>)
 800a61a:	f7f7 fbcf 	bl	8001dbc <__aeabi_dsub>
 800a61e:	0002      	movs	r2, r0
 800a620:	000b      	movs	r3, r1
 800a622:	0030      	movs	r0, r6
 800a624:	0039      	movs	r1, r7
 800a626:	f7f5 ff13 	bl	8000450 <__aeabi_dcmplt>
 800a62a:	2800      	cmp	r0, #0
 800a62c:	d100      	bne.n	800a630 <_dtoa_r+0x698>
 800a62e:	e6ee      	b.n	800a40e <_dtoa_r+0x476>
 800a630:	0023      	movs	r3, r4
 800a632:	3c01      	subs	r4, #1
 800a634:	7822      	ldrb	r2, [r4, #0]
 800a636:	2a30      	cmp	r2, #48	@ 0x30
 800a638:	d0fa      	beq.n	800a630 <_dtoa_r+0x698>
 800a63a:	001c      	movs	r4, r3
 800a63c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a63e:	9304      	str	r3, [sp, #16]
 800a640:	e73e      	b.n	800a4c0 <_dtoa_r+0x528>
 800a642:	2200      	movs	r2, #0
 800a644:	4b1b      	ldr	r3, [pc, #108]	@ (800a6b4 <_dtoa_r+0x71c>)
 800a646:	f7f7 f8f1 	bl	800182c <__aeabi_dmul>
 800a64a:	900a      	str	r0, [sp, #40]	@ 0x28
 800a64c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a64e:	e7b9      	b.n	800a5c4 <_dtoa_r+0x62c>
 800a650:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a652:	2b00      	cmp	r3, #0
 800a654:	d10c      	bne.n	800a670 <_dtoa_r+0x6d8>
 800a656:	9806      	ldr	r0, [sp, #24]
 800a658:	9907      	ldr	r1, [sp, #28]
 800a65a:	2200      	movs	r2, #0
 800a65c:	4b18      	ldr	r3, [pc, #96]	@ (800a6c0 <_dtoa_r+0x728>)
 800a65e:	f7f7 f8e5 	bl	800182c <__aeabi_dmul>
 800a662:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a664:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a666:	f7f5 ff11 	bl	800048c <__aeabi_dcmpge>
 800a66a:	2800      	cmp	r0, #0
 800a66c:	d100      	bne.n	800a670 <_dtoa_r+0x6d8>
 800a66e:	e164      	b.n	800a93a <_dtoa_r+0x9a2>
 800a670:	2600      	movs	r6, #0
 800a672:	0037      	movs	r7, r6
 800a674:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a676:	9c08      	ldr	r4, [sp, #32]
 800a678:	43db      	mvns	r3, r3
 800a67a:	930c      	str	r3, [sp, #48]	@ 0x30
 800a67c:	2300      	movs	r3, #0
 800a67e:	9304      	str	r3, [sp, #16]
 800a680:	0031      	movs	r1, r6
 800a682:	9803      	ldr	r0, [sp, #12]
 800a684:	f000 fd8c 	bl	800b1a0 <_Bfree>
 800a688:	2f00      	cmp	r7, #0
 800a68a:	d0d7      	beq.n	800a63c <_dtoa_r+0x6a4>
 800a68c:	9b04      	ldr	r3, [sp, #16]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d005      	beq.n	800a69e <_dtoa_r+0x706>
 800a692:	42bb      	cmp	r3, r7
 800a694:	d003      	beq.n	800a69e <_dtoa_r+0x706>
 800a696:	0019      	movs	r1, r3
 800a698:	9803      	ldr	r0, [sp, #12]
 800a69a:	f000 fd81 	bl	800b1a0 <_Bfree>
 800a69e:	0039      	movs	r1, r7
 800a6a0:	9803      	ldr	r0, [sp, #12]
 800a6a2:	f000 fd7d 	bl	800b1a0 <_Bfree>
 800a6a6:	e7c9      	b.n	800a63c <_dtoa_r+0x6a4>
 800a6a8:	0800c538 	.word	0x0800c538
 800a6ac:	0800c510 	.word	0x0800c510
 800a6b0:	3ff00000 	.word	0x3ff00000
 800a6b4:	40240000 	.word	0x40240000
 800a6b8:	401c0000 	.word	0x401c0000
 800a6bc:	fcc00000 	.word	0xfcc00000
 800a6c0:	40140000 	.word	0x40140000
 800a6c4:	3fe00000 	.word	0x3fe00000
 800a6c8:	9b04      	ldr	r3, [sp, #16]
 800a6ca:	930c      	str	r3, [sp, #48]	@ 0x30
 800a6cc:	0023      	movs	r3, r4
 800a6ce:	001c      	movs	r4, r3
 800a6d0:	3b01      	subs	r3, #1
 800a6d2:	781a      	ldrb	r2, [r3, #0]
 800a6d4:	2a39      	cmp	r2, #57	@ 0x39
 800a6d6:	d108      	bne.n	800a6ea <_dtoa_r+0x752>
 800a6d8:	9a08      	ldr	r2, [sp, #32]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d1f7      	bne.n	800a6ce <_dtoa_r+0x736>
 800a6de:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a6e0:	9908      	ldr	r1, [sp, #32]
 800a6e2:	3201      	adds	r2, #1
 800a6e4:	920c      	str	r2, [sp, #48]	@ 0x30
 800a6e6:	2230      	movs	r2, #48	@ 0x30
 800a6e8:	700a      	strb	r2, [r1, #0]
 800a6ea:	781a      	ldrb	r2, [r3, #0]
 800a6ec:	3201      	adds	r2, #1
 800a6ee:	701a      	strb	r2, [r3, #0]
 800a6f0:	e7a4      	b.n	800a63c <_dtoa_r+0x6a4>
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	4bc6      	ldr	r3, [pc, #792]	@ (800aa10 <_dtoa_r+0xa78>)
 800a6f6:	f7f7 f899 	bl	800182c <__aeabi_dmul>
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	0006      	movs	r6, r0
 800a700:	000f      	movs	r7, r1
 800a702:	f7f5 fe9f 	bl	8000444 <__aeabi_dcmpeq>
 800a706:	2800      	cmp	r0, #0
 800a708:	d100      	bne.n	800a70c <_dtoa_r+0x774>
 800a70a:	e6a1      	b.n	800a450 <_dtoa_r+0x4b8>
 800a70c:	e6d8      	b.n	800a4c0 <_dtoa_r+0x528>
 800a70e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800a710:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800a712:	9c06      	ldr	r4, [sp, #24]
 800a714:	2f00      	cmp	r7, #0
 800a716:	d014      	beq.n	800a742 <_dtoa_r+0x7aa>
 800a718:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a71a:	2a01      	cmp	r2, #1
 800a71c:	dd00      	ble.n	800a720 <_dtoa_r+0x788>
 800a71e:	e0c8      	b.n	800a8b2 <_dtoa_r+0x91a>
 800a720:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800a722:	2a00      	cmp	r2, #0
 800a724:	d100      	bne.n	800a728 <_dtoa_r+0x790>
 800a726:	e0be      	b.n	800a8a6 <_dtoa_r+0x90e>
 800a728:	4aba      	ldr	r2, [pc, #744]	@ (800aa14 <_dtoa_r+0xa7c>)
 800a72a:	189b      	adds	r3, r3, r2
 800a72c:	9a06      	ldr	r2, [sp, #24]
 800a72e:	2101      	movs	r1, #1
 800a730:	18d2      	adds	r2, r2, r3
 800a732:	9206      	str	r2, [sp, #24]
 800a734:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a736:	9803      	ldr	r0, [sp, #12]
 800a738:	18d3      	adds	r3, r2, r3
 800a73a:	930d      	str	r3, [sp, #52]	@ 0x34
 800a73c:	f000 fde8 	bl	800b310 <__i2b>
 800a740:	0007      	movs	r7, r0
 800a742:	2c00      	cmp	r4, #0
 800a744:	d00e      	beq.n	800a764 <_dtoa_r+0x7cc>
 800a746:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a748:	2b00      	cmp	r3, #0
 800a74a:	dd0b      	ble.n	800a764 <_dtoa_r+0x7cc>
 800a74c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a74e:	0023      	movs	r3, r4
 800a750:	4294      	cmp	r4, r2
 800a752:	dd00      	ble.n	800a756 <_dtoa_r+0x7be>
 800a754:	0013      	movs	r3, r2
 800a756:	9a06      	ldr	r2, [sp, #24]
 800a758:	1ae4      	subs	r4, r4, r3
 800a75a:	1ad2      	subs	r2, r2, r3
 800a75c:	9206      	str	r2, [sp, #24]
 800a75e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a760:	1ad3      	subs	r3, r2, r3
 800a762:	930d      	str	r3, [sp, #52]	@ 0x34
 800a764:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a766:	2b00      	cmp	r3, #0
 800a768:	d01f      	beq.n	800a7aa <_dtoa_r+0x812>
 800a76a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d100      	bne.n	800a772 <_dtoa_r+0x7da>
 800a770:	e0b5      	b.n	800a8de <_dtoa_r+0x946>
 800a772:	2d00      	cmp	r5, #0
 800a774:	d010      	beq.n	800a798 <_dtoa_r+0x800>
 800a776:	0039      	movs	r1, r7
 800a778:	002a      	movs	r2, r5
 800a77a:	9803      	ldr	r0, [sp, #12]
 800a77c:	f000 fe92 	bl	800b4a4 <__pow5mult>
 800a780:	9a05      	ldr	r2, [sp, #20]
 800a782:	0001      	movs	r1, r0
 800a784:	0007      	movs	r7, r0
 800a786:	9803      	ldr	r0, [sp, #12]
 800a788:	f000 fdda 	bl	800b340 <__multiply>
 800a78c:	0006      	movs	r6, r0
 800a78e:	9905      	ldr	r1, [sp, #20]
 800a790:	9803      	ldr	r0, [sp, #12]
 800a792:	f000 fd05 	bl	800b1a0 <_Bfree>
 800a796:	9605      	str	r6, [sp, #20]
 800a798:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a79a:	1b5a      	subs	r2, r3, r5
 800a79c:	42ab      	cmp	r3, r5
 800a79e:	d004      	beq.n	800a7aa <_dtoa_r+0x812>
 800a7a0:	9905      	ldr	r1, [sp, #20]
 800a7a2:	9803      	ldr	r0, [sp, #12]
 800a7a4:	f000 fe7e 	bl	800b4a4 <__pow5mult>
 800a7a8:	9005      	str	r0, [sp, #20]
 800a7aa:	2101      	movs	r1, #1
 800a7ac:	9803      	ldr	r0, [sp, #12]
 800a7ae:	f000 fdaf 	bl	800b310 <__i2b>
 800a7b2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a7b4:	0006      	movs	r6, r0
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d100      	bne.n	800a7bc <_dtoa_r+0x824>
 800a7ba:	e1bc      	b.n	800ab36 <_dtoa_r+0xb9e>
 800a7bc:	001a      	movs	r2, r3
 800a7be:	0001      	movs	r1, r0
 800a7c0:	9803      	ldr	r0, [sp, #12]
 800a7c2:	f000 fe6f 	bl	800b4a4 <__pow5mult>
 800a7c6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a7c8:	0006      	movs	r6, r0
 800a7ca:	2500      	movs	r5, #0
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	dc16      	bgt.n	800a7fe <_dtoa_r+0x866>
 800a7d0:	2500      	movs	r5, #0
 800a7d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7d4:	42ab      	cmp	r3, r5
 800a7d6:	d10e      	bne.n	800a7f6 <_dtoa_r+0x85e>
 800a7d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7da:	031b      	lsls	r3, r3, #12
 800a7dc:	42ab      	cmp	r3, r5
 800a7de:	d10a      	bne.n	800a7f6 <_dtoa_r+0x85e>
 800a7e0:	4b8d      	ldr	r3, [pc, #564]	@ (800aa18 <_dtoa_r+0xa80>)
 800a7e2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a7e4:	4213      	tst	r3, r2
 800a7e6:	d006      	beq.n	800a7f6 <_dtoa_r+0x85e>
 800a7e8:	9b06      	ldr	r3, [sp, #24]
 800a7ea:	3501      	adds	r5, #1
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	9306      	str	r3, [sp, #24]
 800a7f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	930d      	str	r3, [sp, #52]	@ 0x34
 800a7f6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a7f8:	2001      	movs	r0, #1
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d008      	beq.n	800a810 <_dtoa_r+0x878>
 800a7fe:	6933      	ldr	r3, [r6, #16]
 800a800:	3303      	adds	r3, #3
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	18f3      	adds	r3, r6, r3
 800a806:	6858      	ldr	r0, [r3, #4]
 800a808:	f000 fd32 	bl	800b270 <__hi0bits>
 800a80c:	2320      	movs	r3, #32
 800a80e:	1a18      	subs	r0, r3, r0
 800a810:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a812:	1818      	adds	r0, r3, r0
 800a814:	0002      	movs	r2, r0
 800a816:	231f      	movs	r3, #31
 800a818:	401a      	ands	r2, r3
 800a81a:	4218      	tst	r0, r3
 800a81c:	d065      	beq.n	800a8ea <_dtoa_r+0x952>
 800a81e:	3301      	adds	r3, #1
 800a820:	1a9b      	subs	r3, r3, r2
 800a822:	2b04      	cmp	r3, #4
 800a824:	dd5d      	ble.n	800a8e2 <_dtoa_r+0x94a>
 800a826:	231c      	movs	r3, #28
 800a828:	1a9b      	subs	r3, r3, r2
 800a82a:	9a06      	ldr	r2, [sp, #24]
 800a82c:	18e4      	adds	r4, r4, r3
 800a82e:	18d2      	adds	r2, r2, r3
 800a830:	9206      	str	r2, [sp, #24]
 800a832:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a834:	18d3      	adds	r3, r2, r3
 800a836:	930d      	str	r3, [sp, #52]	@ 0x34
 800a838:	9b06      	ldr	r3, [sp, #24]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	dd05      	ble.n	800a84a <_dtoa_r+0x8b2>
 800a83e:	001a      	movs	r2, r3
 800a840:	9905      	ldr	r1, [sp, #20]
 800a842:	9803      	ldr	r0, [sp, #12]
 800a844:	f000 fe8a 	bl	800b55c <__lshift>
 800a848:	9005      	str	r0, [sp, #20]
 800a84a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	dd05      	ble.n	800a85c <_dtoa_r+0x8c4>
 800a850:	0031      	movs	r1, r6
 800a852:	001a      	movs	r2, r3
 800a854:	9803      	ldr	r0, [sp, #12]
 800a856:	f000 fe81 	bl	800b55c <__lshift>
 800a85a:	0006      	movs	r6, r0
 800a85c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d045      	beq.n	800a8ee <_dtoa_r+0x956>
 800a862:	0031      	movs	r1, r6
 800a864:	9805      	ldr	r0, [sp, #20]
 800a866:	f000 fee5 	bl	800b634 <__mcmp>
 800a86a:	2800      	cmp	r0, #0
 800a86c:	da3f      	bge.n	800a8ee <_dtoa_r+0x956>
 800a86e:	9b04      	ldr	r3, [sp, #16]
 800a870:	220a      	movs	r2, #10
 800a872:	3b01      	subs	r3, #1
 800a874:	930c      	str	r3, [sp, #48]	@ 0x30
 800a876:	9905      	ldr	r1, [sp, #20]
 800a878:	2300      	movs	r3, #0
 800a87a:	9803      	ldr	r0, [sp, #12]
 800a87c:	f000 fcb4 	bl	800b1e8 <__multadd>
 800a880:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a882:	9005      	str	r0, [sp, #20]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d100      	bne.n	800a88a <_dtoa_r+0x8f2>
 800a888:	e15c      	b.n	800ab44 <_dtoa_r+0xbac>
 800a88a:	2300      	movs	r3, #0
 800a88c:	0039      	movs	r1, r7
 800a88e:	220a      	movs	r2, #10
 800a890:	9803      	ldr	r0, [sp, #12]
 800a892:	f000 fca9 	bl	800b1e8 <__multadd>
 800a896:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a898:	0007      	movs	r7, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	dc55      	bgt.n	800a94a <_dtoa_r+0x9b2>
 800a89e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a8a0:	2b02      	cmp	r3, #2
 800a8a2:	dc2d      	bgt.n	800a900 <_dtoa_r+0x968>
 800a8a4:	e051      	b.n	800a94a <_dtoa_r+0x9b2>
 800a8a6:	2336      	movs	r3, #54	@ 0x36
 800a8a8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a8aa:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800a8ac:	9c06      	ldr	r4, [sp, #24]
 800a8ae:	1a9b      	subs	r3, r3, r2
 800a8b0:	e73c      	b.n	800a72c <_dtoa_r+0x794>
 800a8b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8b4:	1e5d      	subs	r5, r3, #1
 800a8b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8b8:	42ab      	cmp	r3, r5
 800a8ba:	db08      	blt.n	800a8ce <_dtoa_r+0x936>
 800a8bc:	1b5d      	subs	r5, r3, r5
 800a8be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8c0:	9c06      	ldr	r4, [sp, #24]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	db00      	blt.n	800a8c8 <_dtoa_r+0x930>
 800a8c6:	e731      	b.n	800a72c <_dtoa_r+0x794>
 800a8c8:	1ae4      	subs	r4, r4, r3
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	e72e      	b.n	800a72c <_dtoa_r+0x794>
 800a8ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8d0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a8d2:	1aeb      	subs	r3, r5, r3
 800a8d4:	18d3      	adds	r3, r2, r3
 800a8d6:	950f      	str	r5, [sp, #60]	@ 0x3c
 800a8d8:	9314      	str	r3, [sp, #80]	@ 0x50
 800a8da:	2500      	movs	r5, #0
 800a8dc:	e7ef      	b.n	800a8be <_dtoa_r+0x926>
 800a8de:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a8e0:	e75e      	b.n	800a7a0 <_dtoa_r+0x808>
 800a8e2:	2b04      	cmp	r3, #4
 800a8e4:	d0a8      	beq.n	800a838 <_dtoa_r+0x8a0>
 800a8e6:	331c      	adds	r3, #28
 800a8e8:	e79f      	b.n	800a82a <_dtoa_r+0x892>
 800a8ea:	0013      	movs	r3, r2
 800a8ec:	e7fb      	b.n	800a8e6 <_dtoa_r+0x94e>
 800a8ee:	9b04      	ldr	r3, [sp, #16]
 800a8f0:	930c      	str	r3, [sp, #48]	@ 0x30
 800a8f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8f4:	930e      	str	r3, [sp, #56]	@ 0x38
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	dc23      	bgt.n	800a942 <_dtoa_r+0x9aa>
 800a8fa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a8fc:	2b02      	cmp	r3, #2
 800a8fe:	dd20      	ble.n	800a942 <_dtoa_r+0x9aa>
 800a900:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a902:	2b00      	cmp	r3, #0
 800a904:	d000      	beq.n	800a908 <_dtoa_r+0x970>
 800a906:	e6b5      	b.n	800a674 <_dtoa_r+0x6dc>
 800a908:	0031      	movs	r1, r6
 800a90a:	2205      	movs	r2, #5
 800a90c:	9803      	ldr	r0, [sp, #12]
 800a90e:	f000 fc6b 	bl	800b1e8 <__multadd>
 800a912:	0006      	movs	r6, r0
 800a914:	0001      	movs	r1, r0
 800a916:	9805      	ldr	r0, [sp, #20]
 800a918:	f000 fe8c 	bl	800b634 <__mcmp>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	dc00      	bgt.n	800a922 <_dtoa_r+0x98a>
 800a920:	e6a8      	b.n	800a674 <_dtoa_r+0x6dc>
 800a922:	9b08      	ldr	r3, [sp, #32]
 800a924:	9a08      	ldr	r2, [sp, #32]
 800a926:	1c5c      	adds	r4, r3, #1
 800a928:	2331      	movs	r3, #49	@ 0x31
 800a92a:	7013      	strb	r3, [r2, #0]
 800a92c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a92e:	3301      	adds	r3, #1
 800a930:	930c      	str	r3, [sp, #48]	@ 0x30
 800a932:	e6a3      	b.n	800a67c <_dtoa_r+0x6e4>
 800a934:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800a936:	0037      	movs	r7, r6
 800a938:	e7f3      	b.n	800a922 <_dtoa_r+0x98a>
 800a93a:	9b04      	ldr	r3, [sp, #16]
 800a93c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800a93e:	930c      	str	r3, [sp, #48]	@ 0x30
 800a940:	e7f9      	b.n	800a936 <_dtoa_r+0x99e>
 800a942:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a944:	2b00      	cmp	r3, #0
 800a946:	d100      	bne.n	800a94a <_dtoa_r+0x9b2>
 800a948:	e100      	b.n	800ab4c <_dtoa_r+0xbb4>
 800a94a:	2c00      	cmp	r4, #0
 800a94c:	dd05      	ble.n	800a95a <_dtoa_r+0x9c2>
 800a94e:	0039      	movs	r1, r7
 800a950:	0022      	movs	r2, r4
 800a952:	9803      	ldr	r0, [sp, #12]
 800a954:	f000 fe02 	bl	800b55c <__lshift>
 800a958:	0007      	movs	r7, r0
 800a95a:	0038      	movs	r0, r7
 800a95c:	2d00      	cmp	r5, #0
 800a95e:	d018      	beq.n	800a992 <_dtoa_r+0x9fa>
 800a960:	6879      	ldr	r1, [r7, #4]
 800a962:	9803      	ldr	r0, [sp, #12]
 800a964:	f000 fbd8 	bl	800b118 <_Balloc>
 800a968:	1e04      	subs	r4, r0, #0
 800a96a:	d105      	bne.n	800a978 <_dtoa_r+0x9e0>
 800a96c:	0022      	movs	r2, r4
 800a96e:	4b2b      	ldr	r3, [pc, #172]	@ (800aa1c <_dtoa_r+0xa84>)
 800a970:	482b      	ldr	r0, [pc, #172]	@ (800aa20 <_dtoa_r+0xa88>)
 800a972:	492c      	ldr	r1, [pc, #176]	@ (800aa24 <_dtoa_r+0xa8c>)
 800a974:	f7ff fb25 	bl	8009fc2 <_dtoa_r+0x2a>
 800a978:	0039      	movs	r1, r7
 800a97a:	693a      	ldr	r2, [r7, #16]
 800a97c:	310c      	adds	r1, #12
 800a97e:	3202      	adds	r2, #2
 800a980:	0092      	lsls	r2, r2, #2
 800a982:	300c      	adds	r0, #12
 800a984:	f001 f85a 	bl	800ba3c <memcpy>
 800a988:	2201      	movs	r2, #1
 800a98a:	0021      	movs	r1, r4
 800a98c:	9803      	ldr	r0, [sp, #12]
 800a98e:	f000 fde5 	bl	800b55c <__lshift>
 800a992:	9b08      	ldr	r3, [sp, #32]
 800a994:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a996:	9306      	str	r3, [sp, #24]
 800a998:	3b01      	subs	r3, #1
 800a99a:	189b      	adds	r3, r3, r2
 800a99c:	2201      	movs	r2, #1
 800a99e:	9704      	str	r7, [sp, #16]
 800a9a0:	0007      	movs	r7, r0
 800a9a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a9a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9a6:	4013      	ands	r3, r2
 800a9a8:	930e      	str	r3, [sp, #56]	@ 0x38
 800a9aa:	0031      	movs	r1, r6
 800a9ac:	9805      	ldr	r0, [sp, #20]
 800a9ae:	f7ff fa65 	bl	8009e7c <quorem>
 800a9b2:	9904      	ldr	r1, [sp, #16]
 800a9b4:	0005      	movs	r5, r0
 800a9b6:	900a      	str	r0, [sp, #40]	@ 0x28
 800a9b8:	9805      	ldr	r0, [sp, #20]
 800a9ba:	f000 fe3b 	bl	800b634 <__mcmp>
 800a9be:	003a      	movs	r2, r7
 800a9c0:	900d      	str	r0, [sp, #52]	@ 0x34
 800a9c2:	0031      	movs	r1, r6
 800a9c4:	9803      	ldr	r0, [sp, #12]
 800a9c6:	f000 fe51 	bl	800b66c <__mdiff>
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	68c3      	ldr	r3, [r0, #12]
 800a9ce:	0004      	movs	r4, r0
 800a9d0:	3530      	adds	r5, #48	@ 0x30
 800a9d2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d104      	bne.n	800a9e2 <_dtoa_r+0xa4a>
 800a9d8:	0001      	movs	r1, r0
 800a9da:	9805      	ldr	r0, [sp, #20]
 800a9dc:	f000 fe2a 	bl	800b634 <__mcmp>
 800a9e0:	9009      	str	r0, [sp, #36]	@ 0x24
 800a9e2:	0021      	movs	r1, r4
 800a9e4:	9803      	ldr	r0, [sp, #12]
 800a9e6:	f000 fbdb 	bl	800b1a0 <_Bfree>
 800a9ea:	9b06      	ldr	r3, [sp, #24]
 800a9ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9ee:	1c5c      	adds	r4, r3, #1
 800a9f0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	d116      	bne.n	800aa28 <_dtoa_r+0xa90>
 800a9fa:	2d39      	cmp	r5, #57	@ 0x39
 800a9fc:	d02f      	beq.n	800aa5e <_dtoa_r+0xac6>
 800a9fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	dd01      	ble.n	800aa08 <_dtoa_r+0xa70>
 800aa04:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800aa06:	3531      	adds	r5, #49	@ 0x31
 800aa08:	9b06      	ldr	r3, [sp, #24]
 800aa0a:	701d      	strb	r5, [r3, #0]
 800aa0c:	e638      	b.n	800a680 <_dtoa_r+0x6e8>
 800aa0e:	46c0      	nop			@ (mov r8, r8)
 800aa10:	40240000 	.word	0x40240000
 800aa14:	00000433 	.word	0x00000433
 800aa18:	7ff00000 	.word	0x7ff00000
 800aa1c:	0800c488 	.word	0x0800c488
 800aa20:	0800c430 	.word	0x0800c430
 800aa24:	000002ef 	.word	0x000002ef
 800aa28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	db04      	blt.n	800aa38 <_dtoa_r+0xaa0>
 800aa2e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800aa30:	4313      	orrs	r3, r2
 800aa32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa34:	4313      	orrs	r3, r2
 800aa36:	d11e      	bne.n	800aa76 <_dtoa_r+0xade>
 800aa38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	dde4      	ble.n	800aa08 <_dtoa_r+0xa70>
 800aa3e:	9905      	ldr	r1, [sp, #20]
 800aa40:	2201      	movs	r2, #1
 800aa42:	9803      	ldr	r0, [sp, #12]
 800aa44:	f000 fd8a 	bl	800b55c <__lshift>
 800aa48:	0031      	movs	r1, r6
 800aa4a:	9005      	str	r0, [sp, #20]
 800aa4c:	f000 fdf2 	bl	800b634 <__mcmp>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	dc02      	bgt.n	800aa5a <_dtoa_r+0xac2>
 800aa54:	d1d8      	bne.n	800aa08 <_dtoa_r+0xa70>
 800aa56:	07eb      	lsls	r3, r5, #31
 800aa58:	d5d6      	bpl.n	800aa08 <_dtoa_r+0xa70>
 800aa5a:	2d39      	cmp	r5, #57	@ 0x39
 800aa5c:	d1d2      	bne.n	800aa04 <_dtoa_r+0xa6c>
 800aa5e:	2339      	movs	r3, #57	@ 0x39
 800aa60:	9a06      	ldr	r2, [sp, #24]
 800aa62:	7013      	strb	r3, [r2, #0]
 800aa64:	0023      	movs	r3, r4
 800aa66:	001c      	movs	r4, r3
 800aa68:	3b01      	subs	r3, #1
 800aa6a:	781a      	ldrb	r2, [r3, #0]
 800aa6c:	2a39      	cmp	r2, #57	@ 0x39
 800aa6e:	d04f      	beq.n	800ab10 <_dtoa_r+0xb78>
 800aa70:	3201      	adds	r2, #1
 800aa72:	701a      	strb	r2, [r3, #0]
 800aa74:	e604      	b.n	800a680 <_dtoa_r+0x6e8>
 800aa76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	dd03      	ble.n	800aa84 <_dtoa_r+0xaec>
 800aa7c:	2d39      	cmp	r5, #57	@ 0x39
 800aa7e:	d0ee      	beq.n	800aa5e <_dtoa_r+0xac6>
 800aa80:	3501      	adds	r5, #1
 800aa82:	e7c1      	b.n	800aa08 <_dtoa_r+0xa70>
 800aa84:	9b06      	ldr	r3, [sp, #24]
 800aa86:	9a06      	ldr	r2, [sp, #24]
 800aa88:	701d      	strb	r5, [r3, #0]
 800aa8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d02a      	beq.n	800aae6 <_dtoa_r+0xb4e>
 800aa90:	2300      	movs	r3, #0
 800aa92:	220a      	movs	r2, #10
 800aa94:	9905      	ldr	r1, [sp, #20]
 800aa96:	9803      	ldr	r0, [sp, #12]
 800aa98:	f000 fba6 	bl	800b1e8 <__multadd>
 800aa9c:	9b04      	ldr	r3, [sp, #16]
 800aa9e:	9005      	str	r0, [sp, #20]
 800aaa0:	42bb      	cmp	r3, r7
 800aaa2:	d109      	bne.n	800aab8 <_dtoa_r+0xb20>
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	220a      	movs	r2, #10
 800aaa8:	9904      	ldr	r1, [sp, #16]
 800aaaa:	9803      	ldr	r0, [sp, #12]
 800aaac:	f000 fb9c 	bl	800b1e8 <__multadd>
 800aab0:	9004      	str	r0, [sp, #16]
 800aab2:	0007      	movs	r7, r0
 800aab4:	9406      	str	r4, [sp, #24]
 800aab6:	e778      	b.n	800a9aa <_dtoa_r+0xa12>
 800aab8:	9904      	ldr	r1, [sp, #16]
 800aaba:	2300      	movs	r3, #0
 800aabc:	220a      	movs	r2, #10
 800aabe:	9803      	ldr	r0, [sp, #12]
 800aac0:	f000 fb92 	bl	800b1e8 <__multadd>
 800aac4:	2300      	movs	r3, #0
 800aac6:	9004      	str	r0, [sp, #16]
 800aac8:	220a      	movs	r2, #10
 800aaca:	0039      	movs	r1, r7
 800aacc:	9803      	ldr	r0, [sp, #12]
 800aace:	f000 fb8b 	bl	800b1e8 <__multadd>
 800aad2:	e7ee      	b.n	800aab2 <_dtoa_r+0xb1a>
 800aad4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aad6:	2401      	movs	r4, #1
 800aad8:	2b00      	cmp	r3, #0
 800aada:	dd00      	ble.n	800aade <_dtoa_r+0xb46>
 800aadc:	001c      	movs	r4, r3
 800aade:	9b08      	ldr	r3, [sp, #32]
 800aae0:	191c      	adds	r4, r3, r4
 800aae2:	2300      	movs	r3, #0
 800aae4:	9304      	str	r3, [sp, #16]
 800aae6:	9905      	ldr	r1, [sp, #20]
 800aae8:	2201      	movs	r2, #1
 800aaea:	9803      	ldr	r0, [sp, #12]
 800aaec:	f000 fd36 	bl	800b55c <__lshift>
 800aaf0:	0031      	movs	r1, r6
 800aaf2:	9005      	str	r0, [sp, #20]
 800aaf4:	f000 fd9e 	bl	800b634 <__mcmp>
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	dcb3      	bgt.n	800aa64 <_dtoa_r+0xacc>
 800aafc:	d101      	bne.n	800ab02 <_dtoa_r+0xb6a>
 800aafe:	07ed      	lsls	r5, r5, #31
 800ab00:	d4b0      	bmi.n	800aa64 <_dtoa_r+0xacc>
 800ab02:	0023      	movs	r3, r4
 800ab04:	001c      	movs	r4, r3
 800ab06:	3b01      	subs	r3, #1
 800ab08:	781a      	ldrb	r2, [r3, #0]
 800ab0a:	2a30      	cmp	r2, #48	@ 0x30
 800ab0c:	d0fa      	beq.n	800ab04 <_dtoa_r+0xb6c>
 800ab0e:	e5b7      	b.n	800a680 <_dtoa_r+0x6e8>
 800ab10:	9a08      	ldr	r2, [sp, #32]
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d1a7      	bne.n	800aa66 <_dtoa_r+0xace>
 800ab16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab18:	3301      	adds	r3, #1
 800ab1a:	930c      	str	r3, [sp, #48]	@ 0x30
 800ab1c:	2331      	movs	r3, #49	@ 0x31
 800ab1e:	7013      	strb	r3, [r2, #0]
 800ab20:	e5ae      	b.n	800a680 <_dtoa_r+0x6e8>
 800ab22:	4b15      	ldr	r3, [pc, #84]	@ (800ab78 <_dtoa_r+0xbe0>)
 800ab24:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800ab26:	9308      	str	r3, [sp, #32]
 800ab28:	4b14      	ldr	r3, [pc, #80]	@ (800ab7c <_dtoa_r+0xbe4>)
 800ab2a:	2a00      	cmp	r2, #0
 800ab2c:	d001      	beq.n	800ab32 <_dtoa_r+0xb9a>
 800ab2e:	f7ff fa7b 	bl	800a028 <_dtoa_r+0x90>
 800ab32:	f7ff fa7b 	bl	800a02c <_dtoa_r+0x94>
 800ab36:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	dc00      	bgt.n	800ab3e <_dtoa_r+0xba6>
 800ab3c:	e648      	b.n	800a7d0 <_dtoa_r+0x838>
 800ab3e:	2001      	movs	r0, #1
 800ab40:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800ab42:	e665      	b.n	800a810 <_dtoa_r+0x878>
 800ab44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	dc00      	bgt.n	800ab4c <_dtoa_r+0xbb4>
 800ab4a:	e6d6      	b.n	800a8fa <_dtoa_r+0x962>
 800ab4c:	2400      	movs	r4, #0
 800ab4e:	0031      	movs	r1, r6
 800ab50:	9805      	ldr	r0, [sp, #20]
 800ab52:	f7ff f993 	bl	8009e7c <quorem>
 800ab56:	9b08      	ldr	r3, [sp, #32]
 800ab58:	3030      	adds	r0, #48	@ 0x30
 800ab5a:	5518      	strb	r0, [r3, r4]
 800ab5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab5e:	3401      	adds	r4, #1
 800ab60:	0005      	movs	r5, r0
 800ab62:	429c      	cmp	r4, r3
 800ab64:	dab6      	bge.n	800aad4 <_dtoa_r+0xb3c>
 800ab66:	2300      	movs	r3, #0
 800ab68:	220a      	movs	r2, #10
 800ab6a:	9905      	ldr	r1, [sp, #20]
 800ab6c:	9803      	ldr	r0, [sp, #12]
 800ab6e:	f000 fb3b 	bl	800b1e8 <__multadd>
 800ab72:	9005      	str	r0, [sp, #20]
 800ab74:	e7eb      	b.n	800ab4e <_dtoa_r+0xbb6>
 800ab76:	46c0      	nop			@ (mov r8, r8)
 800ab78:	0800c40c 	.word	0x0800c40c
 800ab7c:	0800c414 	.word	0x0800c414

0800ab80 <__ssputs_r>:
 800ab80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab82:	688e      	ldr	r6, [r1, #8]
 800ab84:	b085      	sub	sp, #20
 800ab86:	001f      	movs	r7, r3
 800ab88:	000c      	movs	r4, r1
 800ab8a:	680b      	ldr	r3, [r1, #0]
 800ab8c:	9002      	str	r0, [sp, #8]
 800ab8e:	9203      	str	r2, [sp, #12]
 800ab90:	42be      	cmp	r6, r7
 800ab92:	d830      	bhi.n	800abf6 <__ssputs_r+0x76>
 800ab94:	210c      	movs	r1, #12
 800ab96:	5e62      	ldrsh	r2, [r4, r1]
 800ab98:	2190      	movs	r1, #144	@ 0x90
 800ab9a:	00c9      	lsls	r1, r1, #3
 800ab9c:	420a      	tst	r2, r1
 800ab9e:	d028      	beq.n	800abf2 <__ssputs_r+0x72>
 800aba0:	2003      	movs	r0, #3
 800aba2:	6921      	ldr	r1, [r4, #16]
 800aba4:	1a5b      	subs	r3, r3, r1
 800aba6:	9301      	str	r3, [sp, #4]
 800aba8:	6963      	ldr	r3, [r4, #20]
 800abaa:	4343      	muls	r3, r0
 800abac:	9801      	ldr	r0, [sp, #4]
 800abae:	0fdd      	lsrs	r5, r3, #31
 800abb0:	18ed      	adds	r5, r5, r3
 800abb2:	1c7b      	adds	r3, r7, #1
 800abb4:	181b      	adds	r3, r3, r0
 800abb6:	106d      	asrs	r5, r5, #1
 800abb8:	42ab      	cmp	r3, r5
 800abba:	d900      	bls.n	800abbe <__ssputs_r+0x3e>
 800abbc:	001d      	movs	r5, r3
 800abbe:	0552      	lsls	r2, r2, #21
 800abc0:	d528      	bpl.n	800ac14 <__ssputs_r+0x94>
 800abc2:	0029      	movs	r1, r5
 800abc4:	9802      	ldr	r0, [sp, #8]
 800abc6:	f000 f965 	bl	800ae94 <_malloc_r>
 800abca:	1e06      	subs	r6, r0, #0
 800abcc:	d02c      	beq.n	800ac28 <__ssputs_r+0xa8>
 800abce:	9a01      	ldr	r2, [sp, #4]
 800abd0:	6921      	ldr	r1, [r4, #16]
 800abd2:	f000 ff33 	bl	800ba3c <memcpy>
 800abd6:	89a2      	ldrh	r2, [r4, #12]
 800abd8:	4b18      	ldr	r3, [pc, #96]	@ (800ac3c <__ssputs_r+0xbc>)
 800abda:	401a      	ands	r2, r3
 800abdc:	2380      	movs	r3, #128	@ 0x80
 800abde:	4313      	orrs	r3, r2
 800abe0:	81a3      	strh	r3, [r4, #12]
 800abe2:	9b01      	ldr	r3, [sp, #4]
 800abe4:	6126      	str	r6, [r4, #16]
 800abe6:	18f6      	adds	r6, r6, r3
 800abe8:	6026      	str	r6, [r4, #0]
 800abea:	003e      	movs	r6, r7
 800abec:	6165      	str	r5, [r4, #20]
 800abee:	1aed      	subs	r5, r5, r3
 800abf0:	60a5      	str	r5, [r4, #8]
 800abf2:	42be      	cmp	r6, r7
 800abf4:	d900      	bls.n	800abf8 <__ssputs_r+0x78>
 800abf6:	003e      	movs	r6, r7
 800abf8:	0032      	movs	r2, r6
 800abfa:	9903      	ldr	r1, [sp, #12]
 800abfc:	6820      	ldr	r0, [r4, #0]
 800abfe:	f000 feaa 	bl	800b956 <memmove>
 800ac02:	2000      	movs	r0, #0
 800ac04:	68a3      	ldr	r3, [r4, #8]
 800ac06:	1b9b      	subs	r3, r3, r6
 800ac08:	60a3      	str	r3, [r4, #8]
 800ac0a:	6823      	ldr	r3, [r4, #0]
 800ac0c:	199b      	adds	r3, r3, r6
 800ac0e:	6023      	str	r3, [r4, #0]
 800ac10:	b005      	add	sp, #20
 800ac12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac14:	002a      	movs	r2, r5
 800ac16:	9802      	ldr	r0, [sp, #8]
 800ac18:	f000 fe6e 	bl	800b8f8 <_realloc_r>
 800ac1c:	1e06      	subs	r6, r0, #0
 800ac1e:	d1e0      	bne.n	800abe2 <__ssputs_r+0x62>
 800ac20:	6921      	ldr	r1, [r4, #16]
 800ac22:	9802      	ldr	r0, [sp, #8]
 800ac24:	f000 ff60 	bl	800bae8 <_free_r>
 800ac28:	230c      	movs	r3, #12
 800ac2a:	2001      	movs	r0, #1
 800ac2c:	9a02      	ldr	r2, [sp, #8]
 800ac2e:	4240      	negs	r0, r0
 800ac30:	6013      	str	r3, [r2, #0]
 800ac32:	89a2      	ldrh	r2, [r4, #12]
 800ac34:	3334      	adds	r3, #52	@ 0x34
 800ac36:	4313      	orrs	r3, r2
 800ac38:	81a3      	strh	r3, [r4, #12]
 800ac3a:	e7e9      	b.n	800ac10 <__ssputs_r+0x90>
 800ac3c:	fffffb7f 	.word	0xfffffb7f

0800ac40 <_svfiprintf_r>:
 800ac40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac42:	b0a1      	sub	sp, #132	@ 0x84
 800ac44:	9003      	str	r0, [sp, #12]
 800ac46:	001d      	movs	r5, r3
 800ac48:	898b      	ldrh	r3, [r1, #12]
 800ac4a:	000f      	movs	r7, r1
 800ac4c:	0016      	movs	r6, r2
 800ac4e:	061b      	lsls	r3, r3, #24
 800ac50:	d511      	bpl.n	800ac76 <_svfiprintf_r+0x36>
 800ac52:	690b      	ldr	r3, [r1, #16]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d10e      	bne.n	800ac76 <_svfiprintf_r+0x36>
 800ac58:	2140      	movs	r1, #64	@ 0x40
 800ac5a:	f000 f91b 	bl	800ae94 <_malloc_r>
 800ac5e:	6038      	str	r0, [r7, #0]
 800ac60:	6138      	str	r0, [r7, #16]
 800ac62:	2800      	cmp	r0, #0
 800ac64:	d105      	bne.n	800ac72 <_svfiprintf_r+0x32>
 800ac66:	230c      	movs	r3, #12
 800ac68:	9a03      	ldr	r2, [sp, #12]
 800ac6a:	6013      	str	r3, [r2, #0]
 800ac6c:	2001      	movs	r0, #1
 800ac6e:	4240      	negs	r0, r0
 800ac70:	e0cf      	b.n	800ae12 <_svfiprintf_r+0x1d2>
 800ac72:	2340      	movs	r3, #64	@ 0x40
 800ac74:	617b      	str	r3, [r7, #20]
 800ac76:	2300      	movs	r3, #0
 800ac78:	ac08      	add	r4, sp, #32
 800ac7a:	6163      	str	r3, [r4, #20]
 800ac7c:	3320      	adds	r3, #32
 800ac7e:	7663      	strb	r3, [r4, #25]
 800ac80:	3310      	adds	r3, #16
 800ac82:	76a3      	strb	r3, [r4, #26]
 800ac84:	9507      	str	r5, [sp, #28]
 800ac86:	0035      	movs	r5, r6
 800ac88:	782b      	ldrb	r3, [r5, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d001      	beq.n	800ac92 <_svfiprintf_r+0x52>
 800ac8e:	2b25      	cmp	r3, #37	@ 0x25
 800ac90:	d148      	bne.n	800ad24 <_svfiprintf_r+0xe4>
 800ac92:	1bab      	subs	r3, r5, r6
 800ac94:	9305      	str	r3, [sp, #20]
 800ac96:	42b5      	cmp	r5, r6
 800ac98:	d00b      	beq.n	800acb2 <_svfiprintf_r+0x72>
 800ac9a:	0032      	movs	r2, r6
 800ac9c:	0039      	movs	r1, r7
 800ac9e:	9803      	ldr	r0, [sp, #12]
 800aca0:	f7ff ff6e 	bl	800ab80 <__ssputs_r>
 800aca4:	3001      	adds	r0, #1
 800aca6:	d100      	bne.n	800acaa <_svfiprintf_r+0x6a>
 800aca8:	e0ae      	b.n	800ae08 <_svfiprintf_r+0x1c8>
 800acaa:	6963      	ldr	r3, [r4, #20]
 800acac:	9a05      	ldr	r2, [sp, #20]
 800acae:	189b      	adds	r3, r3, r2
 800acb0:	6163      	str	r3, [r4, #20]
 800acb2:	782b      	ldrb	r3, [r5, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d100      	bne.n	800acba <_svfiprintf_r+0x7a>
 800acb8:	e0a6      	b.n	800ae08 <_svfiprintf_r+0x1c8>
 800acba:	2201      	movs	r2, #1
 800acbc:	2300      	movs	r3, #0
 800acbe:	4252      	negs	r2, r2
 800acc0:	6062      	str	r2, [r4, #4]
 800acc2:	a904      	add	r1, sp, #16
 800acc4:	3254      	adds	r2, #84	@ 0x54
 800acc6:	1852      	adds	r2, r2, r1
 800acc8:	1c6e      	adds	r6, r5, #1
 800acca:	6023      	str	r3, [r4, #0]
 800accc:	60e3      	str	r3, [r4, #12]
 800acce:	60a3      	str	r3, [r4, #8]
 800acd0:	7013      	strb	r3, [r2, #0]
 800acd2:	65a3      	str	r3, [r4, #88]	@ 0x58
 800acd4:	4b54      	ldr	r3, [pc, #336]	@ (800ae28 <_svfiprintf_r+0x1e8>)
 800acd6:	2205      	movs	r2, #5
 800acd8:	0018      	movs	r0, r3
 800acda:	7831      	ldrb	r1, [r6, #0]
 800acdc:	9305      	str	r3, [sp, #20]
 800acde:	f7ff f8c2 	bl	8009e66 <memchr>
 800ace2:	1c75      	adds	r5, r6, #1
 800ace4:	2800      	cmp	r0, #0
 800ace6:	d11f      	bne.n	800ad28 <_svfiprintf_r+0xe8>
 800ace8:	6822      	ldr	r2, [r4, #0]
 800acea:	06d3      	lsls	r3, r2, #27
 800acec:	d504      	bpl.n	800acf8 <_svfiprintf_r+0xb8>
 800acee:	2353      	movs	r3, #83	@ 0x53
 800acf0:	a904      	add	r1, sp, #16
 800acf2:	185b      	adds	r3, r3, r1
 800acf4:	2120      	movs	r1, #32
 800acf6:	7019      	strb	r1, [r3, #0]
 800acf8:	0713      	lsls	r3, r2, #28
 800acfa:	d504      	bpl.n	800ad06 <_svfiprintf_r+0xc6>
 800acfc:	2353      	movs	r3, #83	@ 0x53
 800acfe:	a904      	add	r1, sp, #16
 800ad00:	185b      	adds	r3, r3, r1
 800ad02:	212b      	movs	r1, #43	@ 0x2b
 800ad04:	7019      	strb	r1, [r3, #0]
 800ad06:	7833      	ldrb	r3, [r6, #0]
 800ad08:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad0a:	d016      	beq.n	800ad3a <_svfiprintf_r+0xfa>
 800ad0c:	0035      	movs	r5, r6
 800ad0e:	2100      	movs	r1, #0
 800ad10:	200a      	movs	r0, #10
 800ad12:	68e3      	ldr	r3, [r4, #12]
 800ad14:	782a      	ldrb	r2, [r5, #0]
 800ad16:	1c6e      	adds	r6, r5, #1
 800ad18:	3a30      	subs	r2, #48	@ 0x30
 800ad1a:	2a09      	cmp	r2, #9
 800ad1c:	d950      	bls.n	800adc0 <_svfiprintf_r+0x180>
 800ad1e:	2900      	cmp	r1, #0
 800ad20:	d111      	bne.n	800ad46 <_svfiprintf_r+0x106>
 800ad22:	e017      	b.n	800ad54 <_svfiprintf_r+0x114>
 800ad24:	3501      	adds	r5, #1
 800ad26:	e7af      	b.n	800ac88 <_svfiprintf_r+0x48>
 800ad28:	9b05      	ldr	r3, [sp, #20]
 800ad2a:	6822      	ldr	r2, [r4, #0]
 800ad2c:	1ac0      	subs	r0, r0, r3
 800ad2e:	2301      	movs	r3, #1
 800ad30:	4083      	lsls	r3, r0
 800ad32:	4313      	orrs	r3, r2
 800ad34:	002e      	movs	r6, r5
 800ad36:	6023      	str	r3, [r4, #0]
 800ad38:	e7cc      	b.n	800acd4 <_svfiprintf_r+0x94>
 800ad3a:	9b07      	ldr	r3, [sp, #28]
 800ad3c:	1d19      	adds	r1, r3, #4
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	9107      	str	r1, [sp, #28]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	db01      	blt.n	800ad4a <_svfiprintf_r+0x10a>
 800ad46:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad48:	e004      	b.n	800ad54 <_svfiprintf_r+0x114>
 800ad4a:	425b      	negs	r3, r3
 800ad4c:	60e3      	str	r3, [r4, #12]
 800ad4e:	2302      	movs	r3, #2
 800ad50:	4313      	orrs	r3, r2
 800ad52:	6023      	str	r3, [r4, #0]
 800ad54:	782b      	ldrb	r3, [r5, #0]
 800ad56:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad58:	d10c      	bne.n	800ad74 <_svfiprintf_r+0x134>
 800ad5a:	786b      	ldrb	r3, [r5, #1]
 800ad5c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad5e:	d134      	bne.n	800adca <_svfiprintf_r+0x18a>
 800ad60:	9b07      	ldr	r3, [sp, #28]
 800ad62:	3502      	adds	r5, #2
 800ad64:	1d1a      	adds	r2, r3, #4
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	9207      	str	r2, [sp, #28]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	da01      	bge.n	800ad72 <_svfiprintf_r+0x132>
 800ad6e:	2301      	movs	r3, #1
 800ad70:	425b      	negs	r3, r3
 800ad72:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad74:	4e2d      	ldr	r6, [pc, #180]	@ (800ae2c <_svfiprintf_r+0x1ec>)
 800ad76:	2203      	movs	r2, #3
 800ad78:	0030      	movs	r0, r6
 800ad7a:	7829      	ldrb	r1, [r5, #0]
 800ad7c:	f7ff f873 	bl	8009e66 <memchr>
 800ad80:	2800      	cmp	r0, #0
 800ad82:	d006      	beq.n	800ad92 <_svfiprintf_r+0x152>
 800ad84:	2340      	movs	r3, #64	@ 0x40
 800ad86:	1b80      	subs	r0, r0, r6
 800ad88:	4083      	lsls	r3, r0
 800ad8a:	6822      	ldr	r2, [r4, #0]
 800ad8c:	3501      	adds	r5, #1
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	6023      	str	r3, [r4, #0]
 800ad92:	7829      	ldrb	r1, [r5, #0]
 800ad94:	2206      	movs	r2, #6
 800ad96:	4826      	ldr	r0, [pc, #152]	@ (800ae30 <_svfiprintf_r+0x1f0>)
 800ad98:	1c6e      	adds	r6, r5, #1
 800ad9a:	7621      	strb	r1, [r4, #24]
 800ad9c:	f7ff f863 	bl	8009e66 <memchr>
 800ada0:	2800      	cmp	r0, #0
 800ada2:	d038      	beq.n	800ae16 <_svfiprintf_r+0x1d6>
 800ada4:	4b23      	ldr	r3, [pc, #140]	@ (800ae34 <_svfiprintf_r+0x1f4>)
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d122      	bne.n	800adf0 <_svfiprintf_r+0x1b0>
 800adaa:	2207      	movs	r2, #7
 800adac:	9b07      	ldr	r3, [sp, #28]
 800adae:	3307      	adds	r3, #7
 800adb0:	4393      	bics	r3, r2
 800adb2:	3308      	adds	r3, #8
 800adb4:	9307      	str	r3, [sp, #28]
 800adb6:	6963      	ldr	r3, [r4, #20]
 800adb8:	9a04      	ldr	r2, [sp, #16]
 800adba:	189b      	adds	r3, r3, r2
 800adbc:	6163      	str	r3, [r4, #20]
 800adbe:	e762      	b.n	800ac86 <_svfiprintf_r+0x46>
 800adc0:	4343      	muls	r3, r0
 800adc2:	0035      	movs	r5, r6
 800adc4:	2101      	movs	r1, #1
 800adc6:	189b      	adds	r3, r3, r2
 800adc8:	e7a4      	b.n	800ad14 <_svfiprintf_r+0xd4>
 800adca:	2300      	movs	r3, #0
 800adcc:	200a      	movs	r0, #10
 800adce:	0019      	movs	r1, r3
 800add0:	3501      	adds	r5, #1
 800add2:	6063      	str	r3, [r4, #4]
 800add4:	782a      	ldrb	r2, [r5, #0]
 800add6:	1c6e      	adds	r6, r5, #1
 800add8:	3a30      	subs	r2, #48	@ 0x30
 800adda:	2a09      	cmp	r2, #9
 800addc:	d903      	bls.n	800ade6 <_svfiprintf_r+0x1a6>
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d0c8      	beq.n	800ad74 <_svfiprintf_r+0x134>
 800ade2:	9109      	str	r1, [sp, #36]	@ 0x24
 800ade4:	e7c6      	b.n	800ad74 <_svfiprintf_r+0x134>
 800ade6:	4341      	muls	r1, r0
 800ade8:	0035      	movs	r5, r6
 800adea:	2301      	movs	r3, #1
 800adec:	1889      	adds	r1, r1, r2
 800adee:	e7f1      	b.n	800add4 <_svfiprintf_r+0x194>
 800adf0:	aa07      	add	r2, sp, #28
 800adf2:	9200      	str	r2, [sp, #0]
 800adf4:	0021      	movs	r1, r4
 800adf6:	003a      	movs	r2, r7
 800adf8:	4b0f      	ldr	r3, [pc, #60]	@ (800ae38 <_svfiprintf_r+0x1f8>)
 800adfa:	9803      	ldr	r0, [sp, #12]
 800adfc:	f7fe fb5a 	bl	80094b4 <_printf_float>
 800ae00:	9004      	str	r0, [sp, #16]
 800ae02:	9b04      	ldr	r3, [sp, #16]
 800ae04:	3301      	adds	r3, #1
 800ae06:	d1d6      	bne.n	800adb6 <_svfiprintf_r+0x176>
 800ae08:	89bb      	ldrh	r3, [r7, #12]
 800ae0a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800ae0c:	065b      	lsls	r3, r3, #25
 800ae0e:	d500      	bpl.n	800ae12 <_svfiprintf_r+0x1d2>
 800ae10:	e72c      	b.n	800ac6c <_svfiprintf_r+0x2c>
 800ae12:	b021      	add	sp, #132	@ 0x84
 800ae14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae16:	aa07      	add	r2, sp, #28
 800ae18:	9200      	str	r2, [sp, #0]
 800ae1a:	0021      	movs	r1, r4
 800ae1c:	003a      	movs	r2, r7
 800ae1e:	4b06      	ldr	r3, [pc, #24]	@ (800ae38 <_svfiprintf_r+0x1f8>)
 800ae20:	9803      	ldr	r0, [sp, #12]
 800ae22:	f7fe fdf5 	bl	8009a10 <_printf_i>
 800ae26:	e7eb      	b.n	800ae00 <_svfiprintf_r+0x1c0>
 800ae28:	0800c499 	.word	0x0800c499
 800ae2c:	0800c49f 	.word	0x0800c49f
 800ae30:	0800c4a3 	.word	0x0800c4a3
 800ae34:	080094b5 	.word	0x080094b5
 800ae38:	0800ab81 	.word	0x0800ab81

0800ae3c <malloc>:
 800ae3c:	b510      	push	{r4, lr}
 800ae3e:	4b03      	ldr	r3, [pc, #12]	@ (800ae4c <malloc+0x10>)
 800ae40:	0001      	movs	r1, r0
 800ae42:	6818      	ldr	r0, [r3, #0]
 800ae44:	f000 f826 	bl	800ae94 <_malloc_r>
 800ae48:	bd10      	pop	{r4, pc}
 800ae4a:	46c0      	nop			@ (mov r8, r8)
 800ae4c:	20000018 	.word	0x20000018

0800ae50 <sbrk_aligned>:
 800ae50:	b570      	push	{r4, r5, r6, lr}
 800ae52:	4e0f      	ldr	r6, [pc, #60]	@ (800ae90 <sbrk_aligned+0x40>)
 800ae54:	000d      	movs	r5, r1
 800ae56:	6831      	ldr	r1, [r6, #0]
 800ae58:	0004      	movs	r4, r0
 800ae5a:	2900      	cmp	r1, #0
 800ae5c:	d102      	bne.n	800ae64 <sbrk_aligned+0x14>
 800ae5e:	f000 fdc7 	bl	800b9f0 <_sbrk_r>
 800ae62:	6030      	str	r0, [r6, #0]
 800ae64:	0029      	movs	r1, r5
 800ae66:	0020      	movs	r0, r4
 800ae68:	f000 fdc2 	bl	800b9f0 <_sbrk_r>
 800ae6c:	1c43      	adds	r3, r0, #1
 800ae6e:	d103      	bne.n	800ae78 <sbrk_aligned+0x28>
 800ae70:	2501      	movs	r5, #1
 800ae72:	426d      	negs	r5, r5
 800ae74:	0028      	movs	r0, r5
 800ae76:	bd70      	pop	{r4, r5, r6, pc}
 800ae78:	2303      	movs	r3, #3
 800ae7a:	1cc5      	adds	r5, r0, #3
 800ae7c:	439d      	bics	r5, r3
 800ae7e:	42a8      	cmp	r0, r5
 800ae80:	d0f8      	beq.n	800ae74 <sbrk_aligned+0x24>
 800ae82:	1a29      	subs	r1, r5, r0
 800ae84:	0020      	movs	r0, r4
 800ae86:	f000 fdb3 	bl	800b9f0 <_sbrk_r>
 800ae8a:	3001      	adds	r0, #1
 800ae8c:	d1f2      	bne.n	800ae74 <sbrk_aligned+0x24>
 800ae8e:	e7ef      	b.n	800ae70 <sbrk_aligned+0x20>
 800ae90:	2000067c 	.word	0x2000067c

0800ae94 <_malloc_r>:
 800ae94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae96:	2203      	movs	r2, #3
 800ae98:	1ccb      	adds	r3, r1, #3
 800ae9a:	4393      	bics	r3, r2
 800ae9c:	3308      	adds	r3, #8
 800ae9e:	0005      	movs	r5, r0
 800aea0:	001f      	movs	r7, r3
 800aea2:	2b0c      	cmp	r3, #12
 800aea4:	d234      	bcs.n	800af10 <_malloc_r+0x7c>
 800aea6:	270c      	movs	r7, #12
 800aea8:	42b9      	cmp	r1, r7
 800aeaa:	d833      	bhi.n	800af14 <_malloc_r+0x80>
 800aeac:	0028      	movs	r0, r5
 800aeae:	f000 f923 	bl	800b0f8 <__malloc_lock>
 800aeb2:	4e37      	ldr	r6, [pc, #220]	@ (800af90 <_malloc_r+0xfc>)
 800aeb4:	6833      	ldr	r3, [r6, #0]
 800aeb6:	001c      	movs	r4, r3
 800aeb8:	2c00      	cmp	r4, #0
 800aeba:	d12f      	bne.n	800af1c <_malloc_r+0x88>
 800aebc:	0039      	movs	r1, r7
 800aebe:	0028      	movs	r0, r5
 800aec0:	f7ff ffc6 	bl	800ae50 <sbrk_aligned>
 800aec4:	0004      	movs	r4, r0
 800aec6:	1c43      	adds	r3, r0, #1
 800aec8:	d15f      	bne.n	800af8a <_malloc_r+0xf6>
 800aeca:	6834      	ldr	r4, [r6, #0]
 800aecc:	9400      	str	r4, [sp, #0]
 800aece:	9b00      	ldr	r3, [sp, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d14a      	bne.n	800af6a <_malloc_r+0xd6>
 800aed4:	2c00      	cmp	r4, #0
 800aed6:	d052      	beq.n	800af7e <_malloc_r+0xea>
 800aed8:	6823      	ldr	r3, [r4, #0]
 800aeda:	0028      	movs	r0, r5
 800aedc:	18e3      	adds	r3, r4, r3
 800aede:	9900      	ldr	r1, [sp, #0]
 800aee0:	9301      	str	r3, [sp, #4]
 800aee2:	f000 fd85 	bl	800b9f0 <_sbrk_r>
 800aee6:	9b01      	ldr	r3, [sp, #4]
 800aee8:	4283      	cmp	r3, r0
 800aeea:	d148      	bne.n	800af7e <_malloc_r+0xea>
 800aeec:	6823      	ldr	r3, [r4, #0]
 800aeee:	0028      	movs	r0, r5
 800aef0:	1aff      	subs	r7, r7, r3
 800aef2:	0039      	movs	r1, r7
 800aef4:	f7ff ffac 	bl	800ae50 <sbrk_aligned>
 800aef8:	3001      	adds	r0, #1
 800aefa:	d040      	beq.n	800af7e <_malloc_r+0xea>
 800aefc:	6823      	ldr	r3, [r4, #0]
 800aefe:	19db      	adds	r3, r3, r7
 800af00:	6023      	str	r3, [r4, #0]
 800af02:	6833      	ldr	r3, [r6, #0]
 800af04:	685a      	ldr	r2, [r3, #4]
 800af06:	2a00      	cmp	r2, #0
 800af08:	d133      	bne.n	800af72 <_malloc_r+0xde>
 800af0a:	9b00      	ldr	r3, [sp, #0]
 800af0c:	6033      	str	r3, [r6, #0]
 800af0e:	e019      	b.n	800af44 <_malloc_r+0xb0>
 800af10:	2b00      	cmp	r3, #0
 800af12:	dac9      	bge.n	800aea8 <_malloc_r+0x14>
 800af14:	230c      	movs	r3, #12
 800af16:	602b      	str	r3, [r5, #0]
 800af18:	2000      	movs	r0, #0
 800af1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800af1c:	6821      	ldr	r1, [r4, #0]
 800af1e:	1bc9      	subs	r1, r1, r7
 800af20:	d420      	bmi.n	800af64 <_malloc_r+0xd0>
 800af22:	290b      	cmp	r1, #11
 800af24:	d90a      	bls.n	800af3c <_malloc_r+0xa8>
 800af26:	19e2      	adds	r2, r4, r7
 800af28:	6027      	str	r7, [r4, #0]
 800af2a:	42a3      	cmp	r3, r4
 800af2c:	d104      	bne.n	800af38 <_malloc_r+0xa4>
 800af2e:	6032      	str	r2, [r6, #0]
 800af30:	6863      	ldr	r3, [r4, #4]
 800af32:	6011      	str	r1, [r2, #0]
 800af34:	6053      	str	r3, [r2, #4]
 800af36:	e005      	b.n	800af44 <_malloc_r+0xb0>
 800af38:	605a      	str	r2, [r3, #4]
 800af3a:	e7f9      	b.n	800af30 <_malloc_r+0x9c>
 800af3c:	6862      	ldr	r2, [r4, #4]
 800af3e:	42a3      	cmp	r3, r4
 800af40:	d10e      	bne.n	800af60 <_malloc_r+0xcc>
 800af42:	6032      	str	r2, [r6, #0]
 800af44:	0028      	movs	r0, r5
 800af46:	f000 f8df 	bl	800b108 <__malloc_unlock>
 800af4a:	0020      	movs	r0, r4
 800af4c:	2207      	movs	r2, #7
 800af4e:	300b      	adds	r0, #11
 800af50:	1d23      	adds	r3, r4, #4
 800af52:	4390      	bics	r0, r2
 800af54:	1ac2      	subs	r2, r0, r3
 800af56:	4298      	cmp	r0, r3
 800af58:	d0df      	beq.n	800af1a <_malloc_r+0x86>
 800af5a:	1a1b      	subs	r3, r3, r0
 800af5c:	50a3      	str	r3, [r4, r2]
 800af5e:	e7dc      	b.n	800af1a <_malloc_r+0x86>
 800af60:	605a      	str	r2, [r3, #4]
 800af62:	e7ef      	b.n	800af44 <_malloc_r+0xb0>
 800af64:	0023      	movs	r3, r4
 800af66:	6864      	ldr	r4, [r4, #4]
 800af68:	e7a6      	b.n	800aeb8 <_malloc_r+0x24>
 800af6a:	9c00      	ldr	r4, [sp, #0]
 800af6c:	6863      	ldr	r3, [r4, #4]
 800af6e:	9300      	str	r3, [sp, #0]
 800af70:	e7ad      	b.n	800aece <_malloc_r+0x3a>
 800af72:	001a      	movs	r2, r3
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	42a3      	cmp	r3, r4
 800af78:	d1fb      	bne.n	800af72 <_malloc_r+0xde>
 800af7a:	2300      	movs	r3, #0
 800af7c:	e7da      	b.n	800af34 <_malloc_r+0xa0>
 800af7e:	230c      	movs	r3, #12
 800af80:	0028      	movs	r0, r5
 800af82:	602b      	str	r3, [r5, #0]
 800af84:	f000 f8c0 	bl	800b108 <__malloc_unlock>
 800af88:	e7c6      	b.n	800af18 <_malloc_r+0x84>
 800af8a:	6007      	str	r7, [r0, #0]
 800af8c:	e7da      	b.n	800af44 <_malloc_r+0xb0>
 800af8e:	46c0      	nop			@ (mov r8, r8)
 800af90:	20000680 	.word	0x20000680

0800af94 <__sflush_r>:
 800af94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af96:	220c      	movs	r2, #12
 800af98:	5e8b      	ldrsh	r3, [r1, r2]
 800af9a:	0005      	movs	r5, r0
 800af9c:	000c      	movs	r4, r1
 800af9e:	071a      	lsls	r2, r3, #28
 800afa0:	d456      	bmi.n	800b050 <__sflush_r+0xbc>
 800afa2:	684a      	ldr	r2, [r1, #4]
 800afa4:	2a00      	cmp	r2, #0
 800afa6:	dc02      	bgt.n	800afae <__sflush_r+0x1a>
 800afa8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800afaa:	2a00      	cmp	r2, #0
 800afac:	dd4e      	ble.n	800b04c <__sflush_r+0xb8>
 800afae:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800afb0:	2f00      	cmp	r7, #0
 800afb2:	d04b      	beq.n	800b04c <__sflush_r+0xb8>
 800afb4:	2200      	movs	r2, #0
 800afb6:	2080      	movs	r0, #128	@ 0x80
 800afb8:	682e      	ldr	r6, [r5, #0]
 800afba:	602a      	str	r2, [r5, #0]
 800afbc:	001a      	movs	r2, r3
 800afbe:	0140      	lsls	r0, r0, #5
 800afc0:	6a21      	ldr	r1, [r4, #32]
 800afc2:	4002      	ands	r2, r0
 800afc4:	4203      	tst	r3, r0
 800afc6:	d033      	beq.n	800b030 <__sflush_r+0x9c>
 800afc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800afca:	89a3      	ldrh	r3, [r4, #12]
 800afcc:	075b      	lsls	r3, r3, #29
 800afce:	d506      	bpl.n	800afde <__sflush_r+0x4a>
 800afd0:	6863      	ldr	r3, [r4, #4]
 800afd2:	1ad2      	subs	r2, r2, r3
 800afd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d001      	beq.n	800afde <__sflush_r+0x4a>
 800afda:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800afdc:	1ad2      	subs	r2, r2, r3
 800afde:	2300      	movs	r3, #0
 800afe0:	0028      	movs	r0, r5
 800afe2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800afe4:	6a21      	ldr	r1, [r4, #32]
 800afe6:	47b8      	blx	r7
 800afe8:	89a2      	ldrh	r2, [r4, #12]
 800afea:	1c43      	adds	r3, r0, #1
 800afec:	d106      	bne.n	800affc <__sflush_r+0x68>
 800afee:	6829      	ldr	r1, [r5, #0]
 800aff0:	291d      	cmp	r1, #29
 800aff2:	d846      	bhi.n	800b082 <__sflush_r+0xee>
 800aff4:	4b29      	ldr	r3, [pc, #164]	@ (800b09c <__sflush_r+0x108>)
 800aff6:	410b      	asrs	r3, r1
 800aff8:	07db      	lsls	r3, r3, #31
 800affa:	d442      	bmi.n	800b082 <__sflush_r+0xee>
 800affc:	2300      	movs	r3, #0
 800affe:	6063      	str	r3, [r4, #4]
 800b000:	6923      	ldr	r3, [r4, #16]
 800b002:	6023      	str	r3, [r4, #0]
 800b004:	04d2      	lsls	r2, r2, #19
 800b006:	d505      	bpl.n	800b014 <__sflush_r+0x80>
 800b008:	1c43      	adds	r3, r0, #1
 800b00a:	d102      	bne.n	800b012 <__sflush_r+0x7e>
 800b00c:	682b      	ldr	r3, [r5, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d100      	bne.n	800b014 <__sflush_r+0x80>
 800b012:	6560      	str	r0, [r4, #84]	@ 0x54
 800b014:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b016:	602e      	str	r6, [r5, #0]
 800b018:	2900      	cmp	r1, #0
 800b01a:	d017      	beq.n	800b04c <__sflush_r+0xb8>
 800b01c:	0023      	movs	r3, r4
 800b01e:	3344      	adds	r3, #68	@ 0x44
 800b020:	4299      	cmp	r1, r3
 800b022:	d002      	beq.n	800b02a <__sflush_r+0x96>
 800b024:	0028      	movs	r0, r5
 800b026:	f000 fd5f 	bl	800bae8 <_free_r>
 800b02a:	2300      	movs	r3, #0
 800b02c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b02e:	e00d      	b.n	800b04c <__sflush_r+0xb8>
 800b030:	2301      	movs	r3, #1
 800b032:	0028      	movs	r0, r5
 800b034:	47b8      	blx	r7
 800b036:	0002      	movs	r2, r0
 800b038:	1c43      	adds	r3, r0, #1
 800b03a:	d1c6      	bne.n	800afca <__sflush_r+0x36>
 800b03c:	682b      	ldr	r3, [r5, #0]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d0c3      	beq.n	800afca <__sflush_r+0x36>
 800b042:	2b1d      	cmp	r3, #29
 800b044:	d001      	beq.n	800b04a <__sflush_r+0xb6>
 800b046:	2b16      	cmp	r3, #22
 800b048:	d11a      	bne.n	800b080 <__sflush_r+0xec>
 800b04a:	602e      	str	r6, [r5, #0]
 800b04c:	2000      	movs	r0, #0
 800b04e:	e01e      	b.n	800b08e <__sflush_r+0xfa>
 800b050:	690e      	ldr	r6, [r1, #16]
 800b052:	2e00      	cmp	r6, #0
 800b054:	d0fa      	beq.n	800b04c <__sflush_r+0xb8>
 800b056:	680f      	ldr	r7, [r1, #0]
 800b058:	600e      	str	r6, [r1, #0]
 800b05a:	1bba      	subs	r2, r7, r6
 800b05c:	9201      	str	r2, [sp, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	079b      	lsls	r3, r3, #30
 800b062:	d100      	bne.n	800b066 <__sflush_r+0xd2>
 800b064:	694a      	ldr	r2, [r1, #20]
 800b066:	60a2      	str	r2, [r4, #8]
 800b068:	9b01      	ldr	r3, [sp, #4]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	ddee      	ble.n	800b04c <__sflush_r+0xb8>
 800b06e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b070:	0032      	movs	r2, r6
 800b072:	001f      	movs	r7, r3
 800b074:	0028      	movs	r0, r5
 800b076:	9b01      	ldr	r3, [sp, #4]
 800b078:	6a21      	ldr	r1, [r4, #32]
 800b07a:	47b8      	blx	r7
 800b07c:	2800      	cmp	r0, #0
 800b07e:	dc07      	bgt.n	800b090 <__sflush_r+0xfc>
 800b080:	89a2      	ldrh	r2, [r4, #12]
 800b082:	2340      	movs	r3, #64	@ 0x40
 800b084:	2001      	movs	r0, #1
 800b086:	4313      	orrs	r3, r2
 800b088:	b21b      	sxth	r3, r3
 800b08a:	81a3      	strh	r3, [r4, #12]
 800b08c:	4240      	negs	r0, r0
 800b08e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b090:	9b01      	ldr	r3, [sp, #4]
 800b092:	1836      	adds	r6, r6, r0
 800b094:	1a1b      	subs	r3, r3, r0
 800b096:	9301      	str	r3, [sp, #4]
 800b098:	e7e6      	b.n	800b068 <__sflush_r+0xd4>
 800b09a:	46c0      	nop			@ (mov r8, r8)
 800b09c:	dfbffffe 	.word	0xdfbffffe

0800b0a0 <_fflush_r>:
 800b0a0:	690b      	ldr	r3, [r1, #16]
 800b0a2:	b570      	push	{r4, r5, r6, lr}
 800b0a4:	0005      	movs	r5, r0
 800b0a6:	000c      	movs	r4, r1
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d102      	bne.n	800b0b2 <_fflush_r+0x12>
 800b0ac:	2500      	movs	r5, #0
 800b0ae:	0028      	movs	r0, r5
 800b0b0:	bd70      	pop	{r4, r5, r6, pc}
 800b0b2:	2800      	cmp	r0, #0
 800b0b4:	d004      	beq.n	800b0c0 <_fflush_r+0x20>
 800b0b6:	6a03      	ldr	r3, [r0, #32]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d101      	bne.n	800b0c0 <_fflush_r+0x20>
 800b0bc:	f7fe fe66 	bl	8009d8c <__sinit>
 800b0c0:	220c      	movs	r2, #12
 800b0c2:	5ea3      	ldrsh	r3, [r4, r2]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d0f1      	beq.n	800b0ac <_fflush_r+0xc>
 800b0c8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b0ca:	07d2      	lsls	r2, r2, #31
 800b0cc:	d404      	bmi.n	800b0d8 <_fflush_r+0x38>
 800b0ce:	059b      	lsls	r3, r3, #22
 800b0d0:	d402      	bmi.n	800b0d8 <_fflush_r+0x38>
 800b0d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0d4:	f7fe fec5 	bl	8009e62 <__retarget_lock_acquire_recursive>
 800b0d8:	0028      	movs	r0, r5
 800b0da:	0021      	movs	r1, r4
 800b0dc:	f7ff ff5a 	bl	800af94 <__sflush_r>
 800b0e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b0e2:	0005      	movs	r5, r0
 800b0e4:	07db      	lsls	r3, r3, #31
 800b0e6:	d4e2      	bmi.n	800b0ae <_fflush_r+0xe>
 800b0e8:	89a3      	ldrh	r3, [r4, #12]
 800b0ea:	059b      	lsls	r3, r3, #22
 800b0ec:	d4df      	bmi.n	800b0ae <_fflush_r+0xe>
 800b0ee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0f0:	f7fe feb8 	bl	8009e64 <__retarget_lock_release_recursive>
 800b0f4:	e7db      	b.n	800b0ae <_fflush_r+0xe>
	...

0800b0f8 <__malloc_lock>:
 800b0f8:	b510      	push	{r4, lr}
 800b0fa:	4802      	ldr	r0, [pc, #8]	@ (800b104 <__malloc_lock+0xc>)
 800b0fc:	f7fe feb1 	bl	8009e62 <__retarget_lock_acquire_recursive>
 800b100:	bd10      	pop	{r4, pc}
 800b102:	46c0      	nop			@ (mov r8, r8)
 800b104:	20000678 	.word	0x20000678

0800b108 <__malloc_unlock>:
 800b108:	b510      	push	{r4, lr}
 800b10a:	4802      	ldr	r0, [pc, #8]	@ (800b114 <__malloc_unlock+0xc>)
 800b10c:	f7fe feaa 	bl	8009e64 <__retarget_lock_release_recursive>
 800b110:	bd10      	pop	{r4, pc}
 800b112:	46c0      	nop			@ (mov r8, r8)
 800b114:	20000678 	.word	0x20000678

0800b118 <_Balloc>:
 800b118:	b570      	push	{r4, r5, r6, lr}
 800b11a:	69c5      	ldr	r5, [r0, #28]
 800b11c:	0006      	movs	r6, r0
 800b11e:	000c      	movs	r4, r1
 800b120:	2d00      	cmp	r5, #0
 800b122:	d10e      	bne.n	800b142 <_Balloc+0x2a>
 800b124:	2010      	movs	r0, #16
 800b126:	f7ff fe89 	bl	800ae3c <malloc>
 800b12a:	1e02      	subs	r2, r0, #0
 800b12c:	61f0      	str	r0, [r6, #28]
 800b12e:	d104      	bne.n	800b13a <_Balloc+0x22>
 800b130:	216b      	movs	r1, #107	@ 0x6b
 800b132:	4b19      	ldr	r3, [pc, #100]	@ (800b198 <_Balloc+0x80>)
 800b134:	4819      	ldr	r0, [pc, #100]	@ (800b19c <_Balloc+0x84>)
 800b136:	f000 fc8b 	bl	800ba50 <__assert_func>
 800b13a:	6045      	str	r5, [r0, #4]
 800b13c:	6085      	str	r5, [r0, #8]
 800b13e:	6005      	str	r5, [r0, #0]
 800b140:	60c5      	str	r5, [r0, #12]
 800b142:	69f5      	ldr	r5, [r6, #28]
 800b144:	68eb      	ldr	r3, [r5, #12]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d013      	beq.n	800b172 <_Balloc+0x5a>
 800b14a:	69f3      	ldr	r3, [r6, #28]
 800b14c:	00a2      	lsls	r2, r4, #2
 800b14e:	68db      	ldr	r3, [r3, #12]
 800b150:	189b      	adds	r3, r3, r2
 800b152:	6818      	ldr	r0, [r3, #0]
 800b154:	2800      	cmp	r0, #0
 800b156:	d118      	bne.n	800b18a <_Balloc+0x72>
 800b158:	2101      	movs	r1, #1
 800b15a:	000d      	movs	r5, r1
 800b15c:	40a5      	lsls	r5, r4
 800b15e:	1d6a      	adds	r2, r5, #5
 800b160:	0030      	movs	r0, r6
 800b162:	0092      	lsls	r2, r2, #2
 800b164:	f000 fc92 	bl	800ba8c <_calloc_r>
 800b168:	2800      	cmp	r0, #0
 800b16a:	d00c      	beq.n	800b186 <_Balloc+0x6e>
 800b16c:	6044      	str	r4, [r0, #4]
 800b16e:	6085      	str	r5, [r0, #8]
 800b170:	e00d      	b.n	800b18e <_Balloc+0x76>
 800b172:	2221      	movs	r2, #33	@ 0x21
 800b174:	2104      	movs	r1, #4
 800b176:	0030      	movs	r0, r6
 800b178:	f000 fc88 	bl	800ba8c <_calloc_r>
 800b17c:	69f3      	ldr	r3, [r6, #28]
 800b17e:	60e8      	str	r0, [r5, #12]
 800b180:	68db      	ldr	r3, [r3, #12]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d1e1      	bne.n	800b14a <_Balloc+0x32>
 800b186:	2000      	movs	r0, #0
 800b188:	bd70      	pop	{r4, r5, r6, pc}
 800b18a:	6802      	ldr	r2, [r0, #0]
 800b18c:	601a      	str	r2, [r3, #0]
 800b18e:	2300      	movs	r3, #0
 800b190:	6103      	str	r3, [r0, #16]
 800b192:	60c3      	str	r3, [r0, #12]
 800b194:	e7f8      	b.n	800b188 <_Balloc+0x70>
 800b196:	46c0      	nop			@ (mov r8, r8)
 800b198:	0800c419 	.word	0x0800c419
 800b19c:	0800c4aa 	.word	0x0800c4aa

0800b1a0 <_Bfree>:
 800b1a0:	b570      	push	{r4, r5, r6, lr}
 800b1a2:	69c6      	ldr	r6, [r0, #28]
 800b1a4:	0005      	movs	r5, r0
 800b1a6:	000c      	movs	r4, r1
 800b1a8:	2e00      	cmp	r6, #0
 800b1aa:	d10e      	bne.n	800b1ca <_Bfree+0x2a>
 800b1ac:	2010      	movs	r0, #16
 800b1ae:	f7ff fe45 	bl	800ae3c <malloc>
 800b1b2:	1e02      	subs	r2, r0, #0
 800b1b4:	61e8      	str	r0, [r5, #28]
 800b1b6:	d104      	bne.n	800b1c2 <_Bfree+0x22>
 800b1b8:	218f      	movs	r1, #143	@ 0x8f
 800b1ba:	4b09      	ldr	r3, [pc, #36]	@ (800b1e0 <_Bfree+0x40>)
 800b1bc:	4809      	ldr	r0, [pc, #36]	@ (800b1e4 <_Bfree+0x44>)
 800b1be:	f000 fc47 	bl	800ba50 <__assert_func>
 800b1c2:	6046      	str	r6, [r0, #4]
 800b1c4:	6086      	str	r6, [r0, #8]
 800b1c6:	6006      	str	r6, [r0, #0]
 800b1c8:	60c6      	str	r6, [r0, #12]
 800b1ca:	2c00      	cmp	r4, #0
 800b1cc:	d007      	beq.n	800b1de <_Bfree+0x3e>
 800b1ce:	69eb      	ldr	r3, [r5, #28]
 800b1d0:	6862      	ldr	r2, [r4, #4]
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	0092      	lsls	r2, r2, #2
 800b1d6:	189b      	adds	r3, r3, r2
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	6022      	str	r2, [r4, #0]
 800b1dc:	601c      	str	r4, [r3, #0]
 800b1de:	bd70      	pop	{r4, r5, r6, pc}
 800b1e0:	0800c419 	.word	0x0800c419
 800b1e4:	0800c4aa 	.word	0x0800c4aa

0800b1e8 <__multadd>:
 800b1e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1ea:	000f      	movs	r7, r1
 800b1ec:	9001      	str	r0, [sp, #4]
 800b1ee:	000c      	movs	r4, r1
 800b1f0:	001e      	movs	r6, r3
 800b1f2:	2000      	movs	r0, #0
 800b1f4:	690d      	ldr	r5, [r1, #16]
 800b1f6:	3714      	adds	r7, #20
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	3001      	adds	r0, #1
 800b1fc:	b299      	uxth	r1, r3
 800b1fe:	4351      	muls	r1, r2
 800b200:	0c1b      	lsrs	r3, r3, #16
 800b202:	4353      	muls	r3, r2
 800b204:	1989      	adds	r1, r1, r6
 800b206:	0c0e      	lsrs	r6, r1, #16
 800b208:	199b      	adds	r3, r3, r6
 800b20a:	0c1e      	lsrs	r6, r3, #16
 800b20c:	b289      	uxth	r1, r1
 800b20e:	041b      	lsls	r3, r3, #16
 800b210:	185b      	adds	r3, r3, r1
 800b212:	c708      	stmia	r7!, {r3}
 800b214:	4285      	cmp	r5, r0
 800b216:	dcef      	bgt.n	800b1f8 <__multadd+0x10>
 800b218:	2e00      	cmp	r6, #0
 800b21a:	d022      	beq.n	800b262 <__multadd+0x7a>
 800b21c:	68a3      	ldr	r3, [r4, #8]
 800b21e:	42ab      	cmp	r3, r5
 800b220:	dc19      	bgt.n	800b256 <__multadd+0x6e>
 800b222:	6861      	ldr	r1, [r4, #4]
 800b224:	9801      	ldr	r0, [sp, #4]
 800b226:	3101      	adds	r1, #1
 800b228:	f7ff ff76 	bl	800b118 <_Balloc>
 800b22c:	1e07      	subs	r7, r0, #0
 800b22e:	d105      	bne.n	800b23c <__multadd+0x54>
 800b230:	003a      	movs	r2, r7
 800b232:	21ba      	movs	r1, #186	@ 0xba
 800b234:	4b0c      	ldr	r3, [pc, #48]	@ (800b268 <__multadd+0x80>)
 800b236:	480d      	ldr	r0, [pc, #52]	@ (800b26c <__multadd+0x84>)
 800b238:	f000 fc0a 	bl	800ba50 <__assert_func>
 800b23c:	0021      	movs	r1, r4
 800b23e:	6922      	ldr	r2, [r4, #16]
 800b240:	310c      	adds	r1, #12
 800b242:	3202      	adds	r2, #2
 800b244:	0092      	lsls	r2, r2, #2
 800b246:	300c      	adds	r0, #12
 800b248:	f000 fbf8 	bl	800ba3c <memcpy>
 800b24c:	0021      	movs	r1, r4
 800b24e:	9801      	ldr	r0, [sp, #4]
 800b250:	f7ff ffa6 	bl	800b1a0 <_Bfree>
 800b254:	003c      	movs	r4, r7
 800b256:	1d2b      	adds	r3, r5, #4
 800b258:	009b      	lsls	r3, r3, #2
 800b25a:	18e3      	adds	r3, r4, r3
 800b25c:	3501      	adds	r5, #1
 800b25e:	605e      	str	r6, [r3, #4]
 800b260:	6125      	str	r5, [r4, #16]
 800b262:	0020      	movs	r0, r4
 800b264:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b266:	46c0      	nop			@ (mov r8, r8)
 800b268:	0800c488 	.word	0x0800c488
 800b26c:	0800c4aa 	.word	0x0800c4aa

0800b270 <__hi0bits>:
 800b270:	2280      	movs	r2, #128	@ 0x80
 800b272:	0003      	movs	r3, r0
 800b274:	0252      	lsls	r2, r2, #9
 800b276:	2000      	movs	r0, #0
 800b278:	4293      	cmp	r3, r2
 800b27a:	d201      	bcs.n	800b280 <__hi0bits+0x10>
 800b27c:	041b      	lsls	r3, r3, #16
 800b27e:	3010      	adds	r0, #16
 800b280:	2280      	movs	r2, #128	@ 0x80
 800b282:	0452      	lsls	r2, r2, #17
 800b284:	4293      	cmp	r3, r2
 800b286:	d201      	bcs.n	800b28c <__hi0bits+0x1c>
 800b288:	3008      	adds	r0, #8
 800b28a:	021b      	lsls	r3, r3, #8
 800b28c:	2280      	movs	r2, #128	@ 0x80
 800b28e:	0552      	lsls	r2, r2, #21
 800b290:	4293      	cmp	r3, r2
 800b292:	d201      	bcs.n	800b298 <__hi0bits+0x28>
 800b294:	3004      	adds	r0, #4
 800b296:	011b      	lsls	r3, r3, #4
 800b298:	2280      	movs	r2, #128	@ 0x80
 800b29a:	05d2      	lsls	r2, r2, #23
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d201      	bcs.n	800b2a4 <__hi0bits+0x34>
 800b2a0:	3002      	adds	r0, #2
 800b2a2:	009b      	lsls	r3, r3, #2
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	db03      	blt.n	800b2b0 <__hi0bits+0x40>
 800b2a8:	3001      	adds	r0, #1
 800b2aa:	4213      	tst	r3, r2
 800b2ac:	d100      	bne.n	800b2b0 <__hi0bits+0x40>
 800b2ae:	2020      	movs	r0, #32
 800b2b0:	4770      	bx	lr

0800b2b2 <__lo0bits>:
 800b2b2:	6803      	ldr	r3, [r0, #0]
 800b2b4:	0001      	movs	r1, r0
 800b2b6:	2207      	movs	r2, #7
 800b2b8:	0018      	movs	r0, r3
 800b2ba:	4010      	ands	r0, r2
 800b2bc:	4213      	tst	r3, r2
 800b2be:	d00d      	beq.n	800b2dc <__lo0bits+0x2a>
 800b2c0:	3a06      	subs	r2, #6
 800b2c2:	2000      	movs	r0, #0
 800b2c4:	4213      	tst	r3, r2
 800b2c6:	d105      	bne.n	800b2d4 <__lo0bits+0x22>
 800b2c8:	3002      	adds	r0, #2
 800b2ca:	4203      	tst	r3, r0
 800b2cc:	d003      	beq.n	800b2d6 <__lo0bits+0x24>
 800b2ce:	40d3      	lsrs	r3, r2
 800b2d0:	0010      	movs	r0, r2
 800b2d2:	600b      	str	r3, [r1, #0]
 800b2d4:	4770      	bx	lr
 800b2d6:	089b      	lsrs	r3, r3, #2
 800b2d8:	600b      	str	r3, [r1, #0]
 800b2da:	e7fb      	b.n	800b2d4 <__lo0bits+0x22>
 800b2dc:	b29a      	uxth	r2, r3
 800b2de:	2a00      	cmp	r2, #0
 800b2e0:	d101      	bne.n	800b2e6 <__lo0bits+0x34>
 800b2e2:	2010      	movs	r0, #16
 800b2e4:	0c1b      	lsrs	r3, r3, #16
 800b2e6:	b2da      	uxtb	r2, r3
 800b2e8:	2a00      	cmp	r2, #0
 800b2ea:	d101      	bne.n	800b2f0 <__lo0bits+0x3e>
 800b2ec:	3008      	adds	r0, #8
 800b2ee:	0a1b      	lsrs	r3, r3, #8
 800b2f0:	071a      	lsls	r2, r3, #28
 800b2f2:	d101      	bne.n	800b2f8 <__lo0bits+0x46>
 800b2f4:	3004      	adds	r0, #4
 800b2f6:	091b      	lsrs	r3, r3, #4
 800b2f8:	079a      	lsls	r2, r3, #30
 800b2fa:	d101      	bne.n	800b300 <__lo0bits+0x4e>
 800b2fc:	3002      	adds	r0, #2
 800b2fe:	089b      	lsrs	r3, r3, #2
 800b300:	07da      	lsls	r2, r3, #31
 800b302:	d4e9      	bmi.n	800b2d8 <__lo0bits+0x26>
 800b304:	3001      	adds	r0, #1
 800b306:	085b      	lsrs	r3, r3, #1
 800b308:	d1e6      	bne.n	800b2d8 <__lo0bits+0x26>
 800b30a:	2020      	movs	r0, #32
 800b30c:	e7e2      	b.n	800b2d4 <__lo0bits+0x22>
	...

0800b310 <__i2b>:
 800b310:	b510      	push	{r4, lr}
 800b312:	000c      	movs	r4, r1
 800b314:	2101      	movs	r1, #1
 800b316:	f7ff feff 	bl	800b118 <_Balloc>
 800b31a:	2800      	cmp	r0, #0
 800b31c:	d107      	bne.n	800b32e <__i2b+0x1e>
 800b31e:	2146      	movs	r1, #70	@ 0x46
 800b320:	4c05      	ldr	r4, [pc, #20]	@ (800b338 <__i2b+0x28>)
 800b322:	0002      	movs	r2, r0
 800b324:	4b05      	ldr	r3, [pc, #20]	@ (800b33c <__i2b+0x2c>)
 800b326:	0020      	movs	r0, r4
 800b328:	31ff      	adds	r1, #255	@ 0xff
 800b32a:	f000 fb91 	bl	800ba50 <__assert_func>
 800b32e:	2301      	movs	r3, #1
 800b330:	6144      	str	r4, [r0, #20]
 800b332:	6103      	str	r3, [r0, #16]
 800b334:	bd10      	pop	{r4, pc}
 800b336:	46c0      	nop			@ (mov r8, r8)
 800b338:	0800c4aa 	.word	0x0800c4aa
 800b33c:	0800c488 	.word	0x0800c488

0800b340 <__multiply>:
 800b340:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b342:	0014      	movs	r4, r2
 800b344:	690a      	ldr	r2, [r1, #16]
 800b346:	6923      	ldr	r3, [r4, #16]
 800b348:	000d      	movs	r5, r1
 800b34a:	b08b      	sub	sp, #44	@ 0x2c
 800b34c:	429a      	cmp	r2, r3
 800b34e:	db02      	blt.n	800b356 <__multiply+0x16>
 800b350:	0023      	movs	r3, r4
 800b352:	000c      	movs	r4, r1
 800b354:	001d      	movs	r5, r3
 800b356:	6927      	ldr	r7, [r4, #16]
 800b358:	692e      	ldr	r6, [r5, #16]
 800b35a:	6861      	ldr	r1, [r4, #4]
 800b35c:	19bb      	adds	r3, r7, r6
 800b35e:	9303      	str	r3, [sp, #12]
 800b360:	68a3      	ldr	r3, [r4, #8]
 800b362:	19ba      	adds	r2, r7, r6
 800b364:	4293      	cmp	r3, r2
 800b366:	da00      	bge.n	800b36a <__multiply+0x2a>
 800b368:	3101      	adds	r1, #1
 800b36a:	f7ff fed5 	bl	800b118 <_Balloc>
 800b36e:	9002      	str	r0, [sp, #8]
 800b370:	2800      	cmp	r0, #0
 800b372:	d106      	bne.n	800b382 <__multiply+0x42>
 800b374:	21b1      	movs	r1, #177	@ 0xb1
 800b376:	4b49      	ldr	r3, [pc, #292]	@ (800b49c <__multiply+0x15c>)
 800b378:	4849      	ldr	r0, [pc, #292]	@ (800b4a0 <__multiply+0x160>)
 800b37a:	9a02      	ldr	r2, [sp, #8]
 800b37c:	0049      	lsls	r1, r1, #1
 800b37e:	f000 fb67 	bl	800ba50 <__assert_func>
 800b382:	9b02      	ldr	r3, [sp, #8]
 800b384:	2200      	movs	r2, #0
 800b386:	3314      	adds	r3, #20
 800b388:	469c      	mov	ip, r3
 800b38a:	19bb      	adds	r3, r7, r6
 800b38c:	009b      	lsls	r3, r3, #2
 800b38e:	4463      	add	r3, ip
 800b390:	9304      	str	r3, [sp, #16]
 800b392:	4663      	mov	r3, ip
 800b394:	9904      	ldr	r1, [sp, #16]
 800b396:	428b      	cmp	r3, r1
 800b398:	d32a      	bcc.n	800b3f0 <__multiply+0xb0>
 800b39a:	0023      	movs	r3, r4
 800b39c:	00bf      	lsls	r7, r7, #2
 800b39e:	3314      	adds	r3, #20
 800b3a0:	3514      	adds	r5, #20
 800b3a2:	9308      	str	r3, [sp, #32]
 800b3a4:	00b6      	lsls	r6, r6, #2
 800b3a6:	19db      	adds	r3, r3, r7
 800b3a8:	9305      	str	r3, [sp, #20]
 800b3aa:	19ab      	adds	r3, r5, r6
 800b3ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3ae:	2304      	movs	r3, #4
 800b3b0:	9306      	str	r3, [sp, #24]
 800b3b2:	0023      	movs	r3, r4
 800b3b4:	9a05      	ldr	r2, [sp, #20]
 800b3b6:	3315      	adds	r3, #21
 800b3b8:	9501      	str	r5, [sp, #4]
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d305      	bcc.n	800b3ca <__multiply+0x8a>
 800b3be:	1b13      	subs	r3, r2, r4
 800b3c0:	3b15      	subs	r3, #21
 800b3c2:	089b      	lsrs	r3, r3, #2
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	9306      	str	r3, [sp, #24]
 800b3ca:	9b01      	ldr	r3, [sp, #4]
 800b3cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d310      	bcc.n	800b3f4 <__multiply+0xb4>
 800b3d2:	9b03      	ldr	r3, [sp, #12]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	dd05      	ble.n	800b3e4 <__multiply+0xa4>
 800b3d8:	9b04      	ldr	r3, [sp, #16]
 800b3da:	3b04      	subs	r3, #4
 800b3dc:	9304      	str	r3, [sp, #16]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d056      	beq.n	800b492 <__multiply+0x152>
 800b3e4:	9b02      	ldr	r3, [sp, #8]
 800b3e6:	9a03      	ldr	r2, [sp, #12]
 800b3e8:	0018      	movs	r0, r3
 800b3ea:	611a      	str	r2, [r3, #16]
 800b3ec:	b00b      	add	sp, #44	@ 0x2c
 800b3ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3f0:	c304      	stmia	r3!, {r2}
 800b3f2:	e7cf      	b.n	800b394 <__multiply+0x54>
 800b3f4:	9b01      	ldr	r3, [sp, #4]
 800b3f6:	6818      	ldr	r0, [r3, #0]
 800b3f8:	b280      	uxth	r0, r0
 800b3fa:	2800      	cmp	r0, #0
 800b3fc:	d01e      	beq.n	800b43c <__multiply+0xfc>
 800b3fe:	4667      	mov	r7, ip
 800b400:	2500      	movs	r5, #0
 800b402:	9e08      	ldr	r6, [sp, #32]
 800b404:	ce02      	ldmia	r6!, {r1}
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	9307      	str	r3, [sp, #28]
 800b40a:	b28b      	uxth	r3, r1
 800b40c:	4343      	muls	r3, r0
 800b40e:	001a      	movs	r2, r3
 800b410:	466b      	mov	r3, sp
 800b412:	0c09      	lsrs	r1, r1, #16
 800b414:	8b9b      	ldrh	r3, [r3, #28]
 800b416:	4341      	muls	r1, r0
 800b418:	18d3      	adds	r3, r2, r3
 800b41a:	9a07      	ldr	r2, [sp, #28]
 800b41c:	195b      	adds	r3, r3, r5
 800b41e:	0c12      	lsrs	r2, r2, #16
 800b420:	1889      	adds	r1, r1, r2
 800b422:	0c1a      	lsrs	r2, r3, #16
 800b424:	188a      	adds	r2, r1, r2
 800b426:	b29b      	uxth	r3, r3
 800b428:	0c15      	lsrs	r5, r2, #16
 800b42a:	0412      	lsls	r2, r2, #16
 800b42c:	431a      	orrs	r2, r3
 800b42e:	9b05      	ldr	r3, [sp, #20]
 800b430:	c704      	stmia	r7!, {r2}
 800b432:	42b3      	cmp	r3, r6
 800b434:	d8e6      	bhi.n	800b404 <__multiply+0xc4>
 800b436:	4663      	mov	r3, ip
 800b438:	9a06      	ldr	r2, [sp, #24]
 800b43a:	509d      	str	r5, [r3, r2]
 800b43c:	9b01      	ldr	r3, [sp, #4]
 800b43e:	6818      	ldr	r0, [r3, #0]
 800b440:	0c00      	lsrs	r0, r0, #16
 800b442:	d020      	beq.n	800b486 <__multiply+0x146>
 800b444:	4663      	mov	r3, ip
 800b446:	0025      	movs	r5, r4
 800b448:	4661      	mov	r1, ip
 800b44a:	2700      	movs	r7, #0
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	3514      	adds	r5, #20
 800b450:	682a      	ldr	r2, [r5, #0]
 800b452:	680e      	ldr	r6, [r1, #0]
 800b454:	b292      	uxth	r2, r2
 800b456:	4342      	muls	r2, r0
 800b458:	0c36      	lsrs	r6, r6, #16
 800b45a:	1992      	adds	r2, r2, r6
 800b45c:	19d2      	adds	r2, r2, r7
 800b45e:	0416      	lsls	r6, r2, #16
 800b460:	b29b      	uxth	r3, r3
 800b462:	431e      	orrs	r6, r3
 800b464:	600e      	str	r6, [r1, #0]
 800b466:	cd40      	ldmia	r5!, {r6}
 800b468:	684b      	ldr	r3, [r1, #4]
 800b46a:	0c36      	lsrs	r6, r6, #16
 800b46c:	4346      	muls	r6, r0
 800b46e:	b29b      	uxth	r3, r3
 800b470:	0c12      	lsrs	r2, r2, #16
 800b472:	18f3      	adds	r3, r6, r3
 800b474:	189b      	adds	r3, r3, r2
 800b476:	9a05      	ldr	r2, [sp, #20]
 800b478:	0c1f      	lsrs	r7, r3, #16
 800b47a:	3104      	adds	r1, #4
 800b47c:	42aa      	cmp	r2, r5
 800b47e:	d8e7      	bhi.n	800b450 <__multiply+0x110>
 800b480:	4662      	mov	r2, ip
 800b482:	9906      	ldr	r1, [sp, #24]
 800b484:	5053      	str	r3, [r2, r1]
 800b486:	9b01      	ldr	r3, [sp, #4]
 800b488:	3304      	adds	r3, #4
 800b48a:	9301      	str	r3, [sp, #4]
 800b48c:	2304      	movs	r3, #4
 800b48e:	449c      	add	ip, r3
 800b490:	e79b      	b.n	800b3ca <__multiply+0x8a>
 800b492:	9b03      	ldr	r3, [sp, #12]
 800b494:	3b01      	subs	r3, #1
 800b496:	9303      	str	r3, [sp, #12]
 800b498:	e79b      	b.n	800b3d2 <__multiply+0x92>
 800b49a:	46c0      	nop			@ (mov r8, r8)
 800b49c:	0800c488 	.word	0x0800c488
 800b4a0:	0800c4aa 	.word	0x0800c4aa

0800b4a4 <__pow5mult>:
 800b4a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4a6:	2303      	movs	r3, #3
 800b4a8:	0015      	movs	r5, r2
 800b4aa:	0007      	movs	r7, r0
 800b4ac:	000e      	movs	r6, r1
 800b4ae:	401a      	ands	r2, r3
 800b4b0:	421d      	tst	r5, r3
 800b4b2:	d008      	beq.n	800b4c6 <__pow5mult+0x22>
 800b4b4:	4925      	ldr	r1, [pc, #148]	@ (800b54c <__pow5mult+0xa8>)
 800b4b6:	3a01      	subs	r2, #1
 800b4b8:	0092      	lsls	r2, r2, #2
 800b4ba:	5852      	ldr	r2, [r2, r1]
 800b4bc:	2300      	movs	r3, #0
 800b4be:	0031      	movs	r1, r6
 800b4c0:	f7ff fe92 	bl	800b1e8 <__multadd>
 800b4c4:	0006      	movs	r6, r0
 800b4c6:	10ad      	asrs	r5, r5, #2
 800b4c8:	d03d      	beq.n	800b546 <__pow5mult+0xa2>
 800b4ca:	69fc      	ldr	r4, [r7, #28]
 800b4cc:	2c00      	cmp	r4, #0
 800b4ce:	d10f      	bne.n	800b4f0 <__pow5mult+0x4c>
 800b4d0:	2010      	movs	r0, #16
 800b4d2:	f7ff fcb3 	bl	800ae3c <malloc>
 800b4d6:	1e02      	subs	r2, r0, #0
 800b4d8:	61f8      	str	r0, [r7, #28]
 800b4da:	d105      	bne.n	800b4e8 <__pow5mult+0x44>
 800b4dc:	21b4      	movs	r1, #180	@ 0xb4
 800b4de:	4b1c      	ldr	r3, [pc, #112]	@ (800b550 <__pow5mult+0xac>)
 800b4e0:	481c      	ldr	r0, [pc, #112]	@ (800b554 <__pow5mult+0xb0>)
 800b4e2:	31ff      	adds	r1, #255	@ 0xff
 800b4e4:	f000 fab4 	bl	800ba50 <__assert_func>
 800b4e8:	6044      	str	r4, [r0, #4]
 800b4ea:	6084      	str	r4, [r0, #8]
 800b4ec:	6004      	str	r4, [r0, #0]
 800b4ee:	60c4      	str	r4, [r0, #12]
 800b4f0:	69fb      	ldr	r3, [r7, #28]
 800b4f2:	689c      	ldr	r4, [r3, #8]
 800b4f4:	9301      	str	r3, [sp, #4]
 800b4f6:	2c00      	cmp	r4, #0
 800b4f8:	d108      	bne.n	800b50c <__pow5mult+0x68>
 800b4fa:	0038      	movs	r0, r7
 800b4fc:	4916      	ldr	r1, [pc, #88]	@ (800b558 <__pow5mult+0xb4>)
 800b4fe:	f7ff ff07 	bl	800b310 <__i2b>
 800b502:	9b01      	ldr	r3, [sp, #4]
 800b504:	0004      	movs	r4, r0
 800b506:	6098      	str	r0, [r3, #8]
 800b508:	2300      	movs	r3, #0
 800b50a:	6003      	str	r3, [r0, #0]
 800b50c:	2301      	movs	r3, #1
 800b50e:	421d      	tst	r5, r3
 800b510:	d00a      	beq.n	800b528 <__pow5mult+0x84>
 800b512:	0031      	movs	r1, r6
 800b514:	0022      	movs	r2, r4
 800b516:	0038      	movs	r0, r7
 800b518:	f7ff ff12 	bl	800b340 <__multiply>
 800b51c:	0031      	movs	r1, r6
 800b51e:	9001      	str	r0, [sp, #4]
 800b520:	0038      	movs	r0, r7
 800b522:	f7ff fe3d 	bl	800b1a0 <_Bfree>
 800b526:	9e01      	ldr	r6, [sp, #4]
 800b528:	106d      	asrs	r5, r5, #1
 800b52a:	d00c      	beq.n	800b546 <__pow5mult+0xa2>
 800b52c:	6820      	ldr	r0, [r4, #0]
 800b52e:	2800      	cmp	r0, #0
 800b530:	d107      	bne.n	800b542 <__pow5mult+0x9e>
 800b532:	0022      	movs	r2, r4
 800b534:	0021      	movs	r1, r4
 800b536:	0038      	movs	r0, r7
 800b538:	f7ff ff02 	bl	800b340 <__multiply>
 800b53c:	2300      	movs	r3, #0
 800b53e:	6020      	str	r0, [r4, #0]
 800b540:	6003      	str	r3, [r0, #0]
 800b542:	0004      	movs	r4, r0
 800b544:	e7e2      	b.n	800b50c <__pow5mult+0x68>
 800b546:	0030      	movs	r0, r6
 800b548:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b54a:	46c0      	nop			@ (mov r8, r8)
 800b54c:	0800c504 	.word	0x0800c504
 800b550:	0800c419 	.word	0x0800c419
 800b554:	0800c4aa 	.word	0x0800c4aa
 800b558:	00000271 	.word	0x00000271

0800b55c <__lshift>:
 800b55c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b55e:	000c      	movs	r4, r1
 800b560:	0016      	movs	r6, r2
 800b562:	6923      	ldr	r3, [r4, #16]
 800b564:	1157      	asrs	r7, r2, #5
 800b566:	b085      	sub	sp, #20
 800b568:	18fb      	adds	r3, r7, r3
 800b56a:	9301      	str	r3, [sp, #4]
 800b56c:	3301      	adds	r3, #1
 800b56e:	9300      	str	r3, [sp, #0]
 800b570:	6849      	ldr	r1, [r1, #4]
 800b572:	68a3      	ldr	r3, [r4, #8]
 800b574:	9002      	str	r0, [sp, #8]
 800b576:	9a00      	ldr	r2, [sp, #0]
 800b578:	4293      	cmp	r3, r2
 800b57a:	db10      	blt.n	800b59e <__lshift+0x42>
 800b57c:	9802      	ldr	r0, [sp, #8]
 800b57e:	f7ff fdcb 	bl	800b118 <_Balloc>
 800b582:	2300      	movs	r3, #0
 800b584:	0001      	movs	r1, r0
 800b586:	0005      	movs	r5, r0
 800b588:	001a      	movs	r2, r3
 800b58a:	3114      	adds	r1, #20
 800b58c:	4298      	cmp	r0, r3
 800b58e:	d10c      	bne.n	800b5aa <__lshift+0x4e>
 800b590:	21ef      	movs	r1, #239	@ 0xef
 800b592:	002a      	movs	r2, r5
 800b594:	4b25      	ldr	r3, [pc, #148]	@ (800b62c <__lshift+0xd0>)
 800b596:	4826      	ldr	r0, [pc, #152]	@ (800b630 <__lshift+0xd4>)
 800b598:	0049      	lsls	r1, r1, #1
 800b59a:	f000 fa59 	bl	800ba50 <__assert_func>
 800b59e:	3101      	adds	r1, #1
 800b5a0:	005b      	lsls	r3, r3, #1
 800b5a2:	e7e8      	b.n	800b576 <__lshift+0x1a>
 800b5a4:	0098      	lsls	r0, r3, #2
 800b5a6:	500a      	str	r2, [r1, r0]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	42bb      	cmp	r3, r7
 800b5ac:	dbfa      	blt.n	800b5a4 <__lshift+0x48>
 800b5ae:	43fb      	mvns	r3, r7
 800b5b0:	17db      	asrs	r3, r3, #31
 800b5b2:	401f      	ands	r7, r3
 800b5b4:	00bf      	lsls	r7, r7, #2
 800b5b6:	0023      	movs	r3, r4
 800b5b8:	201f      	movs	r0, #31
 800b5ba:	19c9      	adds	r1, r1, r7
 800b5bc:	0037      	movs	r7, r6
 800b5be:	6922      	ldr	r2, [r4, #16]
 800b5c0:	3314      	adds	r3, #20
 800b5c2:	0092      	lsls	r2, r2, #2
 800b5c4:	189a      	adds	r2, r3, r2
 800b5c6:	4007      	ands	r7, r0
 800b5c8:	4206      	tst	r6, r0
 800b5ca:	d029      	beq.n	800b620 <__lshift+0xc4>
 800b5cc:	3001      	adds	r0, #1
 800b5ce:	1bc0      	subs	r0, r0, r7
 800b5d0:	9003      	str	r0, [sp, #12]
 800b5d2:	468c      	mov	ip, r1
 800b5d4:	2000      	movs	r0, #0
 800b5d6:	681e      	ldr	r6, [r3, #0]
 800b5d8:	40be      	lsls	r6, r7
 800b5da:	4306      	orrs	r6, r0
 800b5dc:	4660      	mov	r0, ip
 800b5de:	c040      	stmia	r0!, {r6}
 800b5e0:	4684      	mov	ip, r0
 800b5e2:	9e03      	ldr	r6, [sp, #12]
 800b5e4:	cb01      	ldmia	r3!, {r0}
 800b5e6:	40f0      	lsrs	r0, r6
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d8f4      	bhi.n	800b5d6 <__lshift+0x7a>
 800b5ec:	0026      	movs	r6, r4
 800b5ee:	3615      	adds	r6, #21
 800b5f0:	2304      	movs	r3, #4
 800b5f2:	42b2      	cmp	r2, r6
 800b5f4:	d304      	bcc.n	800b600 <__lshift+0xa4>
 800b5f6:	1b13      	subs	r3, r2, r4
 800b5f8:	3b15      	subs	r3, #21
 800b5fa:	089b      	lsrs	r3, r3, #2
 800b5fc:	3301      	adds	r3, #1
 800b5fe:	009b      	lsls	r3, r3, #2
 800b600:	50c8      	str	r0, [r1, r3]
 800b602:	2800      	cmp	r0, #0
 800b604:	d002      	beq.n	800b60c <__lshift+0xb0>
 800b606:	9b01      	ldr	r3, [sp, #4]
 800b608:	3302      	adds	r3, #2
 800b60a:	9300      	str	r3, [sp, #0]
 800b60c:	9b00      	ldr	r3, [sp, #0]
 800b60e:	9802      	ldr	r0, [sp, #8]
 800b610:	3b01      	subs	r3, #1
 800b612:	0021      	movs	r1, r4
 800b614:	612b      	str	r3, [r5, #16]
 800b616:	f7ff fdc3 	bl	800b1a0 <_Bfree>
 800b61a:	0028      	movs	r0, r5
 800b61c:	b005      	add	sp, #20
 800b61e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b620:	cb01      	ldmia	r3!, {r0}
 800b622:	c101      	stmia	r1!, {r0}
 800b624:	429a      	cmp	r2, r3
 800b626:	d8fb      	bhi.n	800b620 <__lshift+0xc4>
 800b628:	e7f0      	b.n	800b60c <__lshift+0xb0>
 800b62a:	46c0      	nop			@ (mov r8, r8)
 800b62c:	0800c488 	.word	0x0800c488
 800b630:	0800c4aa 	.word	0x0800c4aa

0800b634 <__mcmp>:
 800b634:	b530      	push	{r4, r5, lr}
 800b636:	690b      	ldr	r3, [r1, #16]
 800b638:	6904      	ldr	r4, [r0, #16]
 800b63a:	0002      	movs	r2, r0
 800b63c:	1ae0      	subs	r0, r4, r3
 800b63e:	429c      	cmp	r4, r3
 800b640:	d10f      	bne.n	800b662 <__mcmp+0x2e>
 800b642:	3214      	adds	r2, #20
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	3114      	adds	r1, #20
 800b648:	0014      	movs	r4, r2
 800b64a:	18c9      	adds	r1, r1, r3
 800b64c:	18d2      	adds	r2, r2, r3
 800b64e:	3a04      	subs	r2, #4
 800b650:	3904      	subs	r1, #4
 800b652:	6815      	ldr	r5, [r2, #0]
 800b654:	680b      	ldr	r3, [r1, #0]
 800b656:	429d      	cmp	r5, r3
 800b658:	d004      	beq.n	800b664 <__mcmp+0x30>
 800b65a:	2001      	movs	r0, #1
 800b65c:	429d      	cmp	r5, r3
 800b65e:	d200      	bcs.n	800b662 <__mcmp+0x2e>
 800b660:	3802      	subs	r0, #2
 800b662:	bd30      	pop	{r4, r5, pc}
 800b664:	4294      	cmp	r4, r2
 800b666:	d3f2      	bcc.n	800b64e <__mcmp+0x1a>
 800b668:	e7fb      	b.n	800b662 <__mcmp+0x2e>
	...

0800b66c <__mdiff>:
 800b66c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b66e:	000c      	movs	r4, r1
 800b670:	b087      	sub	sp, #28
 800b672:	9000      	str	r0, [sp, #0]
 800b674:	0011      	movs	r1, r2
 800b676:	0020      	movs	r0, r4
 800b678:	0017      	movs	r7, r2
 800b67a:	f7ff ffdb 	bl	800b634 <__mcmp>
 800b67e:	1e05      	subs	r5, r0, #0
 800b680:	d110      	bne.n	800b6a4 <__mdiff+0x38>
 800b682:	0001      	movs	r1, r0
 800b684:	9800      	ldr	r0, [sp, #0]
 800b686:	f7ff fd47 	bl	800b118 <_Balloc>
 800b68a:	1e02      	subs	r2, r0, #0
 800b68c:	d104      	bne.n	800b698 <__mdiff+0x2c>
 800b68e:	4b40      	ldr	r3, [pc, #256]	@ (800b790 <__mdiff+0x124>)
 800b690:	4840      	ldr	r0, [pc, #256]	@ (800b794 <__mdiff+0x128>)
 800b692:	4941      	ldr	r1, [pc, #260]	@ (800b798 <__mdiff+0x12c>)
 800b694:	f000 f9dc 	bl	800ba50 <__assert_func>
 800b698:	2301      	movs	r3, #1
 800b69a:	6145      	str	r5, [r0, #20]
 800b69c:	6103      	str	r3, [r0, #16]
 800b69e:	0010      	movs	r0, r2
 800b6a0:	b007      	add	sp, #28
 800b6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6a4:	2600      	movs	r6, #0
 800b6a6:	42b0      	cmp	r0, r6
 800b6a8:	da03      	bge.n	800b6b2 <__mdiff+0x46>
 800b6aa:	0023      	movs	r3, r4
 800b6ac:	003c      	movs	r4, r7
 800b6ae:	001f      	movs	r7, r3
 800b6b0:	3601      	adds	r6, #1
 800b6b2:	6861      	ldr	r1, [r4, #4]
 800b6b4:	9800      	ldr	r0, [sp, #0]
 800b6b6:	f7ff fd2f 	bl	800b118 <_Balloc>
 800b6ba:	1e02      	subs	r2, r0, #0
 800b6bc:	d103      	bne.n	800b6c6 <__mdiff+0x5a>
 800b6be:	4b34      	ldr	r3, [pc, #208]	@ (800b790 <__mdiff+0x124>)
 800b6c0:	4834      	ldr	r0, [pc, #208]	@ (800b794 <__mdiff+0x128>)
 800b6c2:	4936      	ldr	r1, [pc, #216]	@ (800b79c <__mdiff+0x130>)
 800b6c4:	e7e6      	b.n	800b694 <__mdiff+0x28>
 800b6c6:	6923      	ldr	r3, [r4, #16]
 800b6c8:	3414      	adds	r4, #20
 800b6ca:	9300      	str	r3, [sp, #0]
 800b6cc:	009b      	lsls	r3, r3, #2
 800b6ce:	18e3      	adds	r3, r4, r3
 800b6d0:	0021      	movs	r1, r4
 800b6d2:	9401      	str	r4, [sp, #4]
 800b6d4:	003c      	movs	r4, r7
 800b6d6:	9302      	str	r3, [sp, #8]
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	3414      	adds	r4, #20
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	18e3      	adds	r3, r4, r3
 800b6e0:	9303      	str	r3, [sp, #12]
 800b6e2:	0003      	movs	r3, r0
 800b6e4:	60c6      	str	r6, [r0, #12]
 800b6e6:	468c      	mov	ip, r1
 800b6e8:	2000      	movs	r0, #0
 800b6ea:	3314      	adds	r3, #20
 800b6ec:	9304      	str	r3, [sp, #16]
 800b6ee:	9305      	str	r3, [sp, #20]
 800b6f0:	4663      	mov	r3, ip
 800b6f2:	cb20      	ldmia	r3!, {r5}
 800b6f4:	b2a9      	uxth	r1, r5
 800b6f6:	000e      	movs	r6, r1
 800b6f8:	469c      	mov	ip, r3
 800b6fa:	cc08      	ldmia	r4!, {r3}
 800b6fc:	0c2d      	lsrs	r5, r5, #16
 800b6fe:	b299      	uxth	r1, r3
 800b700:	1a71      	subs	r1, r6, r1
 800b702:	1809      	adds	r1, r1, r0
 800b704:	0c1b      	lsrs	r3, r3, #16
 800b706:	1408      	asrs	r0, r1, #16
 800b708:	1aeb      	subs	r3, r5, r3
 800b70a:	181b      	adds	r3, r3, r0
 800b70c:	1418      	asrs	r0, r3, #16
 800b70e:	b289      	uxth	r1, r1
 800b710:	041b      	lsls	r3, r3, #16
 800b712:	4319      	orrs	r1, r3
 800b714:	9b05      	ldr	r3, [sp, #20]
 800b716:	c302      	stmia	r3!, {r1}
 800b718:	9305      	str	r3, [sp, #20]
 800b71a:	9b03      	ldr	r3, [sp, #12]
 800b71c:	42a3      	cmp	r3, r4
 800b71e:	d8e7      	bhi.n	800b6f0 <__mdiff+0x84>
 800b720:	0039      	movs	r1, r7
 800b722:	9c03      	ldr	r4, [sp, #12]
 800b724:	3115      	adds	r1, #21
 800b726:	2304      	movs	r3, #4
 800b728:	428c      	cmp	r4, r1
 800b72a:	d304      	bcc.n	800b736 <__mdiff+0xca>
 800b72c:	1be3      	subs	r3, r4, r7
 800b72e:	3b15      	subs	r3, #21
 800b730:	089b      	lsrs	r3, r3, #2
 800b732:	3301      	adds	r3, #1
 800b734:	009b      	lsls	r3, r3, #2
 800b736:	9901      	ldr	r1, [sp, #4]
 800b738:	18cd      	adds	r5, r1, r3
 800b73a:	9904      	ldr	r1, [sp, #16]
 800b73c:	002e      	movs	r6, r5
 800b73e:	18cb      	adds	r3, r1, r3
 800b740:	001f      	movs	r7, r3
 800b742:	9902      	ldr	r1, [sp, #8]
 800b744:	428e      	cmp	r6, r1
 800b746:	d311      	bcc.n	800b76c <__mdiff+0x100>
 800b748:	9c02      	ldr	r4, [sp, #8]
 800b74a:	1ee9      	subs	r1, r5, #3
 800b74c:	2000      	movs	r0, #0
 800b74e:	428c      	cmp	r4, r1
 800b750:	d304      	bcc.n	800b75c <__mdiff+0xf0>
 800b752:	0021      	movs	r1, r4
 800b754:	3103      	adds	r1, #3
 800b756:	1b49      	subs	r1, r1, r5
 800b758:	0889      	lsrs	r1, r1, #2
 800b75a:	0088      	lsls	r0, r1, #2
 800b75c:	181b      	adds	r3, r3, r0
 800b75e:	3b04      	subs	r3, #4
 800b760:	6819      	ldr	r1, [r3, #0]
 800b762:	2900      	cmp	r1, #0
 800b764:	d010      	beq.n	800b788 <__mdiff+0x11c>
 800b766:	9b00      	ldr	r3, [sp, #0]
 800b768:	6113      	str	r3, [r2, #16]
 800b76a:	e798      	b.n	800b69e <__mdiff+0x32>
 800b76c:	4684      	mov	ip, r0
 800b76e:	ce02      	ldmia	r6!, {r1}
 800b770:	b288      	uxth	r0, r1
 800b772:	4460      	add	r0, ip
 800b774:	1400      	asrs	r0, r0, #16
 800b776:	0c0c      	lsrs	r4, r1, #16
 800b778:	1904      	adds	r4, r0, r4
 800b77a:	4461      	add	r1, ip
 800b77c:	1420      	asrs	r0, r4, #16
 800b77e:	b289      	uxth	r1, r1
 800b780:	0424      	lsls	r4, r4, #16
 800b782:	4321      	orrs	r1, r4
 800b784:	c702      	stmia	r7!, {r1}
 800b786:	e7dc      	b.n	800b742 <__mdiff+0xd6>
 800b788:	9900      	ldr	r1, [sp, #0]
 800b78a:	3901      	subs	r1, #1
 800b78c:	9100      	str	r1, [sp, #0]
 800b78e:	e7e6      	b.n	800b75e <__mdiff+0xf2>
 800b790:	0800c488 	.word	0x0800c488
 800b794:	0800c4aa 	.word	0x0800c4aa
 800b798:	00000237 	.word	0x00000237
 800b79c:	00000245 	.word	0x00000245

0800b7a0 <__d2b>:
 800b7a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7a2:	2101      	movs	r1, #1
 800b7a4:	0016      	movs	r6, r2
 800b7a6:	001f      	movs	r7, r3
 800b7a8:	f7ff fcb6 	bl	800b118 <_Balloc>
 800b7ac:	1e04      	subs	r4, r0, #0
 800b7ae:	d105      	bne.n	800b7bc <__d2b+0x1c>
 800b7b0:	0022      	movs	r2, r4
 800b7b2:	4b25      	ldr	r3, [pc, #148]	@ (800b848 <__d2b+0xa8>)
 800b7b4:	4825      	ldr	r0, [pc, #148]	@ (800b84c <__d2b+0xac>)
 800b7b6:	4926      	ldr	r1, [pc, #152]	@ (800b850 <__d2b+0xb0>)
 800b7b8:	f000 f94a 	bl	800ba50 <__assert_func>
 800b7bc:	033b      	lsls	r3, r7, #12
 800b7be:	007d      	lsls	r5, r7, #1
 800b7c0:	0b1b      	lsrs	r3, r3, #12
 800b7c2:	0d6d      	lsrs	r5, r5, #21
 800b7c4:	d002      	beq.n	800b7cc <__d2b+0x2c>
 800b7c6:	2280      	movs	r2, #128	@ 0x80
 800b7c8:	0352      	lsls	r2, r2, #13
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	9301      	str	r3, [sp, #4]
 800b7ce:	2e00      	cmp	r6, #0
 800b7d0:	d025      	beq.n	800b81e <__d2b+0x7e>
 800b7d2:	4668      	mov	r0, sp
 800b7d4:	9600      	str	r6, [sp, #0]
 800b7d6:	f7ff fd6c 	bl	800b2b2 <__lo0bits>
 800b7da:	9b01      	ldr	r3, [sp, #4]
 800b7dc:	9900      	ldr	r1, [sp, #0]
 800b7de:	2800      	cmp	r0, #0
 800b7e0:	d01b      	beq.n	800b81a <__d2b+0x7a>
 800b7e2:	2220      	movs	r2, #32
 800b7e4:	001e      	movs	r6, r3
 800b7e6:	1a12      	subs	r2, r2, r0
 800b7e8:	4096      	lsls	r6, r2
 800b7ea:	0032      	movs	r2, r6
 800b7ec:	40c3      	lsrs	r3, r0
 800b7ee:	430a      	orrs	r2, r1
 800b7f0:	6162      	str	r2, [r4, #20]
 800b7f2:	9301      	str	r3, [sp, #4]
 800b7f4:	9e01      	ldr	r6, [sp, #4]
 800b7f6:	61a6      	str	r6, [r4, #24]
 800b7f8:	1e73      	subs	r3, r6, #1
 800b7fa:	419e      	sbcs	r6, r3
 800b7fc:	3601      	adds	r6, #1
 800b7fe:	6126      	str	r6, [r4, #16]
 800b800:	2d00      	cmp	r5, #0
 800b802:	d014      	beq.n	800b82e <__d2b+0x8e>
 800b804:	2635      	movs	r6, #53	@ 0x35
 800b806:	4b13      	ldr	r3, [pc, #76]	@ (800b854 <__d2b+0xb4>)
 800b808:	18ed      	adds	r5, r5, r3
 800b80a:	9b08      	ldr	r3, [sp, #32]
 800b80c:	182d      	adds	r5, r5, r0
 800b80e:	601d      	str	r5, [r3, #0]
 800b810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b812:	1a36      	subs	r6, r6, r0
 800b814:	601e      	str	r6, [r3, #0]
 800b816:	0020      	movs	r0, r4
 800b818:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b81a:	6161      	str	r1, [r4, #20]
 800b81c:	e7ea      	b.n	800b7f4 <__d2b+0x54>
 800b81e:	a801      	add	r0, sp, #4
 800b820:	f7ff fd47 	bl	800b2b2 <__lo0bits>
 800b824:	9b01      	ldr	r3, [sp, #4]
 800b826:	2601      	movs	r6, #1
 800b828:	6163      	str	r3, [r4, #20]
 800b82a:	3020      	adds	r0, #32
 800b82c:	e7e7      	b.n	800b7fe <__d2b+0x5e>
 800b82e:	4b0a      	ldr	r3, [pc, #40]	@ (800b858 <__d2b+0xb8>)
 800b830:	18c0      	adds	r0, r0, r3
 800b832:	9b08      	ldr	r3, [sp, #32]
 800b834:	6018      	str	r0, [r3, #0]
 800b836:	4b09      	ldr	r3, [pc, #36]	@ (800b85c <__d2b+0xbc>)
 800b838:	18f3      	adds	r3, r6, r3
 800b83a:	009b      	lsls	r3, r3, #2
 800b83c:	18e3      	adds	r3, r4, r3
 800b83e:	6958      	ldr	r0, [r3, #20]
 800b840:	f7ff fd16 	bl	800b270 <__hi0bits>
 800b844:	0176      	lsls	r6, r6, #5
 800b846:	e7e3      	b.n	800b810 <__d2b+0x70>
 800b848:	0800c488 	.word	0x0800c488
 800b84c:	0800c4aa 	.word	0x0800c4aa
 800b850:	0000030f 	.word	0x0000030f
 800b854:	fffffbcd 	.word	0xfffffbcd
 800b858:	fffffbce 	.word	0xfffffbce
 800b85c:	3fffffff 	.word	0x3fffffff

0800b860 <__sread>:
 800b860:	b570      	push	{r4, r5, r6, lr}
 800b862:	000c      	movs	r4, r1
 800b864:	250e      	movs	r5, #14
 800b866:	5f49      	ldrsh	r1, [r1, r5]
 800b868:	f000 f8ae 	bl	800b9c8 <_read_r>
 800b86c:	2800      	cmp	r0, #0
 800b86e:	db03      	blt.n	800b878 <__sread+0x18>
 800b870:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b872:	181b      	adds	r3, r3, r0
 800b874:	6563      	str	r3, [r4, #84]	@ 0x54
 800b876:	bd70      	pop	{r4, r5, r6, pc}
 800b878:	89a3      	ldrh	r3, [r4, #12]
 800b87a:	4a02      	ldr	r2, [pc, #8]	@ (800b884 <__sread+0x24>)
 800b87c:	4013      	ands	r3, r2
 800b87e:	81a3      	strh	r3, [r4, #12]
 800b880:	e7f9      	b.n	800b876 <__sread+0x16>
 800b882:	46c0      	nop			@ (mov r8, r8)
 800b884:	ffffefff 	.word	0xffffefff

0800b888 <__swrite>:
 800b888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b88a:	001f      	movs	r7, r3
 800b88c:	898b      	ldrh	r3, [r1, #12]
 800b88e:	0005      	movs	r5, r0
 800b890:	000c      	movs	r4, r1
 800b892:	0016      	movs	r6, r2
 800b894:	05db      	lsls	r3, r3, #23
 800b896:	d505      	bpl.n	800b8a4 <__swrite+0x1c>
 800b898:	230e      	movs	r3, #14
 800b89a:	5ec9      	ldrsh	r1, [r1, r3]
 800b89c:	2200      	movs	r2, #0
 800b89e:	2302      	movs	r3, #2
 800b8a0:	f000 f87e 	bl	800b9a0 <_lseek_r>
 800b8a4:	89a3      	ldrh	r3, [r4, #12]
 800b8a6:	4a05      	ldr	r2, [pc, #20]	@ (800b8bc <__swrite+0x34>)
 800b8a8:	0028      	movs	r0, r5
 800b8aa:	4013      	ands	r3, r2
 800b8ac:	81a3      	strh	r3, [r4, #12]
 800b8ae:	0032      	movs	r2, r6
 800b8b0:	230e      	movs	r3, #14
 800b8b2:	5ee1      	ldrsh	r1, [r4, r3]
 800b8b4:	003b      	movs	r3, r7
 800b8b6:	f000 f8ad 	bl	800ba14 <_write_r>
 800b8ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8bc:	ffffefff 	.word	0xffffefff

0800b8c0 <__sseek>:
 800b8c0:	b570      	push	{r4, r5, r6, lr}
 800b8c2:	000c      	movs	r4, r1
 800b8c4:	250e      	movs	r5, #14
 800b8c6:	5f49      	ldrsh	r1, [r1, r5]
 800b8c8:	f000 f86a 	bl	800b9a0 <_lseek_r>
 800b8cc:	89a3      	ldrh	r3, [r4, #12]
 800b8ce:	1c42      	adds	r2, r0, #1
 800b8d0:	d103      	bne.n	800b8da <__sseek+0x1a>
 800b8d2:	4a05      	ldr	r2, [pc, #20]	@ (800b8e8 <__sseek+0x28>)
 800b8d4:	4013      	ands	r3, r2
 800b8d6:	81a3      	strh	r3, [r4, #12]
 800b8d8:	bd70      	pop	{r4, r5, r6, pc}
 800b8da:	2280      	movs	r2, #128	@ 0x80
 800b8dc:	0152      	lsls	r2, r2, #5
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	81a3      	strh	r3, [r4, #12]
 800b8e2:	6560      	str	r0, [r4, #84]	@ 0x54
 800b8e4:	e7f8      	b.n	800b8d8 <__sseek+0x18>
 800b8e6:	46c0      	nop			@ (mov r8, r8)
 800b8e8:	ffffefff 	.word	0xffffefff

0800b8ec <__sclose>:
 800b8ec:	b510      	push	{r4, lr}
 800b8ee:	230e      	movs	r3, #14
 800b8f0:	5ec9      	ldrsh	r1, [r1, r3]
 800b8f2:	f000 f843 	bl	800b97c <_close_r>
 800b8f6:	bd10      	pop	{r4, pc}

0800b8f8 <_realloc_r>:
 800b8f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8fa:	0006      	movs	r6, r0
 800b8fc:	000c      	movs	r4, r1
 800b8fe:	0015      	movs	r5, r2
 800b900:	2900      	cmp	r1, #0
 800b902:	d105      	bne.n	800b910 <_realloc_r+0x18>
 800b904:	0011      	movs	r1, r2
 800b906:	f7ff fac5 	bl	800ae94 <_malloc_r>
 800b90a:	0004      	movs	r4, r0
 800b90c:	0020      	movs	r0, r4
 800b90e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b910:	2a00      	cmp	r2, #0
 800b912:	d103      	bne.n	800b91c <_realloc_r+0x24>
 800b914:	f000 f8e8 	bl	800bae8 <_free_r>
 800b918:	2400      	movs	r4, #0
 800b91a:	e7f7      	b.n	800b90c <_realloc_r+0x14>
 800b91c:	f000 f940 	bl	800bba0 <_malloc_usable_size_r>
 800b920:	0007      	movs	r7, r0
 800b922:	4285      	cmp	r5, r0
 800b924:	d802      	bhi.n	800b92c <_realloc_r+0x34>
 800b926:	0843      	lsrs	r3, r0, #1
 800b928:	42ab      	cmp	r3, r5
 800b92a:	d3ef      	bcc.n	800b90c <_realloc_r+0x14>
 800b92c:	0029      	movs	r1, r5
 800b92e:	0030      	movs	r0, r6
 800b930:	f7ff fab0 	bl	800ae94 <_malloc_r>
 800b934:	9001      	str	r0, [sp, #4]
 800b936:	2800      	cmp	r0, #0
 800b938:	d0ee      	beq.n	800b918 <_realloc_r+0x20>
 800b93a:	002a      	movs	r2, r5
 800b93c:	42bd      	cmp	r5, r7
 800b93e:	d900      	bls.n	800b942 <_realloc_r+0x4a>
 800b940:	003a      	movs	r2, r7
 800b942:	0021      	movs	r1, r4
 800b944:	9801      	ldr	r0, [sp, #4]
 800b946:	f000 f879 	bl	800ba3c <memcpy>
 800b94a:	0021      	movs	r1, r4
 800b94c:	0030      	movs	r0, r6
 800b94e:	f000 f8cb 	bl	800bae8 <_free_r>
 800b952:	9c01      	ldr	r4, [sp, #4]
 800b954:	e7da      	b.n	800b90c <_realloc_r+0x14>

0800b956 <memmove>:
 800b956:	b510      	push	{r4, lr}
 800b958:	4288      	cmp	r0, r1
 800b95a:	d806      	bhi.n	800b96a <memmove+0x14>
 800b95c:	2300      	movs	r3, #0
 800b95e:	429a      	cmp	r2, r3
 800b960:	d008      	beq.n	800b974 <memmove+0x1e>
 800b962:	5ccc      	ldrb	r4, [r1, r3]
 800b964:	54c4      	strb	r4, [r0, r3]
 800b966:	3301      	adds	r3, #1
 800b968:	e7f9      	b.n	800b95e <memmove+0x8>
 800b96a:	188b      	adds	r3, r1, r2
 800b96c:	4298      	cmp	r0, r3
 800b96e:	d2f5      	bcs.n	800b95c <memmove+0x6>
 800b970:	3a01      	subs	r2, #1
 800b972:	d200      	bcs.n	800b976 <memmove+0x20>
 800b974:	bd10      	pop	{r4, pc}
 800b976:	5c8b      	ldrb	r3, [r1, r2]
 800b978:	5483      	strb	r3, [r0, r2]
 800b97a:	e7f9      	b.n	800b970 <memmove+0x1a>

0800b97c <_close_r>:
 800b97c:	2300      	movs	r3, #0
 800b97e:	b570      	push	{r4, r5, r6, lr}
 800b980:	4d06      	ldr	r5, [pc, #24]	@ (800b99c <_close_r+0x20>)
 800b982:	0004      	movs	r4, r0
 800b984:	0008      	movs	r0, r1
 800b986:	602b      	str	r3, [r5, #0]
 800b988:	f7f8 fb2a 	bl	8003fe0 <_close>
 800b98c:	1c43      	adds	r3, r0, #1
 800b98e:	d103      	bne.n	800b998 <_close_r+0x1c>
 800b990:	682b      	ldr	r3, [r5, #0]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d000      	beq.n	800b998 <_close_r+0x1c>
 800b996:	6023      	str	r3, [r4, #0]
 800b998:	bd70      	pop	{r4, r5, r6, pc}
 800b99a:	46c0      	nop			@ (mov r8, r8)
 800b99c:	20000684 	.word	0x20000684

0800b9a0 <_lseek_r>:
 800b9a0:	b570      	push	{r4, r5, r6, lr}
 800b9a2:	0004      	movs	r4, r0
 800b9a4:	0008      	movs	r0, r1
 800b9a6:	0011      	movs	r1, r2
 800b9a8:	001a      	movs	r2, r3
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	4d05      	ldr	r5, [pc, #20]	@ (800b9c4 <_lseek_r+0x24>)
 800b9ae:	602b      	str	r3, [r5, #0]
 800b9b0:	f7f8 fb37 	bl	8004022 <_lseek>
 800b9b4:	1c43      	adds	r3, r0, #1
 800b9b6:	d103      	bne.n	800b9c0 <_lseek_r+0x20>
 800b9b8:	682b      	ldr	r3, [r5, #0]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d000      	beq.n	800b9c0 <_lseek_r+0x20>
 800b9be:	6023      	str	r3, [r4, #0]
 800b9c0:	bd70      	pop	{r4, r5, r6, pc}
 800b9c2:	46c0      	nop			@ (mov r8, r8)
 800b9c4:	20000684 	.word	0x20000684

0800b9c8 <_read_r>:
 800b9c8:	b570      	push	{r4, r5, r6, lr}
 800b9ca:	0004      	movs	r4, r0
 800b9cc:	0008      	movs	r0, r1
 800b9ce:	0011      	movs	r1, r2
 800b9d0:	001a      	movs	r2, r3
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	4d05      	ldr	r5, [pc, #20]	@ (800b9ec <_read_r+0x24>)
 800b9d6:	602b      	str	r3, [r5, #0]
 800b9d8:	f7f8 fac9 	bl	8003f6e <_read>
 800b9dc:	1c43      	adds	r3, r0, #1
 800b9de:	d103      	bne.n	800b9e8 <_read_r+0x20>
 800b9e0:	682b      	ldr	r3, [r5, #0]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d000      	beq.n	800b9e8 <_read_r+0x20>
 800b9e6:	6023      	str	r3, [r4, #0]
 800b9e8:	bd70      	pop	{r4, r5, r6, pc}
 800b9ea:	46c0      	nop			@ (mov r8, r8)
 800b9ec:	20000684 	.word	0x20000684

0800b9f0 <_sbrk_r>:
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	b570      	push	{r4, r5, r6, lr}
 800b9f4:	4d06      	ldr	r5, [pc, #24]	@ (800ba10 <_sbrk_r+0x20>)
 800b9f6:	0004      	movs	r4, r0
 800b9f8:	0008      	movs	r0, r1
 800b9fa:	602b      	str	r3, [r5, #0]
 800b9fc:	f7f8 fb1c 	bl	8004038 <_sbrk>
 800ba00:	1c43      	adds	r3, r0, #1
 800ba02:	d103      	bne.n	800ba0c <_sbrk_r+0x1c>
 800ba04:	682b      	ldr	r3, [r5, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d000      	beq.n	800ba0c <_sbrk_r+0x1c>
 800ba0a:	6023      	str	r3, [r4, #0]
 800ba0c:	bd70      	pop	{r4, r5, r6, pc}
 800ba0e:	46c0      	nop			@ (mov r8, r8)
 800ba10:	20000684 	.word	0x20000684

0800ba14 <_write_r>:
 800ba14:	b570      	push	{r4, r5, r6, lr}
 800ba16:	0004      	movs	r4, r0
 800ba18:	0008      	movs	r0, r1
 800ba1a:	0011      	movs	r1, r2
 800ba1c:	001a      	movs	r2, r3
 800ba1e:	2300      	movs	r3, #0
 800ba20:	4d05      	ldr	r5, [pc, #20]	@ (800ba38 <_write_r+0x24>)
 800ba22:	602b      	str	r3, [r5, #0]
 800ba24:	f7f8 fac0 	bl	8003fa8 <_write>
 800ba28:	1c43      	adds	r3, r0, #1
 800ba2a:	d103      	bne.n	800ba34 <_write_r+0x20>
 800ba2c:	682b      	ldr	r3, [r5, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d000      	beq.n	800ba34 <_write_r+0x20>
 800ba32:	6023      	str	r3, [r4, #0]
 800ba34:	bd70      	pop	{r4, r5, r6, pc}
 800ba36:	46c0      	nop			@ (mov r8, r8)
 800ba38:	20000684 	.word	0x20000684

0800ba3c <memcpy>:
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	b510      	push	{r4, lr}
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d100      	bne.n	800ba46 <memcpy+0xa>
 800ba44:	bd10      	pop	{r4, pc}
 800ba46:	5ccc      	ldrb	r4, [r1, r3]
 800ba48:	54c4      	strb	r4, [r0, r3]
 800ba4a:	3301      	adds	r3, #1
 800ba4c:	e7f8      	b.n	800ba40 <memcpy+0x4>
	...

0800ba50 <__assert_func>:
 800ba50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ba52:	0014      	movs	r4, r2
 800ba54:	001a      	movs	r2, r3
 800ba56:	4b09      	ldr	r3, [pc, #36]	@ (800ba7c <__assert_func+0x2c>)
 800ba58:	0005      	movs	r5, r0
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	000e      	movs	r6, r1
 800ba5e:	68d8      	ldr	r0, [r3, #12]
 800ba60:	4b07      	ldr	r3, [pc, #28]	@ (800ba80 <__assert_func+0x30>)
 800ba62:	2c00      	cmp	r4, #0
 800ba64:	d101      	bne.n	800ba6a <__assert_func+0x1a>
 800ba66:	4b07      	ldr	r3, [pc, #28]	@ (800ba84 <__assert_func+0x34>)
 800ba68:	001c      	movs	r4, r3
 800ba6a:	4907      	ldr	r1, [pc, #28]	@ (800ba88 <__assert_func+0x38>)
 800ba6c:	9301      	str	r3, [sp, #4]
 800ba6e:	9402      	str	r4, [sp, #8]
 800ba70:	002b      	movs	r3, r5
 800ba72:	9600      	str	r6, [sp, #0]
 800ba74:	f000 f89c 	bl	800bbb0 <fiprintf>
 800ba78:	f000 f8b7 	bl	800bbea <abort>
 800ba7c:	20000018 	.word	0x20000018
 800ba80:	0800c70b 	.word	0x0800c70b
 800ba84:	0800c746 	.word	0x0800c746
 800ba88:	0800c718 	.word	0x0800c718

0800ba8c <_calloc_r>:
 800ba8c:	b570      	push	{r4, r5, r6, lr}
 800ba8e:	0c0b      	lsrs	r3, r1, #16
 800ba90:	0c15      	lsrs	r5, r2, #16
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d11e      	bne.n	800bad4 <_calloc_r+0x48>
 800ba96:	2d00      	cmp	r5, #0
 800ba98:	d10c      	bne.n	800bab4 <_calloc_r+0x28>
 800ba9a:	b289      	uxth	r1, r1
 800ba9c:	b294      	uxth	r4, r2
 800ba9e:	434c      	muls	r4, r1
 800baa0:	0021      	movs	r1, r4
 800baa2:	f7ff f9f7 	bl	800ae94 <_malloc_r>
 800baa6:	1e05      	subs	r5, r0, #0
 800baa8:	d01a      	beq.n	800bae0 <_calloc_r+0x54>
 800baaa:	0022      	movs	r2, r4
 800baac:	2100      	movs	r1, #0
 800baae:	f7fe f9a1 	bl	8009df4 <memset>
 800bab2:	e016      	b.n	800bae2 <_calloc_r+0x56>
 800bab4:	1c2b      	adds	r3, r5, #0
 800bab6:	1c0c      	adds	r4, r1, #0
 800bab8:	b289      	uxth	r1, r1
 800baba:	b292      	uxth	r2, r2
 800babc:	434a      	muls	r2, r1
 800babe:	b29b      	uxth	r3, r3
 800bac0:	b2a1      	uxth	r1, r4
 800bac2:	4359      	muls	r1, r3
 800bac4:	0c14      	lsrs	r4, r2, #16
 800bac6:	190c      	adds	r4, r1, r4
 800bac8:	0c23      	lsrs	r3, r4, #16
 800baca:	d107      	bne.n	800badc <_calloc_r+0x50>
 800bacc:	0424      	lsls	r4, r4, #16
 800bace:	b292      	uxth	r2, r2
 800bad0:	4314      	orrs	r4, r2
 800bad2:	e7e5      	b.n	800baa0 <_calloc_r+0x14>
 800bad4:	2d00      	cmp	r5, #0
 800bad6:	d101      	bne.n	800badc <_calloc_r+0x50>
 800bad8:	1c14      	adds	r4, r2, #0
 800bada:	e7ed      	b.n	800bab8 <_calloc_r+0x2c>
 800badc:	230c      	movs	r3, #12
 800bade:	6003      	str	r3, [r0, #0]
 800bae0:	2500      	movs	r5, #0
 800bae2:	0028      	movs	r0, r5
 800bae4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bae8 <_free_r>:
 800bae8:	b570      	push	{r4, r5, r6, lr}
 800baea:	0005      	movs	r5, r0
 800baec:	1e0c      	subs	r4, r1, #0
 800baee:	d010      	beq.n	800bb12 <_free_r+0x2a>
 800baf0:	3c04      	subs	r4, #4
 800baf2:	6823      	ldr	r3, [r4, #0]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	da00      	bge.n	800bafa <_free_r+0x12>
 800baf8:	18e4      	adds	r4, r4, r3
 800bafa:	0028      	movs	r0, r5
 800bafc:	f7ff fafc 	bl	800b0f8 <__malloc_lock>
 800bb00:	4a1d      	ldr	r2, [pc, #116]	@ (800bb78 <_free_r+0x90>)
 800bb02:	6813      	ldr	r3, [r2, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d105      	bne.n	800bb14 <_free_r+0x2c>
 800bb08:	6063      	str	r3, [r4, #4]
 800bb0a:	6014      	str	r4, [r2, #0]
 800bb0c:	0028      	movs	r0, r5
 800bb0e:	f7ff fafb 	bl	800b108 <__malloc_unlock>
 800bb12:	bd70      	pop	{r4, r5, r6, pc}
 800bb14:	42a3      	cmp	r3, r4
 800bb16:	d908      	bls.n	800bb2a <_free_r+0x42>
 800bb18:	6820      	ldr	r0, [r4, #0]
 800bb1a:	1821      	adds	r1, r4, r0
 800bb1c:	428b      	cmp	r3, r1
 800bb1e:	d1f3      	bne.n	800bb08 <_free_r+0x20>
 800bb20:	6819      	ldr	r1, [r3, #0]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	1809      	adds	r1, r1, r0
 800bb26:	6021      	str	r1, [r4, #0]
 800bb28:	e7ee      	b.n	800bb08 <_free_r+0x20>
 800bb2a:	001a      	movs	r2, r3
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d001      	beq.n	800bb36 <_free_r+0x4e>
 800bb32:	42a3      	cmp	r3, r4
 800bb34:	d9f9      	bls.n	800bb2a <_free_r+0x42>
 800bb36:	6811      	ldr	r1, [r2, #0]
 800bb38:	1850      	adds	r0, r2, r1
 800bb3a:	42a0      	cmp	r0, r4
 800bb3c:	d10b      	bne.n	800bb56 <_free_r+0x6e>
 800bb3e:	6820      	ldr	r0, [r4, #0]
 800bb40:	1809      	adds	r1, r1, r0
 800bb42:	1850      	adds	r0, r2, r1
 800bb44:	6011      	str	r1, [r2, #0]
 800bb46:	4283      	cmp	r3, r0
 800bb48:	d1e0      	bne.n	800bb0c <_free_r+0x24>
 800bb4a:	6818      	ldr	r0, [r3, #0]
 800bb4c:	685b      	ldr	r3, [r3, #4]
 800bb4e:	1841      	adds	r1, r0, r1
 800bb50:	6011      	str	r1, [r2, #0]
 800bb52:	6053      	str	r3, [r2, #4]
 800bb54:	e7da      	b.n	800bb0c <_free_r+0x24>
 800bb56:	42a0      	cmp	r0, r4
 800bb58:	d902      	bls.n	800bb60 <_free_r+0x78>
 800bb5a:	230c      	movs	r3, #12
 800bb5c:	602b      	str	r3, [r5, #0]
 800bb5e:	e7d5      	b.n	800bb0c <_free_r+0x24>
 800bb60:	6820      	ldr	r0, [r4, #0]
 800bb62:	1821      	adds	r1, r4, r0
 800bb64:	428b      	cmp	r3, r1
 800bb66:	d103      	bne.n	800bb70 <_free_r+0x88>
 800bb68:	6819      	ldr	r1, [r3, #0]
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	1809      	adds	r1, r1, r0
 800bb6e:	6021      	str	r1, [r4, #0]
 800bb70:	6063      	str	r3, [r4, #4]
 800bb72:	6054      	str	r4, [r2, #4]
 800bb74:	e7ca      	b.n	800bb0c <_free_r+0x24>
 800bb76:	46c0      	nop			@ (mov r8, r8)
 800bb78:	20000680 	.word	0x20000680

0800bb7c <__ascii_mbtowc>:
 800bb7c:	b082      	sub	sp, #8
 800bb7e:	2900      	cmp	r1, #0
 800bb80:	d100      	bne.n	800bb84 <__ascii_mbtowc+0x8>
 800bb82:	a901      	add	r1, sp, #4
 800bb84:	1e10      	subs	r0, r2, #0
 800bb86:	d006      	beq.n	800bb96 <__ascii_mbtowc+0x1a>
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d006      	beq.n	800bb9a <__ascii_mbtowc+0x1e>
 800bb8c:	7813      	ldrb	r3, [r2, #0]
 800bb8e:	600b      	str	r3, [r1, #0]
 800bb90:	7810      	ldrb	r0, [r2, #0]
 800bb92:	1e43      	subs	r3, r0, #1
 800bb94:	4198      	sbcs	r0, r3
 800bb96:	b002      	add	sp, #8
 800bb98:	4770      	bx	lr
 800bb9a:	2002      	movs	r0, #2
 800bb9c:	4240      	negs	r0, r0
 800bb9e:	e7fa      	b.n	800bb96 <__ascii_mbtowc+0x1a>

0800bba0 <_malloc_usable_size_r>:
 800bba0:	1f0b      	subs	r3, r1, #4
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	1f18      	subs	r0, r3, #4
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	da01      	bge.n	800bbae <_malloc_usable_size_r+0xe>
 800bbaa:	580b      	ldr	r3, [r1, r0]
 800bbac:	18c0      	adds	r0, r0, r3
 800bbae:	4770      	bx	lr

0800bbb0 <fiprintf>:
 800bbb0:	b40e      	push	{r1, r2, r3}
 800bbb2:	b517      	push	{r0, r1, r2, r4, lr}
 800bbb4:	4c05      	ldr	r4, [pc, #20]	@ (800bbcc <fiprintf+0x1c>)
 800bbb6:	ab05      	add	r3, sp, #20
 800bbb8:	cb04      	ldmia	r3!, {r2}
 800bbba:	0001      	movs	r1, r0
 800bbbc:	6820      	ldr	r0, [r4, #0]
 800bbbe:	9301      	str	r3, [sp, #4]
 800bbc0:	f000 f842 	bl	800bc48 <_vfiprintf_r>
 800bbc4:	bc1e      	pop	{r1, r2, r3, r4}
 800bbc6:	bc08      	pop	{r3}
 800bbc8:	b003      	add	sp, #12
 800bbca:	4718      	bx	r3
 800bbcc:	20000018 	.word	0x20000018

0800bbd0 <__ascii_wctomb>:
 800bbd0:	0003      	movs	r3, r0
 800bbd2:	1e08      	subs	r0, r1, #0
 800bbd4:	d005      	beq.n	800bbe2 <__ascii_wctomb+0x12>
 800bbd6:	2aff      	cmp	r2, #255	@ 0xff
 800bbd8:	d904      	bls.n	800bbe4 <__ascii_wctomb+0x14>
 800bbda:	228a      	movs	r2, #138	@ 0x8a
 800bbdc:	2001      	movs	r0, #1
 800bbde:	601a      	str	r2, [r3, #0]
 800bbe0:	4240      	negs	r0, r0
 800bbe2:	4770      	bx	lr
 800bbe4:	2001      	movs	r0, #1
 800bbe6:	700a      	strb	r2, [r1, #0]
 800bbe8:	e7fb      	b.n	800bbe2 <__ascii_wctomb+0x12>

0800bbea <abort>:
 800bbea:	2006      	movs	r0, #6
 800bbec:	b510      	push	{r4, lr}
 800bbee:	f000 faa1 	bl	800c134 <raise>
 800bbf2:	2001      	movs	r0, #1
 800bbf4:	f7f8 f9ae 	bl	8003f54 <_exit>

0800bbf8 <__sfputc_r>:
 800bbf8:	6893      	ldr	r3, [r2, #8]
 800bbfa:	b510      	push	{r4, lr}
 800bbfc:	3b01      	subs	r3, #1
 800bbfe:	6093      	str	r3, [r2, #8]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	da04      	bge.n	800bc0e <__sfputc_r+0x16>
 800bc04:	6994      	ldr	r4, [r2, #24]
 800bc06:	42a3      	cmp	r3, r4
 800bc08:	db07      	blt.n	800bc1a <__sfputc_r+0x22>
 800bc0a:	290a      	cmp	r1, #10
 800bc0c:	d005      	beq.n	800bc1a <__sfputc_r+0x22>
 800bc0e:	6813      	ldr	r3, [r2, #0]
 800bc10:	1c58      	adds	r0, r3, #1
 800bc12:	6010      	str	r0, [r2, #0]
 800bc14:	7019      	strb	r1, [r3, #0]
 800bc16:	0008      	movs	r0, r1
 800bc18:	bd10      	pop	{r4, pc}
 800bc1a:	f000 f931 	bl	800be80 <__swbuf_r>
 800bc1e:	0001      	movs	r1, r0
 800bc20:	e7f9      	b.n	800bc16 <__sfputc_r+0x1e>

0800bc22 <__sfputs_r>:
 800bc22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc24:	0006      	movs	r6, r0
 800bc26:	000f      	movs	r7, r1
 800bc28:	0014      	movs	r4, r2
 800bc2a:	18d5      	adds	r5, r2, r3
 800bc2c:	42ac      	cmp	r4, r5
 800bc2e:	d101      	bne.n	800bc34 <__sfputs_r+0x12>
 800bc30:	2000      	movs	r0, #0
 800bc32:	e007      	b.n	800bc44 <__sfputs_r+0x22>
 800bc34:	7821      	ldrb	r1, [r4, #0]
 800bc36:	003a      	movs	r2, r7
 800bc38:	0030      	movs	r0, r6
 800bc3a:	f7ff ffdd 	bl	800bbf8 <__sfputc_r>
 800bc3e:	3401      	adds	r4, #1
 800bc40:	1c43      	adds	r3, r0, #1
 800bc42:	d1f3      	bne.n	800bc2c <__sfputs_r+0xa>
 800bc44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc48 <_vfiprintf_r>:
 800bc48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc4a:	b0a1      	sub	sp, #132	@ 0x84
 800bc4c:	000f      	movs	r7, r1
 800bc4e:	0015      	movs	r5, r2
 800bc50:	001e      	movs	r6, r3
 800bc52:	9003      	str	r0, [sp, #12]
 800bc54:	2800      	cmp	r0, #0
 800bc56:	d004      	beq.n	800bc62 <_vfiprintf_r+0x1a>
 800bc58:	6a03      	ldr	r3, [r0, #32]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d101      	bne.n	800bc62 <_vfiprintf_r+0x1a>
 800bc5e:	f7fe f895 	bl	8009d8c <__sinit>
 800bc62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc64:	07db      	lsls	r3, r3, #31
 800bc66:	d405      	bmi.n	800bc74 <_vfiprintf_r+0x2c>
 800bc68:	89bb      	ldrh	r3, [r7, #12]
 800bc6a:	059b      	lsls	r3, r3, #22
 800bc6c:	d402      	bmi.n	800bc74 <_vfiprintf_r+0x2c>
 800bc6e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800bc70:	f7fe f8f7 	bl	8009e62 <__retarget_lock_acquire_recursive>
 800bc74:	89bb      	ldrh	r3, [r7, #12]
 800bc76:	071b      	lsls	r3, r3, #28
 800bc78:	d502      	bpl.n	800bc80 <_vfiprintf_r+0x38>
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d113      	bne.n	800bca8 <_vfiprintf_r+0x60>
 800bc80:	0039      	movs	r1, r7
 800bc82:	9803      	ldr	r0, [sp, #12]
 800bc84:	f000 f93e 	bl	800bf04 <__swsetup_r>
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	d00d      	beq.n	800bca8 <_vfiprintf_r+0x60>
 800bc8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc8e:	07db      	lsls	r3, r3, #31
 800bc90:	d503      	bpl.n	800bc9a <_vfiprintf_r+0x52>
 800bc92:	2001      	movs	r0, #1
 800bc94:	4240      	negs	r0, r0
 800bc96:	b021      	add	sp, #132	@ 0x84
 800bc98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc9a:	89bb      	ldrh	r3, [r7, #12]
 800bc9c:	059b      	lsls	r3, r3, #22
 800bc9e:	d4f8      	bmi.n	800bc92 <_vfiprintf_r+0x4a>
 800bca0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800bca2:	f7fe f8df 	bl	8009e64 <__retarget_lock_release_recursive>
 800bca6:	e7f4      	b.n	800bc92 <_vfiprintf_r+0x4a>
 800bca8:	2300      	movs	r3, #0
 800bcaa:	ac08      	add	r4, sp, #32
 800bcac:	6163      	str	r3, [r4, #20]
 800bcae:	3320      	adds	r3, #32
 800bcb0:	7663      	strb	r3, [r4, #25]
 800bcb2:	3310      	adds	r3, #16
 800bcb4:	76a3      	strb	r3, [r4, #26]
 800bcb6:	9607      	str	r6, [sp, #28]
 800bcb8:	002e      	movs	r6, r5
 800bcba:	7833      	ldrb	r3, [r6, #0]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d001      	beq.n	800bcc4 <_vfiprintf_r+0x7c>
 800bcc0:	2b25      	cmp	r3, #37	@ 0x25
 800bcc2:	d148      	bne.n	800bd56 <_vfiprintf_r+0x10e>
 800bcc4:	1b73      	subs	r3, r6, r5
 800bcc6:	9305      	str	r3, [sp, #20]
 800bcc8:	42ae      	cmp	r6, r5
 800bcca:	d00b      	beq.n	800bce4 <_vfiprintf_r+0x9c>
 800bccc:	002a      	movs	r2, r5
 800bcce:	0039      	movs	r1, r7
 800bcd0:	9803      	ldr	r0, [sp, #12]
 800bcd2:	f7ff ffa6 	bl	800bc22 <__sfputs_r>
 800bcd6:	3001      	adds	r0, #1
 800bcd8:	d100      	bne.n	800bcdc <_vfiprintf_r+0x94>
 800bcda:	e0ae      	b.n	800be3a <_vfiprintf_r+0x1f2>
 800bcdc:	6963      	ldr	r3, [r4, #20]
 800bcde:	9a05      	ldr	r2, [sp, #20]
 800bce0:	189b      	adds	r3, r3, r2
 800bce2:	6163      	str	r3, [r4, #20]
 800bce4:	7833      	ldrb	r3, [r6, #0]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d100      	bne.n	800bcec <_vfiprintf_r+0xa4>
 800bcea:	e0a6      	b.n	800be3a <_vfiprintf_r+0x1f2>
 800bcec:	2201      	movs	r2, #1
 800bcee:	2300      	movs	r3, #0
 800bcf0:	4252      	negs	r2, r2
 800bcf2:	6062      	str	r2, [r4, #4]
 800bcf4:	a904      	add	r1, sp, #16
 800bcf6:	3254      	adds	r2, #84	@ 0x54
 800bcf8:	1852      	adds	r2, r2, r1
 800bcfa:	1c75      	adds	r5, r6, #1
 800bcfc:	6023      	str	r3, [r4, #0]
 800bcfe:	60e3      	str	r3, [r4, #12]
 800bd00:	60a3      	str	r3, [r4, #8]
 800bd02:	7013      	strb	r3, [r2, #0]
 800bd04:	65a3      	str	r3, [r4, #88]	@ 0x58
 800bd06:	4b59      	ldr	r3, [pc, #356]	@ (800be6c <_vfiprintf_r+0x224>)
 800bd08:	2205      	movs	r2, #5
 800bd0a:	0018      	movs	r0, r3
 800bd0c:	7829      	ldrb	r1, [r5, #0]
 800bd0e:	9305      	str	r3, [sp, #20]
 800bd10:	f7fe f8a9 	bl	8009e66 <memchr>
 800bd14:	1c6e      	adds	r6, r5, #1
 800bd16:	2800      	cmp	r0, #0
 800bd18:	d11f      	bne.n	800bd5a <_vfiprintf_r+0x112>
 800bd1a:	6822      	ldr	r2, [r4, #0]
 800bd1c:	06d3      	lsls	r3, r2, #27
 800bd1e:	d504      	bpl.n	800bd2a <_vfiprintf_r+0xe2>
 800bd20:	2353      	movs	r3, #83	@ 0x53
 800bd22:	a904      	add	r1, sp, #16
 800bd24:	185b      	adds	r3, r3, r1
 800bd26:	2120      	movs	r1, #32
 800bd28:	7019      	strb	r1, [r3, #0]
 800bd2a:	0713      	lsls	r3, r2, #28
 800bd2c:	d504      	bpl.n	800bd38 <_vfiprintf_r+0xf0>
 800bd2e:	2353      	movs	r3, #83	@ 0x53
 800bd30:	a904      	add	r1, sp, #16
 800bd32:	185b      	adds	r3, r3, r1
 800bd34:	212b      	movs	r1, #43	@ 0x2b
 800bd36:	7019      	strb	r1, [r3, #0]
 800bd38:	782b      	ldrb	r3, [r5, #0]
 800bd3a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd3c:	d016      	beq.n	800bd6c <_vfiprintf_r+0x124>
 800bd3e:	002e      	movs	r6, r5
 800bd40:	2100      	movs	r1, #0
 800bd42:	200a      	movs	r0, #10
 800bd44:	68e3      	ldr	r3, [r4, #12]
 800bd46:	7832      	ldrb	r2, [r6, #0]
 800bd48:	1c75      	adds	r5, r6, #1
 800bd4a:	3a30      	subs	r2, #48	@ 0x30
 800bd4c:	2a09      	cmp	r2, #9
 800bd4e:	d950      	bls.n	800bdf2 <_vfiprintf_r+0x1aa>
 800bd50:	2900      	cmp	r1, #0
 800bd52:	d111      	bne.n	800bd78 <_vfiprintf_r+0x130>
 800bd54:	e017      	b.n	800bd86 <_vfiprintf_r+0x13e>
 800bd56:	3601      	adds	r6, #1
 800bd58:	e7af      	b.n	800bcba <_vfiprintf_r+0x72>
 800bd5a:	9b05      	ldr	r3, [sp, #20]
 800bd5c:	6822      	ldr	r2, [r4, #0]
 800bd5e:	1ac0      	subs	r0, r0, r3
 800bd60:	2301      	movs	r3, #1
 800bd62:	4083      	lsls	r3, r0
 800bd64:	4313      	orrs	r3, r2
 800bd66:	0035      	movs	r5, r6
 800bd68:	6023      	str	r3, [r4, #0]
 800bd6a:	e7cc      	b.n	800bd06 <_vfiprintf_r+0xbe>
 800bd6c:	9b07      	ldr	r3, [sp, #28]
 800bd6e:	1d19      	adds	r1, r3, #4
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	9107      	str	r1, [sp, #28]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	db01      	blt.n	800bd7c <_vfiprintf_r+0x134>
 800bd78:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd7a:	e004      	b.n	800bd86 <_vfiprintf_r+0x13e>
 800bd7c:	425b      	negs	r3, r3
 800bd7e:	60e3      	str	r3, [r4, #12]
 800bd80:	2302      	movs	r3, #2
 800bd82:	4313      	orrs	r3, r2
 800bd84:	6023      	str	r3, [r4, #0]
 800bd86:	7833      	ldrb	r3, [r6, #0]
 800bd88:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd8a:	d10c      	bne.n	800bda6 <_vfiprintf_r+0x15e>
 800bd8c:	7873      	ldrb	r3, [r6, #1]
 800bd8e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd90:	d134      	bne.n	800bdfc <_vfiprintf_r+0x1b4>
 800bd92:	9b07      	ldr	r3, [sp, #28]
 800bd94:	3602      	adds	r6, #2
 800bd96:	1d1a      	adds	r2, r3, #4
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	9207      	str	r2, [sp, #28]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	da01      	bge.n	800bda4 <_vfiprintf_r+0x15c>
 800bda0:	2301      	movs	r3, #1
 800bda2:	425b      	negs	r3, r3
 800bda4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bda6:	4d32      	ldr	r5, [pc, #200]	@ (800be70 <_vfiprintf_r+0x228>)
 800bda8:	2203      	movs	r2, #3
 800bdaa:	0028      	movs	r0, r5
 800bdac:	7831      	ldrb	r1, [r6, #0]
 800bdae:	f7fe f85a 	bl	8009e66 <memchr>
 800bdb2:	2800      	cmp	r0, #0
 800bdb4:	d006      	beq.n	800bdc4 <_vfiprintf_r+0x17c>
 800bdb6:	2340      	movs	r3, #64	@ 0x40
 800bdb8:	1b40      	subs	r0, r0, r5
 800bdba:	4083      	lsls	r3, r0
 800bdbc:	6822      	ldr	r2, [r4, #0]
 800bdbe:	3601      	adds	r6, #1
 800bdc0:	4313      	orrs	r3, r2
 800bdc2:	6023      	str	r3, [r4, #0]
 800bdc4:	7831      	ldrb	r1, [r6, #0]
 800bdc6:	2206      	movs	r2, #6
 800bdc8:	482a      	ldr	r0, [pc, #168]	@ (800be74 <_vfiprintf_r+0x22c>)
 800bdca:	1c75      	adds	r5, r6, #1
 800bdcc:	7621      	strb	r1, [r4, #24]
 800bdce:	f7fe f84a 	bl	8009e66 <memchr>
 800bdd2:	2800      	cmp	r0, #0
 800bdd4:	d040      	beq.n	800be58 <_vfiprintf_r+0x210>
 800bdd6:	4b28      	ldr	r3, [pc, #160]	@ (800be78 <_vfiprintf_r+0x230>)
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d122      	bne.n	800be22 <_vfiprintf_r+0x1da>
 800bddc:	2207      	movs	r2, #7
 800bdde:	9b07      	ldr	r3, [sp, #28]
 800bde0:	3307      	adds	r3, #7
 800bde2:	4393      	bics	r3, r2
 800bde4:	3308      	adds	r3, #8
 800bde6:	9307      	str	r3, [sp, #28]
 800bde8:	6963      	ldr	r3, [r4, #20]
 800bdea:	9a04      	ldr	r2, [sp, #16]
 800bdec:	189b      	adds	r3, r3, r2
 800bdee:	6163      	str	r3, [r4, #20]
 800bdf0:	e762      	b.n	800bcb8 <_vfiprintf_r+0x70>
 800bdf2:	4343      	muls	r3, r0
 800bdf4:	002e      	movs	r6, r5
 800bdf6:	2101      	movs	r1, #1
 800bdf8:	189b      	adds	r3, r3, r2
 800bdfa:	e7a4      	b.n	800bd46 <_vfiprintf_r+0xfe>
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	200a      	movs	r0, #10
 800be00:	0019      	movs	r1, r3
 800be02:	3601      	adds	r6, #1
 800be04:	6063      	str	r3, [r4, #4]
 800be06:	7832      	ldrb	r2, [r6, #0]
 800be08:	1c75      	adds	r5, r6, #1
 800be0a:	3a30      	subs	r2, #48	@ 0x30
 800be0c:	2a09      	cmp	r2, #9
 800be0e:	d903      	bls.n	800be18 <_vfiprintf_r+0x1d0>
 800be10:	2b00      	cmp	r3, #0
 800be12:	d0c8      	beq.n	800bda6 <_vfiprintf_r+0x15e>
 800be14:	9109      	str	r1, [sp, #36]	@ 0x24
 800be16:	e7c6      	b.n	800bda6 <_vfiprintf_r+0x15e>
 800be18:	4341      	muls	r1, r0
 800be1a:	002e      	movs	r6, r5
 800be1c:	2301      	movs	r3, #1
 800be1e:	1889      	adds	r1, r1, r2
 800be20:	e7f1      	b.n	800be06 <_vfiprintf_r+0x1be>
 800be22:	aa07      	add	r2, sp, #28
 800be24:	9200      	str	r2, [sp, #0]
 800be26:	0021      	movs	r1, r4
 800be28:	003a      	movs	r2, r7
 800be2a:	4b14      	ldr	r3, [pc, #80]	@ (800be7c <_vfiprintf_r+0x234>)
 800be2c:	9803      	ldr	r0, [sp, #12]
 800be2e:	f7fd fb41 	bl	80094b4 <_printf_float>
 800be32:	9004      	str	r0, [sp, #16]
 800be34:	9b04      	ldr	r3, [sp, #16]
 800be36:	3301      	adds	r3, #1
 800be38:	d1d6      	bne.n	800bde8 <_vfiprintf_r+0x1a0>
 800be3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be3c:	07db      	lsls	r3, r3, #31
 800be3e:	d405      	bmi.n	800be4c <_vfiprintf_r+0x204>
 800be40:	89bb      	ldrh	r3, [r7, #12]
 800be42:	059b      	lsls	r3, r3, #22
 800be44:	d402      	bmi.n	800be4c <_vfiprintf_r+0x204>
 800be46:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800be48:	f7fe f80c 	bl	8009e64 <__retarget_lock_release_recursive>
 800be4c:	89bb      	ldrh	r3, [r7, #12]
 800be4e:	065b      	lsls	r3, r3, #25
 800be50:	d500      	bpl.n	800be54 <_vfiprintf_r+0x20c>
 800be52:	e71e      	b.n	800bc92 <_vfiprintf_r+0x4a>
 800be54:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800be56:	e71e      	b.n	800bc96 <_vfiprintf_r+0x4e>
 800be58:	aa07      	add	r2, sp, #28
 800be5a:	9200      	str	r2, [sp, #0]
 800be5c:	0021      	movs	r1, r4
 800be5e:	003a      	movs	r2, r7
 800be60:	4b06      	ldr	r3, [pc, #24]	@ (800be7c <_vfiprintf_r+0x234>)
 800be62:	9803      	ldr	r0, [sp, #12]
 800be64:	f7fd fdd4 	bl	8009a10 <_printf_i>
 800be68:	e7e3      	b.n	800be32 <_vfiprintf_r+0x1ea>
 800be6a:	46c0      	nop			@ (mov r8, r8)
 800be6c:	0800c499 	.word	0x0800c499
 800be70:	0800c49f 	.word	0x0800c49f
 800be74:	0800c4a3 	.word	0x0800c4a3
 800be78:	080094b5 	.word	0x080094b5
 800be7c:	0800bc23 	.word	0x0800bc23

0800be80 <__swbuf_r>:
 800be80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be82:	0006      	movs	r6, r0
 800be84:	000d      	movs	r5, r1
 800be86:	0014      	movs	r4, r2
 800be88:	2800      	cmp	r0, #0
 800be8a:	d004      	beq.n	800be96 <__swbuf_r+0x16>
 800be8c:	6a03      	ldr	r3, [r0, #32]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d101      	bne.n	800be96 <__swbuf_r+0x16>
 800be92:	f7fd ff7b 	bl	8009d8c <__sinit>
 800be96:	69a3      	ldr	r3, [r4, #24]
 800be98:	60a3      	str	r3, [r4, #8]
 800be9a:	89a3      	ldrh	r3, [r4, #12]
 800be9c:	071b      	lsls	r3, r3, #28
 800be9e:	d502      	bpl.n	800bea6 <__swbuf_r+0x26>
 800bea0:	6923      	ldr	r3, [r4, #16]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d109      	bne.n	800beba <__swbuf_r+0x3a>
 800bea6:	0021      	movs	r1, r4
 800bea8:	0030      	movs	r0, r6
 800beaa:	f000 f82b 	bl	800bf04 <__swsetup_r>
 800beae:	2800      	cmp	r0, #0
 800beb0:	d003      	beq.n	800beba <__swbuf_r+0x3a>
 800beb2:	2501      	movs	r5, #1
 800beb4:	426d      	negs	r5, r5
 800beb6:	0028      	movs	r0, r5
 800beb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beba:	6923      	ldr	r3, [r4, #16]
 800bebc:	6820      	ldr	r0, [r4, #0]
 800bebe:	b2ef      	uxtb	r7, r5
 800bec0:	1ac0      	subs	r0, r0, r3
 800bec2:	6963      	ldr	r3, [r4, #20]
 800bec4:	b2ed      	uxtb	r5, r5
 800bec6:	4283      	cmp	r3, r0
 800bec8:	dc05      	bgt.n	800bed6 <__swbuf_r+0x56>
 800beca:	0021      	movs	r1, r4
 800becc:	0030      	movs	r0, r6
 800bece:	f7ff f8e7 	bl	800b0a0 <_fflush_r>
 800bed2:	2800      	cmp	r0, #0
 800bed4:	d1ed      	bne.n	800beb2 <__swbuf_r+0x32>
 800bed6:	68a3      	ldr	r3, [r4, #8]
 800bed8:	3001      	adds	r0, #1
 800beda:	3b01      	subs	r3, #1
 800bedc:	60a3      	str	r3, [r4, #8]
 800bede:	6823      	ldr	r3, [r4, #0]
 800bee0:	1c5a      	adds	r2, r3, #1
 800bee2:	6022      	str	r2, [r4, #0]
 800bee4:	701f      	strb	r7, [r3, #0]
 800bee6:	6963      	ldr	r3, [r4, #20]
 800bee8:	4283      	cmp	r3, r0
 800beea:	d004      	beq.n	800bef6 <__swbuf_r+0x76>
 800beec:	89a3      	ldrh	r3, [r4, #12]
 800beee:	07db      	lsls	r3, r3, #31
 800bef0:	d5e1      	bpl.n	800beb6 <__swbuf_r+0x36>
 800bef2:	2d0a      	cmp	r5, #10
 800bef4:	d1df      	bne.n	800beb6 <__swbuf_r+0x36>
 800bef6:	0021      	movs	r1, r4
 800bef8:	0030      	movs	r0, r6
 800befa:	f7ff f8d1 	bl	800b0a0 <_fflush_r>
 800befe:	2800      	cmp	r0, #0
 800bf00:	d0d9      	beq.n	800beb6 <__swbuf_r+0x36>
 800bf02:	e7d6      	b.n	800beb2 <__swbuf_r+0x32>

0800bf04 <__swsetup_r>:
 800bf04:	4b2d      	ldr	r3, [pc, #180]	@ (800bfbc <__swsetup_r+0xb8>)
 800bf06:	b570      	push	{r4, r5, r6, lr}
 800bf08:	0005      	movs	r5, r0
 800bf0a:	6818      	ldr	r0, [r3, #0]
 800bf0c:	000c      	movs	r4, r1
 800bf0e:	2800      	cmp	r0, #0
 800bf10:	d004      	beq.n	800bf1c <__swsetup_r+0x18>
 800bf12:	6a03      	ldr	r3, [r0, #32]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d101      	bne.n	800bf1c <__swsetup_r+0x18>
 800bf18:	f7fd ff38 	bl	8009d8c <__sinit>
 800bf1c:	230c      	movs	r3, #12
 800bf1e:	5ee2      	ldrsh	r2, [r4, r3]
 800bf20:	0713      	lsls	r3, r2, #28
 800bf22:	d423      	bmi.n	800bf6c <__swsetup_r+0x68>
 800bf24:	06d3      	lsls	r3, r2, #27
 800bf26:	d407      	bmi.n	800bf38 <__swsetup_r+0x34>
 800bf28:	2309      	movs	r3, #9
 800bf2a:	602b      	str	r3, [r5, #0]
 800bf2c:	2340      	movs	r3, #64	@ 0x40
 800bf2e:	2001      	movs	r0, #1
 800bf30:	4313      	orrs	r3, r2
 800bf32:	81a3      	strh	r3, [r4, #12]
 800bf34:	4240      	negs	r0, r0
 800bf36:	e03a      	b.n	800bfae <__swsetup_r+0xaa>
 800bf38:	0752      	lsls	r2, r2, #29
 800bf3a:	d513      	bpl.n	800bf64 <__swsetup_r+0x60>
 800bf3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bf3e:	2900      	cmp	r1, #0
 800bf40:	d008      	beq.n	800bf54 <__swsetup_r+0x50>
 800bf42:	0023      	movs	r3, r4
 800bf44:	3344      	adds	r3, #68	@ 0x44
 800bf46:	4299      	cmp	r1, r3
 800bf48:	d002      	beq.n	800bf50 <__swsetup_r+0x4c>
 800bf4a:	0028      	movs	r0, r5
 800bf4c:	f7ff fdcc 	bl	800bae8 <_free_r>
 800bf50:	2300      	movs	r3, #0
 800bf52:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf54:	2224      	movs	r2, #36	@ 0x24
 800bf56:	89a3      	ldrh	r3, [r4, #12]
 800bf58:	4393      	bics	r3, r2
 800bf5a:	81a3      	strh	r3, [r4, #12]
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	6063      	str	r3, [r4, #4]
 800bf60:	6923      	ldr	r3, [r4, #16]
 800bf62:	6023      	str	r3, [r4, #0]
 800bf64:	2308      	movs	r3, #8
 800bf66:	89a2      	ldrh	r2, [r4, #12]
 800bf68:	4313      	orrs	r3, r2
 800bf6a:	81a3      	strh	r3, [r4, #12]
 800bf6c:	6923      	ldr	r3, [r4, #16]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d10b      	bne.n	800bf8a <__swsetup_r+0x86>
 800bf72:	21a0      	movs	r1, #160	@ 0xa0
 800bf74:	2280      	movs	r2, #128	@ 0x80
 800bf76:	89a3      	ldrh	r3, [r4, #12]
 800bf78:	0089      	lsls	r1, r1, #2
 800bf7a:	0092      	lsls	r2, r2, #2
 800bf7c:	400b      	ands	r3, r1
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d003      	beq.n	800bf8a <__swsetup_r+0x86>
 800bf82:	0021      	movs	r1, r4
 800bf84:	0028      	movs	r0, r5
 800bf86:	f000 f845 	bl	800c014 <__smakebuf_r>
 800bf8a:	230c      	movs	r3, #12
 800bf8c:	5ee2      	ldrsh	r2, [r4, r3]
 800bf8e:	2101      	movs	r1, #1
 800bf90:	0013      	movs	r3, r2
 800bf92:	400b      	ands	r3, r1
 800bf94:	420a      	tst	r2, r1
 800bf96:	d00b      	beq.n	800bfb0 <__swsetup_r+0xac>
 800bf98:	2300      	movs	r3, #0
 800bf9a:	60a3      	str	r3, [r4, #8]
 800bf9c:	6963      	ldr	r3, [r4, #20]
 800bf9e:	425b      	negs	r3, r3
 800bfa0:	61a3      	str	r3, [r4, #24]
 800bfa2:	2000      	movs	r0, #0
 800bfa4:	6923      	ldr	r3, [r4, #16]
 800bfa6:	4283      	cmp	r3, r0
 800bfa8:	d101      	bne.n	800bfae <__swsetup_r+0xaa>
 800bfaa:	0613      	lsls	r3, r2, #24
 800bfac:	d4be      	bmi.n	800bf2c <__swsetup_r+0x28>
 800bfae:	bd70      	pop	{r4, r5, r6, pc}
 800bfb0:	0791      	lsls	r1, r2, #30
 800bfb2:	d400      	bmi.n	800bfb6 <__swsetup_r+0xb2>
 800bfb4:	6963      	ldr	r3, [r4, #20]
 800bfb6:	60a3      	str	r3, [r4, #8]
 800bfb8:	e7f3      	b.n	800bfa2 <__swsetup_r+0x9e>
 800bfba:	46c0      	nop			@ (mov r8, r8)
 800bfbc:	20000018 	.word	0x20000018

0800bfc0 <__swhatbuf_r>:
 800bfc0:	b570      	push	{r4, r5, r6, lr}
 800bfc2:	000e      	movs	r6, r1
 800bfc4:	001d      	movs	r5, r3
 800bfc6:	230e      	movs	r3, #14
 800bfc8:	5ec9      	ldrsh	r1, [r1, r3]
 800bfca:	0014      	movs	r4, r2
 800bfcc:	b096      	sub	sp, #88	@ 0x58
 800bfce:	2900      	cmp	r1, #0
 800bfd0:	da0c      	bge.n	800bfec <__swhatbuf_r+0x2c>
 800bfd2:	89b2      	ldrh	r2, [r6, #12]
 800bfd4:	2380      	movs	r3, #128	@ 0x80
 800bfd6:	0011      	movs	r1, r2
 800bfd8:	4019      	ands	r1, r3
 800bfda:	421a      	tst	r2, r3
 800bfdc:	d114      	bne.n	800c008 <__swhatbuf_r+0x48>
 800bfde:	2380      	movs	r3, #128	@ 0x80
 800bfe0:	00db      	lsls	r3, r3, #3
 800bfe2:	2000      	movs	r0, #0
 800bfe4:	6029      	str	r1, [r5, #0]
 800bfe6:	6023      	str	r3, [r4, #0]
 800bfe8:	b016      	add	sp, #88	@ 0x58
 800bfea:	bd70      	pop	{r4, r5, r6, pc}
 800bfec:	466a      	mov	r2, sp
 800bfee:	f000 f853 	bl	800c098 <_fstat_r>
 800bff2:	2800      	cmp	r0, #0
 800bff4:	dbed      	blt.n	800bfd2 <__swhatbuf_r+0x12>
 800bff6:	23f0      	movs	r3, #240	@ 0xf0
 800bff8:	9901      	ldr	r1, [sp, #4]
 800bffa:	021b      	lsls	r3, r3, #8
 800bffc:	4019      	ands	r1, r3
 800bffe:	4b04      	ldr	r3, [pc, #16]	@ (800c010 <__swhatbuf_r+0x50>)
 800c000:	18c9      	adds	r1, r1, r3
 800c002:	424b      	negs	r3, r1
 800c004:	4159      	adcs	r1, r3
 800c006:	e7ea      	b.n	800bfde <__swhatbuf_r+0x1e>
 800c008:	2100      	movs	r1, #0
 800c00a:	2340      	movs	r3, #64	@ 0x40
 800c00c:	e7e9      	b.n	800bfe2 <__swhatbuf_r+0x22>
 800c00e:	46c0      	nop			@ (mov r8, r8)
 800c010:	ffffe000 	.word	0xffffe000

0800c014 <__smakebuf_r>:
 800c014:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c016:	2602      	movs	r6, #2
 800c018:	898b      	ldrh	r3, [r1, #12]
 800c01a:	0005      	movs	r5, r0
 800c01c:	000c      	movs	r4, r1
 800c01e:	b085      	sub	sp, #20
 800c020:	4233      	tst	r3, r6
 800c022:	d007      	beq.n	800c034 <__smakebuf_r+0x20>
 800c024:	0023      	movs	r3, r4
 800c026:	3347      	adds	r3, #71	@ 0x47
 800c028:	6023      	str	r3, [r4, #0]
 800c02a:	6123      	str	r3, [r4, #16]
 800c02c:	2301      	movs	r3, #1
 800c02e:	6163      	str	r3, [r4, #20]
 800c030:	b005      	add	sp, #20
 800c032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c034:	ab03      	add	r3, sp, #12
 800c036:	aa02      	add	r2, sp, #8
 800c038:	f7ff ffc2 	bl	800bfc0 <__swhatbuf_r>
 800c03c:	9f02      	ldr	r7, [sp, #8]
 800c03e:	9001      	str	r0, [sp, #4]
 800c040:	0039      	movs	r1, r7
 800c042:	0028      	movs	r0, r5
 800c044:	f7fe ff26 	bl	800ae94 <_malloc_r>
 800c048:	2800      	cmp	r0, #0
 800c04a:	d108      	bne.n	800c05e <__smakebuf_r+0x4a>
 800c04c:	220c      	movs	r2, #12
 800c04e:	5ea3      	ldrsh	r3, [r4, r2]
 800c050:	059a      	lsls	r2, r3, #22
 800c052:	d4ed      	bmi.n	800c030 <__smakebuf_r+0x1c>
 800c054:	2203      	movs	r2, #3
 800c056:	4393      	bics	r3, r2
 800c058:	431e      	orrs	r6, r3
 800c05a:	81a6      	strh	r6, [r4, #12]
 800c05c:	e7e2      	b.n	800c024 <__smakebuf_r+0x10>
 800c05e:	2380      	movs	r3, #128	@ 0x80
 800c060:	89a2      	ldrh	r2, [r4, #12]
 800c062:	6020      	str	r0, [r4, #0]
 800c064:	4313      	orrs	r3, r2
 800c066:	81a3      	strh	r3, [r4, #12]
 800c068:	9b03      	ldr	r3, [sp, #12]
 800c06a:	6120      	str	r0, [r4, #16]
 800c06c:	6167      	str	r7, [r4, #20]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d00c      	beq.n	800c08c <__smakebuf_r+0x78>
 800c072:	0028      	movs	r0, r5
 800c074:	230e      	movs	r3, #14
 800c076:	5ee1      	ldrsh	r1, [r4, r3]
 800c078:	f000 f820 	bl	800c0bc <_isatty_r>
 800c07c:	2800      	cmp	r0, #0
 800c07e:	d005      	beq.n	800c08c <__smakebuf_r+0x78>
 800c080:	2303      	movs	r3, #3
 800c082:	89a2      	ldrh	r2, [r4, #12]
 800c084:	439a      	bics	r2, r3
 800c086:	3b02      	subs	r3, #2
 800c088:	4313      	orrs	r3, r2
 800c08a:	81a3      	strh	r3, [r4, #12]
 800c08c:	89a3      	ldrh	r3, [r4, #12]
 800c08e:	9a01      	ldr	r2, [sp, #4]
 800c090:	4313      	orrs	r3, r2
 800c092:	81a3      	strh	r3, [r4, #12]
 800c094:	e7cc      	b.n	800c030 <__smakebuf_r+0x1c>
	...

0800c098 <_fstat_r>:
 800c098:	2300      	movs	r3, #0
 800c09a:	b570      	push	{r4, r5, r6, lr}
 800c09c:	4d06      	ldr	r5, [pc, #24]	@ (800c0b8 <_fstat_r+0x20>)
 800c09e:	0004      	movs	r4, r0
 800c0a0:	0008      	movs	r0, r1
 800c0a2:	0011      	movs	r1, r2
 800c0a4:	602b      	str	r3, [r5, #0]
 800c0a6:	f7f7 ffa5 	bl	8003ff4 <_fstat>
 800c0aa:	1c43      	adds	r3, r0, #1
 800c0ac:	d103      	bne.n	800c0b6 <_fstat_r+0x1e>
 800c0ae:	682b      	ldr	r3, [r5, #0]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d000      	beq.n	800c0b6 <_fstat_r+0x1e>
 800c0b4:	6023      	str	r3, [r4, #0]
 800c0b6:	bd70      	pop	{r4, r5, r6, pc}
 800c0b8:	20000684 	.word	0x20000684

0800c0bc <_isatty_r>:
 800c0bc:	2300      	movs	r3, #0
 800c0be:	b570      	push	{r4, r5, r6, lr}
 800c0c0:	4d06      	ldr	r5, [pc, #24]	@ (800c0dc <_isatty_r+0x20>)
 800c0c2:	0004      	movs	r4, r0
 800c0c4:	0008      	movs	r0, r1
 800c0c6:	602b      	str	r3, [r5, #0]
 800c0c8:	f7f7 ffa2 	bl	8004010 <_isatty>
 800c0cc:	1c43      	adds	r3, r0, #1
 800c0ce:	d103      	bne.n	800c0d8 <_isatty_r+0x1c>
 800c0d0:	682b      	ldr	r3, [r5, #0]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d000      	beq.n	800c0d8 <_isatty_r+0x1c>
 800c0d6:	6023      	str	r3, [r4, #0]
 800c0d8:	bd70      	pop	{r4, r5, r6, pc}
 800c0da:	46c0      	nop			@ (mov r8, r8)
 800c0dc:	20000684 	.word	0x20000684

0800c0e0 <_raise_r>:
 800c0e0:	b570      	push	{r4, r5, r6, lr}
 800c0e2:	0004      	movs	r4, r0
 800c0e4:	000d      	movs	r5, r1
 800c0e6:	291f      	cmp	r1, #31
 800c0e8:	d904      	bls.n	800c0f4 <_raise_r+0x14>
 800c0ea:	2316      	movs	r3, #22
 800c0ec:	6003      	str	r3, [r0, #0]
 800c0ee:	2001      	movs	r0, #1
 800c0f0:	4240      	negs	r0, r0
 800c0f2:	bd70      	pop	{r4, r5, r6, pc}
 800c0f4:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d004      	beq.n	800c104 <_raise_r+0x24>
 800c0fa:	008a      	lsls	r2, r1, #2
 800c0fc:	189b      	adds	r3, r3, r2
 800c0fe:	681a      	ldr	r2, [r3, #0]
 800c100:	2a00      	cmp	r2, #0
 800c102:	d108      	bne.n	800c116 <_raise_r+0x36>
 800c104:	0020      	movs	r0, r4
 800c106:	f000 f831 	bl	800c16c <_getpid_r>
 800c10a:	002a      	movs	r2, r5
 800c10c:	0001      	movs	r1, r0
 800c10e:	0020      	movs	r0, r4
 800c110:	f000 f81a 	bl	800c148 <_kill_r>
 800c114:	e7ed      	b.n	800c0f2 <_raise_r+0x12>
 800c116:	2a01      	cmp	r2, #1
 800c118:	d009      	beq.n	800c12e <_raise_r+0x4e>
 800c11a:	1c51      	adds	r1, r2, #1
 800c11c:	d103      	bne.n	800c126 <_raise_r+0x46>
 800c11e:	2316      	movs	r3, #22
 800c120:	6003      	str	r3, [r0, #0]
 800c122:	2001      	movs	r0, #1
 800c124:	e7e5      	b.n	800c0f2 <_raise_r+0x12>
 800c126:	2100      	movs	r1, #0
 800c128:	0028      	movs	r0, r5
 800c12a:	6019      	str	r1, [r3, #0]
 800c12c:	4790      	blx	r2
 800c12e:	2000      	movs	r0, #0
 800c130:	e7df      	b.n	800c0f2 <_raise_r+0x12>
	...

0800c134 <raise>:
 800c134:	b510      	push	{r4, lr}
 800c136:	4b03      	ldr	r3, [pc, #12]	@ (800c144 <raise+0x10>)
 800c138:	0001      	movs	r1, r0
 800c13a:	6818      	ldr	r0, [r3, #0]
 800c13c:	f7ff ffd0 	bl	800c0e0 <_raise_r>
 800c140:	bd10      	pop	{r4, pc}
 800c142:	46c0      	nop			@ (mov r8, r8)
 800c144:	20000018 	.word	0x20000018

0800c148 <_kill_r>:
 800c148:	2300      	movs	r3, #0
 800c14a:	b570      	push	{r4, r5, r6, lr}
 800c14c:	4d06      	ldr	r5, [pc, #24]	@ (800c168 <_kill_r+0x20>)
 800c14e:	0004      	movs	r4, r0
 800c150:	0008      	movs	r0, r1
 800c152:	0011      	movs	r1, r2
 800c154:	602b      	str	r3, [r5, #0]
 800c156:	f7f7 feed 	bl	8003f34 <_kill>
 800c15a:	1c43      	adds	r3, r0, #1
 800c15c:	d103      	bne.n	800c166 <_kill_r+0x1e>
 800c15e:	682b      	ldr	r3, [r5, #0]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d000      	beq.n	800c166 <_kill_r+0x1e>
 800c164:	6023      	str	r3, [r4, #0]
 800c166:	bd70      	pop	{r4, r5, r6, pc}
 800c168:	20000684 	.word	0x20000684

0800c16c <_getpid_r>:
 800c16c:	b510      	push	{r4, lr}
 800c16e:	f7f7 fedb 	bl	8003f28 <_getpid>
 800c172:	bd10      	pop	{r4, pc}

0800c174 <_init>:
 800c174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c176:	46c0      	nop			@ (mov r8, r8)
 800c178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c17a:	bc08      	pop	{r3}
 800c17c:	469e      	mov	lr, r3
 800c17e:	4770      	bx	lr

0800c180 <_fini>:
 800c180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c182:	46c0      	nop			@ (mov r8, r8)
 800c184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c186:	bc08      	pop	{r3}
 800c188:	469e      	mov	lr, r3
 800c18a:	4770      	bx	lr
